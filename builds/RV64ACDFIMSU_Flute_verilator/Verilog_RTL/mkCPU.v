//
// Generated by Bluespec Compiler, version 2024.01 (build ae2a2fc6)
//
//
// Ports:
// Name                         I/O  size props
// RDY_hart0_server_reset_request_put  O     1 reg
// hart0_server_reset_response_get  O     1 reg
// RDY_hart0_server_reset_response_get  O     1 reg
// imem_master_awvalid            O     1 reg
// imem_master_awid               O     4 reg
// imem_master_awaddr             O    64 reg
// imem_master_awlen              O     8 reg
// imem_master_awsize             O     3 reg
// imem_master_awburst            O     2 reg
// imem_master_awlock             O     1 reg
// imem_master_awcache            O     4 reg
// imem_master_awprot             O     3 reg
// imem_master_awqos              O     4 reg
// imem_master_awregion           O     4 reg
// imem_master_wvalid             O     1 reg
// imem_master_wdata              O    64 reg
// imem_master_wstrb              O     8 reg
// imem_master_wlast              O     1 reg
// imem_master_bready             O     1 reg
// imem_master_arvalid            O     1 reg
// imem_master_arid               O     4 reg
// imem_master_araddr             O    64 reg
// imem_master_arlen              O     8 reg
// imem_master_arsize             O     3 reg
// imem_master_arburst            O     2 reg
// imem_master_arlock             O     1 reg
// imem_master_arcache            O     4 reg
// imem_master_arprot             O     3 reg
// imem_master_arqos              O     4 reg
// imem_master_arregion           O     4 reg
// imem_master_rready             O     1 reg
// mem_master_awvalid             O     1 reg
// mem_master_awid                O     4 reg
// mem_master_awaddr              O    64 reg
// mem_master_awlen               O     8 reg
// mem_master_awsize              O     3 reg
// mem_master_awburst             O     2 reg
// mem_master_awlock              O     1 reg
// mem_master_awcache             O     4 reg
// mem_master_awprot              O     3 reg
// mem_master_awqos               O     4 reg
// mem_master_awregion            O     4 reg
// mem_master_wvalid              O     1 reg
// mem_master_wdata               O    64 reg
// mem_master_wstrb               O     8 reg
// mem_master_wlast               O     1 reg
// mem_master_bready              O     1 reg
// mem_master_arvalid             O     1 reg
// mem_master_arid                O     4 reg
// mem_master_araddr              O    64 reg
// mem_master_arlen               O     8 reg
// mem_master_arsize              O     3 reg
// mem_master_arburst             O     2 reg
// mem_master_arlock              O     1 reg
// mem_master_arcache             O     4 reg
// mem_master_arprot              O     3 reg
// mem_master_arqos               O     4 reg
// mem_master_arregion            O     4 reg
// mem_master_rready              O     1 reg
// dma_server_awready             O     1 const
// dma_server_wready              O     1 const
// dma_server_bvalid              O     1 const
// dma_server_bid                 O    16 const
// dma_server_bresp               O     2 const
// dma_server_arready             O     1 const
// dma_server_rvalid              O     1 const
// dma_server_rid                 O    16 const
// dma_server_rdata               O   512 const
// dma_server_rresp               O     2 const
// dma_server_rlast               O     1 const
// trace_data_out_get             O   427 reg
// RDY_trace_data_out_get         O     1 reg
// RDY_set_verbosity              O     1 const
// RDY_set_watch_tohost           O     1 const
// mv_tohost_value                O    64 reg
// RDY_mv_tohost_value            O     1 const
// RDY_ma_ddr4_ready              O     1 const
// mv_status                      O     8
// CLK                            I     1 clock
// RST_N                          I     1 reset
// hart0_server_reset_request_put  I     1 reg
// imem_master_awready            I     1
// imem_master_wready             I     1
// imem_master_bvalid             I     1
// imem_master_bid                I     4 reg
// imem_master_bresp              I     2 reg
// imem_master_arready            I     1
// imem_master_rvalid             I     1
// imem_master_rid                I     4 reg
// imem_master_rdata              I    64 reg
// imem_master_rresp              I     2 reg
// imem_master_rlast              I     1 reg
// mem_master_awready             I     1
// mem_master_wready              I     1
// mem_master_bvalid              I     1
// mem_master_bid                 I     4 reg
// mem_master_bresp               I     2 reg
// mem_master_arready             I     1
// mem_master_rvalid              I     1
// mem_master_rid                 I     4 reg
// mem_master_rdata               I    64 reg
// mem_master_rresp               I     2 reg
// mem_master_rlast               I     1 reg
// dma_server_awvalid             I     1 unused
// dma_server_awid                I    16 unused
// dma_server_awaddr              I    64 unused
// dma_server_awlen               I     8 unused
// dma_server_awsize              I     3 unused
// dma_server_awburst             I     2 unused
// dma_server_awlock              I     1 unused
// dma_server_awcache             I     4 unused
// dma_server_awprot              I     3 unused
// dma_server_awqos               I     4 unused
// dma_server_awregion            I     4 unused
// dma_server_wvalid              I     1 unused
// dma_server_wdata               I   512 unused
// dma_server_wstrb               I    64 unused
// dma_server_wlast               I     1 unused
// dma_server_bready              I     1 unused
// dma_server_arvalid             I     1 unused
// dma_server_arid                I    16 unused
// dma_server_araddr              I    64 unused
// dma_server_arlen               I     8 unused
// dma_server_arsize              I     3 unused
// dma_server_arburst             I     2 unused
// dma_server_arlock              I     1 unused
// dma_server_arcache             I     4 unused
// dma_server_arprot              I     3 unused
// dma_server_arqos               I     4 unused
// dma_server_arregion            I     4 unused
// dma_server_rready              I     1 unused
// m_external_interrupt_req_set_not_clear  I     1 reg
// s_external_interrupt_req_set_not_clear  I     1 reg
// ma_set_csr_time_t              I    64 reg
// software_interrupt_req_set_not_clear  I     1 reg
// timer_interrupt_req_set_not_clear  I     1 reg
// nmi_req_set_not_clear          I     1
// set_verbosity_verbosity        I     4
// set_verbosity_logdelay         I    64 reg
// set_watch_tohost_watch_tohost  I     1 reg
// set_watch_tohost_tohost_addr   I    64 reg
// EN_hart0_server_reset_request_put  I     1
// EN_set_verbosity               I     1
// EN_set_watch_tohost            I     1
// EN_ma_ddr4_ready               I     1
// EN_hart0_server_reset_response_get  I     1
// EN_trace_data_out_get          I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkCPU(CLK,
	     RST_N,

	     hart0_server_reset_request_put,
	     EN_hart0_server_reset_request_put,
	     RDY_hart0_server_reset_request_put,

	     EN_hart0_server_reset_response_get,
	     hart0_server_reset_response_get,
	     RDY_hart0_server_reset_response_get,

	     imem_master_awvalid,

	     imem_master_awid,

	     imem_master_awaddr,

	     imem_master_awlen,

	     imem_master_awsize,

	     imem_master_awburst,

	     imem_master_awlock,

	     imem_master_awcache,

	     imem_master_awprot,

	     imem_master_awqos,

	     imem_master_awregion,

	     imem_master_awready,

	     imem_master_wvalid,

	     imem_master_wdata,

	     imem_master_wstrb,

	     imem_master_wlast,

	     imem_master_wready,

	     imem_master_bvalid,
	     imem_master_bid,
	     imem_master_bresp,

	     imem_master_bready,

	     imem_master_arvalid,

	     imem_master_arid,

	     imem_master_araddr,

	     imem_master_arlen,

	     imem_master_arsize,

	     imem_master_arburst,

	     imem_master_arlock,

	     imem_master_arcache,

	     imem_master_arprot,

	     imem_master_arqos,

	     imem_master_arregion,

	     imem_master_arready,

	     imem_master_rvalid,
	     imem_master_rid,
	     imem_master_rdata,
	     imem_master_rresp,
	     imem_master_rlast,

	     imem_master_rready,

	     mem_master_awvalid,

	     mem_master_awid,

	     mem_master_awaddr,

	     mem_master_awlen,

	     mem_master_awsize,

	     mem_master_awburst,

	     mem_master_awlock,

	     mem_master_awcache,

	     mem_master_awprot,

	     mem_master_awqos,

	     mem_master_awregion,

	     mem_master_awready,

	     mem_master_wvalid,

	     mem_master_wdata,

	     mem_master_wstrb,

	     mem_master_wlast,

	     mem_master_wready,

	     mem_master_bvalid,
	     mem_master_bid,
	     mem_master_bresp,

	     mem_master_bready,

	     mem_master_arvalid,

	     mem_master_arid,

	     mem_master_araddr,

	     mem_master_arlen,

	     mem_master_arsize,

	     mem_master_arburst,

	     mem_master_arlock,

	     mem_master_arcache,

	     mem_master_arprot,

	     mem_master_arqos,

	     mem_master_arregion,

	     mem_master_arready,

	     mem_master_rvalid,
	     mem_master_rid,
	     mem_master_rdata,
	     mem_master_rresp,
	     mem_master_rlast,

	     mem_master_rready,

	     dma_server_awvalid,
	     dma_server_awid,
	     dma_server_awaddr,
	     dma_server_awlen,
	     dma_server_awsize,
	     dma_server_awburst,
	     dma_server_awlock,
	     dma_server_awcache,
	     dma_server_awprot,
	     dma_server_awqos,
	     dma_server_awregion,

	     dma_server_awready,

	     dma_server_wvalid,
	     dma_server_wdata,
	     dma_server_wstrb,
	     dma_server_wlast,

	     dma_server_wready,

	     dma_server_bvalid,

	     dma_server_bid,

	     dma_server_bresp,

	     dma_server_bready,

	     dma_server_arvalid,
	     dma_server_arid,
	     dma_server_araddr,
	     dma_server_arlen,
	     dma_server_arsize,
	     dma_server_arburst,
	     dma_server_arlock,
	     dma_server_arcache,
	     dma_server_arprot,
	     dma_server_arqos,
	     dma_server_arregion,

	     dma_server_arready,

	     dma_server_rvalid,

	     dma_server_rid,

	     dma_server_rdata,

	     dma_server_rresp,

	     dma_server_rlast,

	     dma_server_rready,

	     m_external_interrupt_req_set_not_clear,

	     s_external_interrupt_req_set_not_clear,

	     ma_set_csr_time_t,

	     software_interrupt_req_set_not_clear,

	     timer_interrupt_req_set_not_clear,

	     nmi_req_set_not_clear,

	     EN_trace_data_out_get,
	     trace_data_out_get,
	     RDY_trace_data_out_get,

	     set_verbosity_verbosity,
	     set_verbosity_logdelay,
	     EN_set_verbosity,
	     RDY_set_verbosity,

	     set_watch_tohost_watch_tohost,
	     set_watch_tohost_tohost_addr,
	     EN_set_watch_tohost,
	     RDY_set_watch_tohost,

	     mv_tohost_value,
	     RDY_mv_tohost_value,

	     EN_ma_ddr4_ready,
	     RDY_ma_ddr4_ready,

	     mv_status);
  input  CLK;
  input  RST_N;

  // action method hart0_server_reset_request_put
  input  hart0_server_reset_request_put;
  input  EN_hart0_server_reset_request_put;
  output RDY_hart0_server_reset_request_put;

  // actionvalue method hart0_server_reset_response_get
  input  EN_hart0_server_reset_response_get;
  output hart0_server_reset_response_get;
  output RDY_hart0_server_reset_response_get;

  // value method imem_master_m_awvalid
  output imem_master_awvalid;

  // value method imem_master_m_awid
  output [3 : 0] imem_master_awid;

  // value method imem_master_m_awaddr
  output [63 : 0] imem_master_awaddr;

  // value method imem_master_m_awlen
  output [7 : 0] imem_master_awlen;

  // value method imem_master_m_awsize
  output [2 : 0] imem_master_awsize;

  // value method imem_master_m_awburst
  output [1 : 0] imem_master_awburst;

  // value method imem_master_m_awlock
  output imem_master_awlock;

  // value method imem_master_m_awcache
  output [3 : 0] imem_master_awcache;

  // value method imem_master_m_awprot
  output [2 : 0] imem_master_awprot;

  // value method imem_master_m_awqos
  output [3 : 0] imem_master_awqos;

  // value method imem_master_m_awregion
  output [3 : 0] imem_master_awregion;

  // value method imem_master_m_awuser

  // action method imem_master_m_awready
  input  imem_master_awready;

  // value method imem_master_m_wvalid
  output imem_master_wvalid;

  // value method imem_master_m_wdata
  output [63 : 0] imem_master_wdata;

  // value method imem_master_m_wstrb
  output [7 : 0] imem_master_wstrb;

  // value method imem_master_m_wlast
  output imem_master_wlast;

  // value method imem_master_m_wuser

  // action method imem_master_m_wready
  input  imem_master_wready;

  // action method imem_master_m_bvalid
  input  imem_master_bvalid;
  input  [3 : 0] imem_master_bid;
  input  [1 : 0] imem_master_bresp;

  // value method imem_master_m_bready
  output imem_master_bready;

  // value method imem_master_m_arvalid
  output imem_master_arvalid;

  // value method imem_master_m_arid
  output [3 : 0] imem_master_arid;

  // value method imem_master_m_araddr
  output [63 : 0] imem_master_araddr;

  // value method imem_master_m_arlen
  output [7 : 0] imem_master_arlen;

  // value method imem_master_m_arsize
  output [2 : 0] imem_master_arsize;

  // value method imem_master_m_arburst
  output [1 : 0] imem_master_arburst;

  // value method imem_master_m_arlock
  output imem_master_arlock;

  // value method imem_master_m_arcache
  output [3 : 0] imem_master_arcache;

  // value method imem_master_m_arprot
  output [2 : 0] imem_master_arprot;

  // value method imem_master_m_arqos
  output [3 : 0] imem_master_arqos;

  // value method imem_master_m_arregion
  output [3 : 0] imem_master_arregion;

  // value method imem_master_m_aruser

  // action method imem_master_m_arready
  input  imem_master_arready;

  // action method imem_master_m_rvalid
  input  imem_master_rvalid;
  input  [3 : 0] imem_master_rid;
  input  [63 : 0] imem_master_rdata;
  input  [1 : 0] imem_master_rresp;
  input  imem_master_rlast;

  // value method imem_master_m_rready
  output imem_master_rready;

  // value method mem_master_m_awvalid
  output mem_master_awvalid;

  // value method mem_master_m_awid
  output [3 : 0] mem_master_awid;

  // value method mem_master_m_awaddr
  output [63 : 0] mem_master_awaddr;

  // value method mem_master_m_awlen
  output [7 : 0] mem_master_awlen;

  // value method mem_master_m_awsize
  output [2 : 0] mem_master_awsize;

  // value method mem_master_m_awburst
  output [1 : 0] mem_master_awburst;

  // value method mem_master_m_awlock
  output mem_master_awlock;

  // value method mem_master_m_awcache
  output [3 : 0] mem_master_awcache;

  // value method mem_master_m_awprot
  output [2 : 0] mem_master_awprot;

  // value method mem_master_m_awqos
  output [3 : 0] mem_master_awqos;

  // value method mem_master_m_awregion
  output [3 : 0] mem_master_awregion;

  // value method mem_master_m_awuser

  // action method mem_master_m_awready
  input  mem_master_awready;

  // value method mem_master_m_wvalid
  output mem_master_wvalid;

  // value method mem_master_m_wdata
  output [63 : 0] mem_master_wdata;

  // value method mem_master_m_wstrb
  output [7 : 0] mem_master_wstrb;

  // value method mem_master_m_wlast
  output mem_master_wlast;

  // value method mem_master_m_wuser

  // action method mem_master_m_wready
  input  mem_master_wready;

  // action method mem_master_m_bvalid
  input  mem_master_bvalid;
  input  [3 : 0] mem_master_bid;
  input  [1 : 0] mem_master_bresp;

  // value method mem_master_m_bready
  output mem_master_bready;

  // value method mem_master_m_arvalid
  output mem_master_arvalid;

  // value method mem_master_m_arid
  output [3 : 0] mem_master_arid;

  // value method mem_master_m_araddr
  output [63 : 0] mem_master_araddr;

  // value method mem_master_m_arlen
  output [7 : 0] mem_master_arlen;

  // value method mem_master_m_arsize
  output [2 : 0] mem_master_arsize;

  // value method mem_master_m_arburst
  output [1 : 0] mem_master_arburst;

  // value method mem_master_m_arlock
  output mem_master_arlock;

  // value method mem_master_m_arcache
  output [3 : 0] mem_master_arcache;

  // value method mem_master_m_arprot
  output [2 : 0] mem_master_arprot;

  // value method mem_master_m_arqos
  output [3 : 0] mem_master_arqos;

  // value method mem_master_m_arregion
  output [3 : 0] mem_master_arregion;

  // value method mem_master_m_aruser

  // action method mem_master_m_arready
  input  mem_master_arready;

  // action method mem_master_m_rvalid
  input  mem_master_rvalid;
  input  [3 : 0] mem_master_rid;
  input  [63 : 0] mem_master_rdata;
  input  [1 : 0] mem_master_rresp;
  input  mem_master_rlast;

  // value method mem_master_m_rready
  output mem_master_rready;

  // action method dma_server_m_awvalid
  input  dma_server_awvalid;
  input  [15 : 0] dma_server_awid;
  input  [63 : 0] dma_server_awaddr;
  input  [7 : 0] dma_server_awlen;
  input  [2 : 0] dma_server_awsize;
  input  [1 : 0] dma_server_awburst;
  input  dma_server_awlock;
  input  [3 : 0] dma_server_awcache;
  input  [2 : 0] dma_server_awprot;
  input  [3 : 0] dma_server_awqos;
  input  [3 : 0] dma_server_awregion;

  // value method dma_server_m_awready
  output dma_server_awready;

  // action method dma_server_m_wvalid
  input  dma_server_wvalid;
  input  [511 : 0] dma_server_wdata;
  input  [63 : 0] dma_server_wstrb;
  input  dma_server_wlast;

  // value method dma_server_m_wready
  output dma_server_wready;

  // value method dma_server_m_bvalid
  output dma_server_bvalid;

  // value method dma_server_m_bid
  output [15 : 0] dma_server_bid;

  // value method dma_server_m_bresp
  output [1 : 0] dma_server_bresp;

  // value method dma_server_m_buser

  // action method dma_server_m_bready
  input  dma_server_bready;

  // action method dma_server_m_arvalid
  input  dma_server_arvalid;
  input  [15 : 0] dma_server_arid;
  input  [63 : 0] dma_server_araddr;
  input  [7 : 0] dma_server_arlen;
  input  [2 : 0] dma_server_arsize;
  input  [1 : 0] dma_server_arburst;
  input  dma_server_arlock;
  input  [3 : 0] dma_server_arcache;
  input  [2 : 0] dma_server_arprot;
  input  [3 : 0] dma_server_arqos;
  input  [3 : 0] dma_server_arregion;

  // value method dma_server_m_arready
  output dma_server_arready;

  // value method dma_server_m_rvalid
  output dma_server_rvalid;

  // value method dma_server_m_rid
  output [15 : 0] dma_server_rid;

  // value method dma_server_m_rdata
  output [511 : 0] dma_server_rdata;

  // value method dma_server_m_rresp
  output [1 : 0] dma_server_rresp;

  // value method dma_server_m_rlast
  output dma_server_rlast;

  // value method dma_server_m_ruser

  // action method dma_server_m_rready
  input  dma_server_rready;

  // action method m_external_interrupt_req
  input  m_external_interrupt_req_set_not_clear;

  // action method s_external_interrupt_req
  input  s_external_interrupt_req_set_not_clear;

  // action method ma_set_csr_time
  input  [63 : 0] ma_set_csr_time_t;

  // action method software_interrupt_req
  input  software_interrupt_req_set_not_clear;

  // action method timer_interrupt_req
  input  timer_interrupt_req_set_not_clear;

  // action method nmi_req
  input  nmi_req_set_not_clear;

  // actionvalue method trace_data_out_get
  input  EN_trace_data_out_get;
  output [426 : 0] trace_data_out_get;
  output RDY_trace_data_out_get;

  // action method set_verbosity
  input  [3 : 0] set_verbosity_verbosity;
  input  [63 : 0] set_verbosity_logdelay;
  input  EN_set_verbosity;
  output RDY_set_verbosity;

  // action method set_watch_tohost
  input  set_watch_tohost_watch_tohost;
  input  [63 : 0] set_watch_tohost_tohost_addr;
  input  EN_set_watch_tohost;
  output RDY_set_watch_tohost;

  // value method mv_tohost_value
  output [63 : 0] mv_tohost_value;
  output RDY_mv_tohost_value;

  // action method ma_ddr4_ready
  input  EN_ma_ddr4_ready;
  output RDY_ma_ddr4_ready;

  // value method mv_status
  output [7 : 0] mv_status;

  // signals for module outputs
  wire [511 : 0] dma_server_rdata;
  wire [426 : 0] trace_data_out_get;
  wire [63 : 0] imem_master_araddr,
		imem_master_awaddr,
		imem_master_wdata,
		mem_master_araddr,
		mem_master_awaddr,
		mem_master_wdata,
		mv_tohost_value;
  wire [15 : 0] dma_server_bid, dma_server_rid;
  wire [7 : 0] imem_master_arlen,
	       imem_master_awlen,
	       imem_master_wstrb,
	       mem_master_arlen,
	       mem_master_awlen,
	       mem_master_wstrb,
	       mv_status;
  wire [3 : 0] imem_master_arcache,
	       imem_master_arid,
	       imem_master_arqos,
	       imem_master_arregion,
	       imem_master_awcache,
	       imem_master_awid,
	       imem_master_awqos,
	       imem_master_awregion,
	       mem_master_arcache,
	       mem_master_arid,
	       mem_master_arqos,
	       mem_master_arregion,
	       mem_master_awcache,
	       mem_master_awid,
	       mem_master_awqos,
	       mem_master_awregion;
  wire [2 : 0] imem_master_arprot,
	       imem_master_arsize,
	       imem_master_awprot,
	       imem_master_awsize,
	       mem_master_arprot,
	       mem_master_arsize,
	       mem_master_awprot,
	       mem_master_awsize;
  wire [1 : 0] dma_server_bresp,
	       dma_server_rresp,
	       imem_master_arburst,
	       imem_master_awburst,
	       mem_master_arburst,
	       mem_master_awburst;
  wire RDY_hart0_server_reset_request_put,
       RDY_hart0_server_reset_response_get,
       RDY_ma_ddr4_ready,
       RDY_mv_tohost_value,
       RDY_set_verbosity,
       RDY_set_watch_tohost,
       RDY_trace_data_out_get,
       dma_server_arready,
       dma_server_awready,
       dma_server_bvalid,
       dma_server_rlast,
       dma_server_rvalid,
       dma_server_wready,
       hart0_server_reset_response_get,
       imem_master_arlock,
       imem_master_arvalid,
       imem_master_awlock,
       imem_master_awvalid,
       imem_master_bready,
       imem_master_rready,
       imem_master_wlast,
       imem_master_wvalid,
       mem_master_arlock,
       mem_master_arvalid,
       mem_master_awlock,
       mem_master_awvalid,
       mem_master_bready,
       mem_master_rready,
       mem_master_wlast,
       mem_master_wvalid;

  // register cfg_logdelay
  reg [63 : 0] cfg_logdelay;
  wire [63 : 0] cfg_logdelay$D_IN;
  wire cfg_logdelay$EN;

  // register cfg_verbosity
  reg [3 : 0] cfg_verbosity;
  wire [3 : 0] cfg_verbosity$D_IN;
  wire cfg_verbosity$EN;

  // register imem_rg_cache_addr
  reg [63 : 0] imem_rg_cache_addr;
  reg [63 : 0] imem_rg_cache_addr$D_IN;
  wire imem_rg_cache_addr$EN;

  // register imem_rg_cache_b16
  reg [15 : 0] imem_rg_cache_b16;
  wire [15 : 0] imem_rg_cache_b16$D_IN;
  wire imem_rg_cache_b16$EN;

  // register imem_rg_f3
  reg [2 : 0] imem_rg_f3;
  wire [2 : 0] imem_rg_f3$D_IN;
  wire imem_rg_f3$EN;

  // register imem_rg_mstatus_MXR
  reg imem_rg_mstatus_MXR;
  wire imem_rg_mstatus_MXR$D_IN, imem_rg_mstatus_MXR$EN;

  // register imem_rg_pc
  reg [63 : 0] imem_rg_pc;
  reg [63 : 0] imem_rg_pc$D_IN;
  wire imem_rg_pc$EN;

  // register imem_rg_priv
  reg [1 : 0] imem_rg_priv;
  wire [1 : 0] imem_rg_priv$D_IN;
  wire imem_rg_priv$EN;

  // register imem_rg_satp
  reg [63 : 0] imem_rg_satp;
  wire [63 : 0] imem_rg_satp$D_IN;
  wire imem_rg_satp$EN;

  // register imem_rg_sstatus_SUM
  reg imem_rg_sstatus_SUM;
  wire imem_rg_sstatus_SUM$D_IN, imem_rg_sstatus_SUM$EN;

  // register imem_rg_tval
  reg [63 : 0] imem_rg_tval;
  reg [63 : 0] imem_rg_tval$D_IN;
  wire imem_rg_tval$EN;

  // register rg_csr_pc
  reg [63 : 0] rg_csr_pc;
  wire [63 : 0] rg_csr_pc$D_IN;
  wire rg_csr_pc$EN;

  // register rg_csr_val1
  reg [63 : 0] rg_csr_val1;
  wire [63 : 0] rg_csr_val1$D_IN;
  wire rg_csr_val1$EN;

  // register rg_cur_priv
  reg [1 : 0] rg_cur_priv;
  reg [1 : 0] rg_cur_priv$D_IN;
  wire rg_cur_priv$EN;

  // register rg_epoch
  reg [1 : 0] rg_epoch;
  reg [1 : 0] rg_epoch$D_IN;
  wire rg_epoch$EN;

  // register rg_instret_reported
  reg [63 : 0] rg_instret_reported;
  wire [63 : 0] rg_instret_reported$D_IN;
  wire rg_instret_reported$EN;

  // register rg_mstatus_MXR
  reg rg_mstatus_MXR;
  wire rg_mstatus_MXR$D_IN, rg_mstatus_MXR$EN;

  // register rg_next_pc
  reg [63 : 0] rg_next_pc;
  reg [63 : 0] rg_next_pc$D_IN;
  wire rg_next_pc$EN;

  // register rg_pc_reported
  reg [63 : 0] rg_pc_reported;
  reg [63 : 0] rg_pc_reported$D_IN;
  wire rg_pc_reported$EN;

  // register rg_prev_mip
  reg [63 : 0] rg_prev_mip;
  wire [63 : 0] rg_prev_mip$D_IN;
  wire rg_prev_mip$EN;

  // register rg_run_on_reset
  reg rg_run_on_reset;
  wire rg_run_on_reset$D_IN, rg_run_on_reset$EN;

  // register rg_sstatus_SUM
  reg rg_sstatus_SUM;
  wire rg_sstatus_SUM$D_IN, rg_sstatus_SUM$EN;

  // register rg_start_CPI_cycles
  reg [63 : 0] rg_start_CPI_cycles;
  wire [63 : 0] rg_start_CPI_cycles$D_IN;
  wire rg_start_CPI_cycles$EN;

  // register rg_start_CPI_instrs
  reg [63 : 0] rg_start_CPI_instrs;
  wire [63 : 0] rg_start_CPI_instrs$D_IN;
  wire rg_start_CPI_instrs$EN;

  // register rg_state
  reg [3 : 0] rg_state;
  reg [3 : 0] rg_state$D_IN;
  wire rg_state$EN;

  // register rg_trap_info
  reg [131 : 0] rg_trap_info;
  reg [131 : 0] rg_trap_info$D_IN;
  wire rg_trap_info$EN;

  // register rg_trap_instr
  reg [31 : 0] rg_trap_instr;
  wire [31 : 0] rg_trap_instr$D_IN;
  wire rg_trap_instr$EN;

  // register rg_trap_interrupt
  reg rg_trap_interrupt;
  wire rg_trap_interrupt$D_IN, rg_trap_interrupt$EN;

  // register rg_trap_trace_data
  reg [426 : 0] rg_trap_trace_data;
  wire [426 : 0] rg_trap_trace_data$D_IN;
  wire rg_trap_trace_data$EN;

  // register rg_wfi_counter
  reg [31 : 0] rg_wfi_counter;
  wire [31 : 0] rg_wfi_counter$D_IN;
  wire rg_wfi_counter$EN;

  // register stage1_rg_full
  reg stage1_rg_full;
  reg stage1_rg_full$D_IN;
  wire stage1_rg_full$EN;

  // register stage1_rg_stage_input
  reg [437 : 0] stage1_rg_stage_input;
  wire [437 : 0] stage1_rg_stage_input$D_IN;
  wire stage1_rg_stage_input$EN;

  // register stage2_rg_full
  reg stage2_rg_full;
  reg stage2_rg_full$D_IN;
  wire stage2_rg_full$EN;

  // register stage2_rg_resetting
  reg stage2_rg_resetting;
  wire stage2_rg_resetting$D_IN, stage2_rg_resetting$EN;

  // register stage2_rg_stage2
  reg [922 : 0] stage2_rg_stage2;
  wire [922 : 0] stage2_rg_stage2$D_IN;
  wire stage2_rg_stage2$EN;

  // register stage3_rg_full
  reg stage3_rg_full;
  reg stage3_rg_full$D_IN;
  wire stage3_rg_full$EN;

  // register stage3_rg_stage3
  reg [665 : 0] stage3_rg_stage3;
  wire [665 : 0] stage3_rg_stage3$D_IN;
  wire stage3_rg_stage3$EN;

  // register stageD_rg_data
  reg [233 : 0] stageD_rg_data;
  wire [233 : 0] stageD_rg_data$D_IN;
  wire stageD_rg_data$EN;

  // register stageD_rg_full
  reg stageD_rg_full;
  reg stageD_rg_full$D_IN;
  wire stageD_rg_full$EN;

  // register stageF_rg_epoch
  reg [1 : 0] stageF_rg_epoch;
  reg [1 : 0] stageF_rg_epoch$D_IN;
  wire stageF_rg_epoch$EN;

  // register stageF_rg_full
  reg stageF_rg_full;
  reg stageF_rg_full$D_IN;
  wire stageF_rg_full$EN;

  // register stageF_rg_priv
  reg [1 : 0] stageF_rg_priv;
  wire [1 : 0] stageF_rg_priv$D_IN;
  wire stageF_rg_priv$EN;

  // ports of submodule csr_regfile
  wire [193 : 0] csr_regfile$csr_trap_actions;
  wire [129 : 0] csr_regfile$csr_ret_actions;
  wire [128 : 0] csr_regfile$mav_csr_write;
  wire [64 : 0] csr_regfile$read_csr;
  wire [63 : 0] csr_regfile$csr_mip_read,
		csr_regfile$csr_trap_actions_pc,
		csr_regfile$csr_trap_actions_xtval,
		csr_regfile$ma_set_csr_time_t,
		csr_regfile$mav_csr_write_word,
		csr_regfile$mv_update_mstatus_fs,
		csr_regfile$read_csr_mcycle,
		csr_regfile$read_csr_minstret,
		csr_regfile$read_mstatus,
		csr_regfile$read_satp,
		csr_regfile$read_sstatus;
  wire [27 : 0] csr_regfile$read_misa;
  wire [11 : 0] csr_regfile$access_permitted_1_csr_addr,
		csr_regfile$access_permitted_2_csr_addr,
		csr_regfile$csr_counter_read_fault_csr_addr,
		csr_regfile$mav_csr_write_csr_addr,
		csr_regfile$mav_read_csr_csr_addr,
		csr_regfile$read_csr_csr_addr,
		csr_regfile$read_csr_port2_csr_addr;
  wire [4 : 0] csr_regfile$interrupt_pending,
	       csr_regfile$ma_update_fcsr_fflags_flags,
	       csr_regfile$mv_update_fcsr_fflags,
	       csr_regfile$mv_update_fcsr_fflags_flags,
	       csr_regfile$read_fflags;
  wire [3 : 0] csr_regfile$csr_trap_actions_exc_code;
  wire [2 : 0] csr_regfile$read_frm;
  wire [1 : 0] csr_regfile$access_permitted_1_priv,
	       csr_regfile$access_permitted_2_priv,
	       csr_regfile$csr_counter_read_fault_priv,
	       csr_regfile$csr_ret_actions_from_priv,
	       csr_regfile$csr_trap_actions_from_priv,
	       csr_regfile$interrupt_pending_cur_priv,
	       csr_regfile$ma_update_mstatus_fs_fs,
	       csr_regfile$mv_update_mstatus_fs_fs;
  wire csr_regfile$EN_csr_minstret_incr,
       csr_regfile$EN_csr_ret_actions,
       csr_regfile$EN_csr_trap_actions,
       csr_regfile$EN_debug,
       csr_regfile$EN_ma_update_fcsr_fflags,
       csr_regfile$EN_ma_update_mstatus_fs,
       csr_regfile$EN_mav_csr_write,
       csr_regfile$EN_mav_read_csr,
       csr_regfile$EN_server_reset_request_put,
       csr_regfile$EN_server_reset_response_get,
       csr_regfile$RDY_server_reset_request_put,
       csr_regfile$RDY_server_reset_response_get,
       csr_regfile$access_permitted_1,
       csr_regfile$access_permitted_1_read_not_write,
       csr_regfile$access_permitted_2,
       csr_regfile$access_permitted_2_read_not_write,
       csr_regfile$csr_trap_actions_interrupt,
       csr_regfile$csr_trap_actions_nmi,
       csr_regfile$m_external_interrupt_req_set_not_clear,
       csr_regfile$nmi_pending,
       csr_regfile$nmi_req_set_not_clear,
       csr_regfile$s_external_interrupt_req_set_not_clear,
       csr_regfile$software_interrupt_req_set_not_clear,
       csr_regfile$timer_interrupt_req_set_not_clear,
       csr_regfile$wfi_resume;

  // ports of submodule f_reset_reqs
  wire f_reset_reqs$CLR,
       f_reset_reqs$DEQ,
       f_reset_reqs$D_IN,
       f_reset_reqs$D_OUT,
       f_reset_reqs$EMPTY_N,
       f_reset_reqs$ENQ,
       f_reset_reqs$FULL_N;

  // ports of submodule f_reset_rsps
  wire f_reset_rsps$CLR,
       f_reset_rsps$DEQ,
       f_reset_rsps$D_IN,
       f_reset_rsps$D_OUT,
       f_reset_rsps$EMPTY_N,
       f_reset_rsps$ENQ,
       f_reset_rsps$FULL_N;

  // ports of submodule f_trace_data
  reg [426 : 0] f_trace_data$D_IN;
  wire [426 : 0] f_trace_data$D_OUT;
  wire f_trace_data$CLR,
       f_trace_data$DEQ,
       f_trace_data$EMPTY_N,
       f_trace_data$ENQ,
       f_trace_data$FULL_N;

  // ports of submodule fpr_regfile
  wire [63 : 0] fpr_regfile$read_rs1,
		fpr_regfile$read_rs2,
		fpr_regfile$read_rs3,
		fpr_regfile$write_rd_rd_val;
  wire [4 : 0] fpr_regfile$read_rs1_port2_rs1,
	       fpr_regfile$read_rs1_rs1,
	       fpr_regfile$read_rs2_rs2,
	       fpr_regfile$read_rs3_rs3,
	       fpr_regfile$write_rd_rd;
  wire fpr_regfile$EN_server_reset_request_put,
       fpr_regfile$EN_server_reset_response_get,
       fpr_regfile$EN_write_rd,
       fpr_regfile$RDY_server_reset_request_put,
       fpr_regfile$RDY_server_reset_response_get;

  // ports of submodule gpr_regfile
  wire [63 : 0] gpr_regfile$read_rs1,
		gpr_regfile$read_rs2,
		gpr_regfile$write_rd_rd_val;
  wire [4 : 0] gpr_regfile$read_rs1_port2_rs1,
	       gpr_regfile$read_rs1_rs1,
	       gpr_regfile$read_rs2_rs2,
	       gpr_regfile$write_rd_rd;
  wire gpr_regfile$EN_server_reset_request_put,
       gpr_regfile$EN_server_reset_response_get,
       gpr_regfile$EN_write_rd,
       gpr_regfile$RDY_server_reset_request_put,
       gpr_regfile$RDY_server_reset_response_get;

  // ports of submodule near_mem
  reg [63 : 0] near_mem$dmem_req_store_value, near_mem$imem_req_addr;
  wire [511 : 0] near_mem$dma_server_rdata, near_mem$dma_server_wdata;
  wire [63 : 0] near_mem$dma_server_araddr,
		near_mem$dma_server_awaddr,
		near_mem$dma_server_wstrb,
		near_mem$dmem_req_addr,
		near_mem$dmem_req_satp,
		near_mem$dmem_word64,
		near_mem$imem_master_araddr,
		near_mem$imem_master_awaddr,
		near_mem$imem_master_rdata,
		near_mem$imem_master_wdata,
		near_mem$imem_pc,
		near_mem$imem_req_satp,
		near_mem$mem_master_araddr,
		near_mem$mem_master_awaddr,
		near_mem$mem_master_rdata,
		near_mem$mem_master_wdata,
		near_mem$mv_tohost_value,
		near_mem$set_watch_tohost_tohost_addr;
  wire [31 : 0] near_mem$imem_instr;
  wire [15 : 0] near_mem$dma_server_arid,
		near_mem$dma_server_awid,
		near_mem$dma_server_bid,
		near_mem$dma_server_rid;
  wire [7 : 0] near_mem$dma_server_arlen,
	       near_mem$dma_server_awlen,
	       near_mem$imem_master_arlen,
	       near_mem$imem_master_awlen,
	       near_mem$imem_master_wstrb,
	       near_mem$mem_master_arlen,
	       near_mem$mem_master_awlen,
	       near_mem$mem_master_wstrb,
	       near_mem$mv_status,
	       near_mem$server_fence_request_put;
  wire [6 : 0] near_mem$dmem_req_amo_funct7;
  wire [3 : 0] near_mem$dma_server_arcache,
	       near_mem$dma_server_arqos,
	       near_mem$dma_server_arregion,
	       near_mem$dma_server_awcache,
	       near_mem$dma_server_awqos,
	       near_mem$dma_server_awregion,
	       near_mem$dmem_exc_code,
	       near_mem$imem_exc_code,
	       near_mem$imem_master_arcache,
	       near_mem$imem_master_arid,
	       near_mem$imem_master_arqos,
	       near_mem$imem_master_arregion,
	       near_mem$imem_master_awcache,
	       near_mem$imem_master_awid,
	       near_mem$imem_master_awqos,
	       near_mem$imem_master_awregion,
	       near_mem$imem_master_bid,
	       near_mem$imem_master_rid,
	       near_mem$mem_master_arcache,
	       near_mem$mem_master_arid,
	       near_mem$mem_master_arqos,
	       near_mem$mem_master_arregion,
	       near_mem$mem_master_awcache,
	       near_mem$mem_master_awid,
	       near_mem$mem_master_awqos,
	       near_mem$mem_master_awregion,
	       near_mem$mem_master_bid,
	       near_mem$mem_master_rid;
  wire [2 : 0] near_mem$dma_server_arprot,
	       near_mem$dma_server_arsize,
	       near_mem$dma_server_awprot,
	       near_mem$dma_server_awsize,
	       near_mem$dmem_req_f3,
	       near_mem$imem_master_arprot,
	       near_mem$imem_master_arsize,
	       near_mem$imem_master_awprot,
	       near_mem$imem_master_awsize,
	       near_mem$imem_req_f3,
	       near_mem$mem_master_arprot,
	       near_mem$mem_master_arsize,
	       near_mem$mem_master_awprot,
	       near_mem$mem_master_awsize;
  wire [1 : 0] near_mem$dma_server_arburst,
	       near_mem$dma_server_awburst,
	       near_mem$dma_server_bresp,
	       near_mem$dma_server_rresp,
	       near_mem$dmem_req_op,
	       near_mem$dmem_req_priv,
	       near_mem$imem_master_arburst,
	       near_mem$imem_master_awburst,
	       near_mem$imem_master_bresp,
	       near_mem$imem_master_rresp,
	       near_mem$imem_req_priv,
	       near_mem$mem_master_arburst,
	       near_mem$mem_master_awburst,
	       near_mem$mem_master_bresp,
	       near_mem$mem_master_rresp;
  wire near_mem$EN_dmem_req,
       near_mem$EN_imem_req,
       near_mem$EN_ma_ddr4_ready,
       near_mem$EN_server_fence_i_request_put,
       near_mem$EN_server_fence_i_response_get,
       near_mem$EN_server_fence_request_put,
       near_mem$EN_server_fence_response_get,
       near_mem$EN_server_reset_request_put,
       near_mem$EN_server_reset_response_get,
       near_mem$EN_set_watch_tohost,
       near_mem$EN_sfence_vma_server_request_put,
       near_mem$EN_sfence_vma_server_response_get,
       near_mem$RDY_server_fence_i_request_put,
       near_mem$RDY_server_fence_i_response_get,
       near_mem$RDY_server_fence_request_put,
       near_mem$RDY_server_fence_response_get,
       near_mem$RDY_server_reset_request_put,
       near_mem$RDY_server_reset_response_get,
       near_mem$RDY_sfence_vma_server_request_put,
       near_mem$RDY_sfence_vma_server_response_get,
       near_mem$dma_server_arlock,
       near_mem$dma_server_arready,
       near_mem$dma_server_arvalid,
       near_mem$dma_server_awlock,
       near_mem$dma_server_awready,
       near_mem$dma_server_awvalid,
       near_mem$dma_server_bready,
       near_mem$dma_server_bvalid,
       near_mem$dma_server_rlast,
       near_mem$dma_server_rready,
       near_mem$dma_server_rvalid,
       near_mem$dma_server_wlast,
       near_mem$dma_server_wready,
       near_mem$dma_server_wvalid,
       near_mem$dmem_exc,
       near_mem$dmem_req_mstatus_MXR,
       near_mem$dmem_req_sstatus_SUM,
       near_mem$dmem_valid,
       near_mem$imem_exc,
       near_mem$imem_is_i32_not_i16,
       near_mem$imem_master_arlock,
       near_mem$imem_master_arready,
       near_mem$imem_master_arvalid,
       near_mem$imem_master_awlock,
       near_mem$imem_master_awready,
       near_mem$imem_master_awvalid,
       near_mem$imem_master_bready,
       near_mem$imem_master_bvalid,
       near_mem$imem_master_rlast,
       near_mem$imem_master_rready,
       near_mem$imem_master_rvalid,
       near_mem$imem_master_wlast,
       near_mem$imem_master_wready,
       near_mem$imem_master_wvalid,
       near_mem$imem_req_mstatus_MXR,
       near_mem$imem_req_sstatus_SUM,
       near_mem$imem_valid,
       near_mem$mem_master_arlock,
       near_mem$mem_master_arready,
       near_mem$mem_master_arvalid,
       near_mem$mem_master_awlock,
       near_mem$mem_master_awready,
       near_mem$mem_master_awvalid,
       near_mem$mem_master_bready,
       near_mem$mem_master_bvalid,
       near_mem$mem_master_rlast,
       near_mem$mem_master_rready,
       near_mem$mem_master_rvalid,
       near_mem$mem_master_wlast,
       near_mem$mem_master_wready,
       near_mem$mem_master_wvalid,
       near_mem$set_watch_tohost_watch_tohost;

  // ports of submodule stage1_f_reset_reqs
  wire stage1_f_reset_reqs$CLR,
       stage1_f_reset_reqs$DEQ,
       stage1_f_reset_reqs$EMPTY_N,
       stage1_f_reset_reqs$ENQ,
       stage1_f_reset_reqs$FULL_N;

  // ports of submodule stage1_f_reset_rsps
  wire stage1_f_reset_rsps$CLR,
       stage1_f_reset_rsps$DEQ,
       stage1_f_reset_rsps$EMPTY_N,
       stage1_f_reset_rsps$ENQ,
       stage1_f_reset_rsps$FULL_N;

  // ports of submodule stage2_f_reset_reqs
  wire stage2_f_reset_reqs$CLR,
       stage2_f_reset_reqs$DEQ,
       stage2_f_reset_reqs$EMPTY_N,
       stage2_f_reset_reqs$ENQ,
       stage2_f_reset_reqs$FULL_N;

  // ports of submodule stage2_f_reset_rsps
  wire stage2_f_reset_rsps$CLR,
       stage2_f_reset_rsps$DEQ,
       stage2_f_reset_rsps$EMPTY_N,
       stage2_f_reset_rsps$ENQ,
       stage2_f_reset_rsps$FULL_N;

  // ports of submodule stage2_fbox
  wire [63 : 0] stage2_fbox$req_v1,
		stage2_fbox$req_v2,
		stage2_fbox$req_v3,
		stage2_fbox$word_fst;
  wire [6 : 0] stage2_fbox$req_f7, stage2_fbox$req_opcode;
  wire [4 : 0] stage2_fbox$req_rs2, stage2_fbox$word_snd;
  wire [2 : 0] stage2_fbox$req_rm;
  wire stage2_fbox$EN_req,
       stage2_fbox$EN_server_reset_request_put,
       stage2_fbox$EN_server_reset_response_get,
       stage2_fbox$RDY_server_reset_request_put,
       stage2_fbox$RDY_server_reset_response_get,
       stage2_fbox$valid;

  // ports of submodule stage2_mbox
  wire [63 : 0] stage2_mbox$req_v1, stage2_mbox$req_v2, stage2_mbox$word;
  wire [3 : 0] stage2_mbox$set_verbosity_verbosity;
  wire [2 : 0] stage2_mbox$req_f3;
  wire stage2_mbox$EN_req,
       stage2_mbox$EN_req_reset,
       stage2_mbox$EN_rsp_reset,
       stage2_mbox$EN_set_verbosity,
       stage2_mbox$req_is_OP_not_OP_32,
       stage2_mbox$valid;

  // ports of submodule stage3_f_reset_reqs
  wire stage3_f_reset_reqs$CLR,
       stage3_f_reset_reqs$DEQ,
       stage3_f_reset_reqs$EMPTY_N,
       stage3_f_reset_reqs$ENQ,
       stage3_f_reset_reqs$FULL_N;

  // ports of submodule stage3_f_reset_rsps
  wire stage3_f_reset_rsps$CLR,
       stage3_f_reset_rsps$DEQ,
       stage3_f_reset_rsps$EMPTY_N,
       stage3_f_reset_rsps$ENQ,
       stage3_f_reset_rsps$FULL_N;

  // ports of submodule stageD_f_reset_reqs
  wire stageD_f_reset_reqs$CLR,
       stageD_f_reset_reqs$DEQ,
       stageD_f_reset_reqs$EMPTY_N,
       stageD_f_reset_reqs$ENQ,
       stageD_f_reset_reqs$FULL_N;

  // ports of submodule stageD_f_reset_rsps
  wire stageD_f_reset_rsps$CLR,
       stageD_f_reset_rsps$DEQ,
       stageD_f_reset_rsps$EMPTY_N,
       stageD_f_reset_rsps$ENQ,
       stageD_f_reset_rsps$FULL_N;

  // ports of submodule stageF_branch_predictor
  reg [63 : 0] stageF_branch_predictor$predict_req_pc;
  wire [194 : 0] stageF_branch_predictor$bp_train_cf_info;
  wire [63 : 0] stageF_branch_predictor$bp_train_pc,
		stageF_branch_predictor$predict_rsp;
  wire [31 : 0] stageF_branch_predictor$bp_train_instr,
		stageF_branch_predictor$predict_rsp_instr;
  wire stageF_branch_predictor$EN_bp_train,
       stageF_branch_predictor$EN_predict_req,
       stageF_branch_predictor$EN_reset,
       stageF_branch_predictor$RDY_predict_req,
       stageF_branch_predictor$bp_train_is_i32_not_i16,
       stageF_branch_predictor$predict_rsp_is_i32_not_i16;

  // ports of submodule stageF_f_reset_reqs
  wire stageF_f_reset_reqs$CLR,
       stageF_f_reset_reqs$DEQ,
       stageF_f_reset_reqs$EMPTY_N,
       stageF_f_reset_reqs$ENQ,
       stageF_f_reset_reqs$FULL_N;

  // ports of submodule stageF_f_reset_rsps
  wire stageF_f_reset_rsps$CLR,
       stageF_f_reset_rsps$DEQ,
       stageF_f_reset_rsps$EMPTY_N,
       stageF_f_reset_rsps$ENQ,
       stageF_f_reset_rsps$FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_imem_rl_assert_fail,
       CAN_FIRE_RL_imem_rl_fetch_next_32b,
       CAN_FIRE_RL_rl_WFI_count,
       CAN_FIRE_RL_rl_WFI_resume,
       CAN_FIRE_RL_rl_finish_FENCE,
       CAN_FIRE_RL_rl_finish_FENCE_I,
       CAN_FIRE_RL_rl_finish_SFENCE_VMA,
       CAN_FIRE_RL_rl_pipe,
       CAN_FIRE_RL_rl_reset_complete,
       CAN_FIRE_RL_rl_reset_from_WFI,
       CAN_FIRE_RL_rl_reset_start,
       CAN_FIRE_RL_rl_show_pipe,
       CAN_FIRE_RL_rl_stage1_CSRR_S_or_C,
       CAN_FIRE_RL_rl_stage1_CSRR_S_or_C_2,
       CAN_FIRE_RL_rl_stage1_CSRR_W,
       CAN_FIRE_RL_rl_stage1_CSRR_W_2,
       CAN_FIRE_RL_rl_stage1_FENCE,
       CAN_FIRE_RL_rl_stage1_FENCE_I,
       CAN_FIRE_RL_rl_stage1_SFENCE_VMA,
       CAN_FIRE_RL_rl_stage1_WFI,
       CAN_FIRE_RL_rl_stage1_interrupt,
       CAN_FIRE_RL_rl_stage1_mip_cmd,
       CAN_FIRE_RL_rl_stage1_restart_after_csrrx,
       CAN_FIRE_RL_rl_stage1_trap,
       CAN_FIRE_RL_rl_stage1_xRET,
       CAN_FIRE_RL_rl_stage2_nonpipe,
       CAN_FIRE_RL_rl_trap,
       CAN_FIRE_RL_rl_trap_fetch,
       CAN_FIRE_RL_stage1_rl_reset,
       CAN_FIRE_RL_stage2_rl_reset_begin,
       CAN_FIRE_RL_stage2_rl_reset_end,
       CAN_FIRE_RL_stage3_rl_reset,
       CAN_FIRE_RL_stageD_rl_reset,
       CAN_FIRE_RL_stageF_rl_reset,
       CAN_FIRE_dma_server_m_arvalid,
       CAN_FIRE_dma_server_m_awvalid,
       CAN_FIRE_dma_server_m_bready,
       CAN_FIRE_dma_server_m_rready,
       CAN_FIRE_dma_server_m_wvalid,
       CAN_FIRE_hart0_server_reset_request_put,
       CAN_FIRE_hart0_server_reset_response_get,
       CAN_FIRE_imem_master_m_arready,
       CAN_FIRE_imem_master_m_awready,
       CAN_FIRE_imem_master_m_bvalid,
       CAN_FIRE_imem_master_m_rvalid,
       CAN_FIRE_imem_master_m_wready,
       CAN_FIRE_m_external_interrupt_req,
       CAN_FIRE_ma_ddr4_ready,
       CAN_FIRE_ma_set_csr_time,
       CAN_FIRE_mem_master_m_arready,
       CAN_FIRE_mem_master_m_awready,
       CAN_FIRE_mem_master_m_bvalid,
       CAN_FIRE_mem_master_m_rvalid,
       CAN_FIRE_mem_master_m_wready,
       CAN_FIRE_nmi_req,
       CAN_FIRE_s_external_interrupt_req,
       CAN_FIRE_set_verbosity,
       CAN_FIRE_set_watch_tohost,
       CAN_FIRE_software_interrupt_req,
       CAN_FIRE_timer_interrupt_req,
       CAN_FIRE_trace_data_out_get,
       WILL_FIRE_RL_imem_rl_assert_fail,
       WILL_FIRE_RL_imem_rl_fetch_next_32b,
       WILL_FIRE_RL_rl_WFI_count,
       WILL_FIRE_RL_rl_WFI_resume,
       WILL_FIRE_RL_rl_finish_FENCE,
       WILL_FIRE_RL_rl_finish_FENCE_I,
       WILL_FIRE_RL_rl_finish_SFENCE_VMA,
       WILL_FIRE_RL_rl_pipe,
       WILL_FIRE_RL_rl_reset_complete,
       WILL_FIRE_RL_rl_reset_from_WFI,
       WILL_FIRE_RL_rl_reset_start,
       WILL_FIRE_RL_rl_show_pipe,
       WILL_FIRE_RL_rl_stage1_CSRR_S_or_C,
       WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2,
       WILL_FIRE_RL_rl_stage1_CSRR_W,
       WILL_FIRE_RL_rl_stage1_CSRR_W_2,
       WILL_FIRE_RL_rl_stage1_FENCE,
       WILL_FIRE_RL_rl_stage1_FENCE_I,
       WILL_FIRE_RL_rl_stage1_SFENCE_VMA,
       WILL_FIRE_RL_rl_stage1_WFI,
       WILL_FIRE_RL_rl_stage1_interrupt,
       WILL_FIRE_RL_rl_stage1_mip_cmd,
       WILL_FIRE_RL_rl_stage1_restart_after_csrrx,
       WILL_FIRE_RL_rl_stage1_trap,
       WILL_FIRE_RL_rl_stage1_xRET,
       WILL_FIRE_RL_rl_stage2_nonpipe,
       WILL_FIRE_RL_rl_trap,
       WILL_FIRE_RL_rl_trap_fetch,
       WILL_FIRE_RL_stage1_rl_reset,
       WILL_FIRE_RL_stage2_rl_reset_begin,
       WILL_FIRE_RL_stage2_rl_reset_end,
       WILL_FIRE_RL_stage3_rl_reset,
       WILL_FIRE_RL_stageD_rl_reset,
       WILL_FIRE_RL_stageF_rl_reset,
       WILL_FIRE_dma_server_m_arvalid,
       WILL_FIRE_dma_server_m_awvalid,
       WILL_FIRE_dma_server_m_bready,
       WILL_FIRE_dma_server_m_rready,
       WILL_FIRE_dma_server_m_wvalid,
       WILL_FIRE_hart0_server_reset_request_put,
       WILL_FIRE_hart0_server_reset_response_get,
       WILL_FIRE_imem_master_m_arready,
       WILL_FIRE_imem_master_m_awready,
       WILL_FIRE_imem_master_m_bvalid,
       WILL_FIRE_imem_master_m_rvalid,
       WILL_FIRE_imem_master_m_wready,
       WILL_FIRE_m_external_interrupt_req,
       WILL_FIRE_ma_ddr4_ready,
       WILL_FIRE_ma_set_csr_time,
       WILL_FIRE_mem_master_m_arready,
       WILL_FIRE_mem_master_m_awready,
       WILL_FIRE_mem_master_m_bvalid,
       WILL_FIRE_mem_master_m_rvalid,
       WILL_FIRE_mem_master_m_wready,
       WILL_FIRE_nmi_req,
       WILL_FIRE_s_external_interrupt_req,
       WILL_FIRE_set_verbosity,
       WILL_FIRE_set_watch_tohost,
       WILL_FIRE_software_interrupt_req,
       WILL_FIRE_timer_interrupt_req,
       WILL_FIRE_trace_data_out_get;

  // inputs to muxes for submodule ports
  reg [63 : 0] MUX_csr_regfile$mav_csr_write_2__VAL_2;
  wire [426 : 0] MUX_f_trace_data$enq_1__VAL_1,
		 MUX_f_trace_data$enq_1__VAL_2,
		 MUX_f_trace_data$enq_1__VAL_3,
		 MUX_f_trace_data$enq_1__VAL_4,
		 MUX_f_trace_data$enq_1__VAL_6,
		 MUX_f_trace_data$enq_1__VAL_7,
		 MUX_f_trace_data$enq_1__VAL_8,
		 MUX_rg_trap_trace_data$write_1__VAL_2;
  wire [131 : 0] MUX_rg_trap_info$write_1__VAL_1,
		 MUX_rg_trap_info$write_1__VAL_2,
		 MUX_rg_trap_info$write_1__VAL_3,
		 MUX_rg_trap_info$write_1__VAL_4;
  wire [63 : 0] MUX_imem_rg_cache_addr$write_1__VAL_1,
		MUX_imem_rg_cache_addr$write_1__VAL_2,
		MUX_imem_rg_tval$write_1__VAL_2,
		MUX_imem_rg_tval$write_1__VAL_3,
		MUX_imem_rg_tval$write_1__VAL_4,
		MUX_near_mem$imem_req_2__VAL_2,
		MUX_near_mem$imem_req_2__VAL_4;
  wire [31 : 0] MUX_rg_trap_instr$write_1__VAL_1,
		MUX_rg_wfi_counter$write_1__VAL_1;
  wire [3 : 0] MUX_rg_state$write_1__VAL_2,
	       MUX_rg_state$write_1__VAL_3,
	       MUX_rg_state$write_1__VAL_4;
  wire MUX_csr_regfile$mav_csr_write_1__SEL_1,
       MUX_f_trace_data$enq_1__SEL_1,
       MUX_f_trace_data$enq_1__SEL_3,
       MUX_f_trace_data$enq_1__SEL_4,
       MUX_imem_rg_cache_addr$write_1__SEL_1,
       MUX_imem_rg_cache_addr$write_1__SEL_2,
       MUX_rg_instret_reported$write_1__SEL_1,
       MUX_rg_next_pc$write_1__SEL_1,
       MUX_rg_next_pc$write_1__SEL_4,
       MUX_rg_pc_reported$write_1__SEL_4,
       MUX_rg_state$write_1__SEL_1,
       MUX_rg_state$write_1__SEL_10,
       MUX_rg_state$write_1__SEL_11,
       MUX_rg_state$write_1__SEL_12,
       MUX_rg_state$write_1__SEL_13,
       MUX_rg_state$write_1__SEL_14,
       MUX_rg_state$write_1__SEL_15,
       MUX_rg_state$write_1__SEL_2,
       MUX_rg_state$write_1__SEL_3,
       MUX_rg_state$write_1__SEL_4,
       MUX_rg_state$write_1__SEL_5,
       MUX_rg_state$write_1__SEL_7,
       MUX_rg_state$write_1__SEL_8,
       MUX_rg_state$write_1__SEL_9,
       MUX_rg_trap_info$write_1__SEL_1,
       MUX_rg_trap_instr$write_1__SEL_1,
       MUX_rg_trap_interrupt$write_1__SEL_1,
       MUX_rg_trap_trace_data$write_1__SEL_1,
       MUX_stage1_rg_full$write_1__VAL_2,
       MUX_stage2_rg_full$write_1__VAL_2,
       MUX_stage3_rg_full$write_1__VAL_2,
       MUX_stageD_rg_full$write_1__VAL_2,
       MUX_stageF_rg_full$write_1__VAL_2;

  // declarations used by system tasks
  // synopsys translate_off
  reg [31 : 0] v__h2443;
  reg [31 : 0] v__h2437;
  // synopsys translate_on

  // remaining internal signals
  reg [127 : 0] CASE_stage2_rg_stage2_BITS_824_TO_822_0_stage2_ETC__q31,
		CASE_stage2_rg_stage2_BITS_824_TO_822_1_IF_sta_ETC__q35;
  reg [63 : 0] CASE_stage1_rg_stage_input_BITS_187_TO_181_0b1_ETC__q23,
	       CASE_stage1_rg_stage_input_BITS_187_TO_181_0b1_ETC__q24,
	       CASE_stage1_rg_stage_input_BITS_187_TO_181_0b1_ETC__q27,
	       CASE_stage1_rg_stage_input_BITS_187_TO_181_0b1_ETC__q30,
	       CASE_stage2_rg_stage2_BITS_824_TO_822_1_output_ETC__q34,
	       CASE_stage2_rg_stage2_BITS_824_TO_822_2_stage2_ETC__q29,
	       IF_IF_stage1_rg_stage_input_46_BITS_35_TO_34_7_ETC___d1544,
	       IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d1601,
	       IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d2721,
	       IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_0_ETC___d2500,
	       alu_outputs_trace_data_pc__h33260,
	       alu_outputs_trace_data_word1__h33264,
	       alu_outputs_trace_data_word2__h33265,
	       alu_outputs_trace_data_word3__h33266,
	       rd_val__h11760,
	       rs1_val__h45825,
	       value__h8810,
	       value__h9024,
	       x_out_bypass_rd_val__h9423,
	       x_out_cf_info_taken_PC__h17800,
	       x_out_data_to_stage2_addr__h10353,
	       x_out_data_to_stage2_val1__h10354,
	       x_out_data_to_stage3_frd_val__h8416,
	       x_out_data_to_stage3_rd_val__h8412,
	       x_out_fbypass_rd_val__h9617;
  reg [31 : 0] CASE_stage1_rg_stage_input_BITS_187_TO_181_0b1_ETC__q21;
  reg [4 : 0] CASE_stage1_rg_stage_input_BITS_187_TO_181_0b1_ETC__q22,
	      CASE_stage1_rg_stage_input_BITS_187_TO_181_0b1_ETC__q25,
	      IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d2706,
	      x_out_bypass_rd__h9422,
	      x_out_data_to_stage3_fpr_flags__h8415,
	      x_out_data_to_stage3_rd__h8411,
	      x_out_fbypass_rd__h9616;
  reg [3 : 0] CASE_rg_cur_priv_0b0_8_0b1_9_11__q15,
	      CASE_stage1_rg_stage_input_BITS_123_TO_112_0b0_ETC__q16,
	      CASE_stage1_rg_stage_input_BITS_187_TO_181_0b1_ETC__q20,
	      alu_outputs_exc_code__h13083,
	      x_out_trap_info_exc_code__h8920;
  reg [2 : 0] CASE_stage1_rg_stage_input_BITS_187_TO_181_0b1_ETC__q32,
	      CASE_stage1_rg_stage_input_BITS_187_TO_181_0b1_ETC__q33;
  reg [1 : 0] CASE_stage1_rg_stage_input_BITS_187_TO_181_0b1_ETC__q36,
	      IF_IF_stageD_rg_data_754_BIT_165_757_THEN_stag_ETC___d2942;
  reg CASE_stage1_rg_stage_input_BITS_187_TO_181_0b1_ETC__q13,
      CASE_stage1_rg_stage_input_BITS_187_TO_181_0b1_ETC__q14,
      CASE_stage1_rg_stage_input_BITS_187_TO_181_0b1_ETC__q19,
      CASE_stage1_rg_stage_input_BITS_187_TO_181_0b1_ETC__q28,
      CASE_stage2_rg_stage2_BITS_824_TO_822_1_NOT_ne_ETC__q5,
      CASE_stage2_rg_stage2_BITS_824_TO_822_1_NOT_st_ETC__q7,
      CASE_stage2_rg_stage2_BITS_824_TO_822_1_stage2_ETC__q6,
      IF_stage1_rg_stage_input_46_BITS_148_TO_146_94_ETC___d447,
      IF_stage1_rg_stage_input_46_BITS_148_TO_146_94_ETC___d815,
      IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d1004,
      IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d1012,
      IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d1358,
      IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d3047,
      IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d3051,
      IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d796,
      IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d804,
      IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d152,
      IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d1637,
      IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d175,
      IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d184,
      IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d2404,
      IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d271,
      IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d277,
      IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d290,
      IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d2961,
      IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d299,
      IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d313,
      IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d318,
      IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d329,
      IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d336,
      IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d418;
  wire [856 : 0] IF_stage1_rg_stage_input_46_BITS_371_TO_370_47_ETC___d2769;
  wire [357 : 0] IF_stage1_rg_stage_input_46_BITS_371_TO_370_47_ETC___d2761;
  wire [324 : 0] IF_stage1_rg_stage_input_46_BITS_371_TO_370_47_ETC___d2760;
  wire [319 : 0] IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_0_ETC___d2513,
		 csr_regfile_csr_trap_actions_075_BITS_129_TO_2_ETC___d3087;
  wire [255 : 0] IF_stage1_rg_stage_input_46_BITS_371_TO_370_47_ETC___d2759;
  wire [127 : 0] IF_stage2_rg_stage2_15_BIT_432_07_THEN_csr_reg_ETC___d2504,
		 csr_regfile_read_csr_mcycle__7_MINUS_rg_start__ETC___d3094,
		 stage2_rg_stage2_15_BITS_127_TO_64_505_CONCAT__ETC___d2510;
  wire [63 : 0] IF_csr_regfile_read_csr_rg_trap_instr_091_BITS_ETC___d3178,
		IF_csr_regfilemav_csr_write_BIT_64_THEN_2_ELSE_0__q1,
		IF_stage1_rg_stage_input_46_BITS_175_TO_171_50_ETC___d1312,
		IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d1602,
		IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d1603,
		IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d1613,
		IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d2679,
		IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d2722,
		_theResult_____2_snd__h18586,
		_theResult____h10734,
		_theResult____h43704,
		_theResult___fst__h14034,
		_theResult___fst__h14041,
		_theResult___fst__h14140,
		_theResult___fst_rd_val__h9388,
		_theResult___fst_rd_val__h9391,
		_theResult___fst_rd_val__h9402,
		_theResult___snd_rd_val__h9589,
		_theResult___snd_rd_val__h9592,
		_theResult___snd_rd_val__h9598,
		addr_of_b32___1__h41727,
		addr_of_b32___1__h56231,
		addr_of_b32__h41599,
		addr_of_b32__h56103,
		alu_outputs___1_addr__h10560,
		alu_outputs___1_addr__h11902,
		alu_outputs___1_fval1__h13053,
		alu_outputs___1_fval2__h11906,
		alu_outputs___1_fval3__h13055,
		alu_outputs___1_trace_data_pc__h32891,
		alu_outputs___1_trace_data_pc__h33214,
		alu_outputs___1_trace_data_word1__h33042,
		alu_outputs___1_trace_data_word2__h33043,
		alu_outputs___1_trace_data_word2__h33219,
		alu_outputs___1_trace_data_word5__h33046,
		alu_outputs___1_val1__h11707,
		alu_outputs___1_val1__h12192,
		alu_outputs___1_val1__h12222,
		alu_outputs_cf_info_taken_PC__h17792,
		branch_target__h10537,
		cpi__h43706,
		cpifrac__h43707,
		data_to_stage2_addr__h10335,
		data_to_stage2_val2__h10337,
		delta_CPI_cycles__h43702,
		delta_CPI_instrs___1__h43748,
		delta_CPI_instrs__h43703,
		fall_through_pc__h10024,
		next_pc___1__h15461,
		next_pc__h10025,
		next_pc__h10575,
		next_pc__h10613,
		next_pc__h15457,
		output_stage2___1_data_to_stage3_frd_val__h8330,
		output_stage2___1_data_to_stage3_trace_data_word1__h31396,
		output_stage2___1_data_to_stage3_trace_data_word1__h31417,
		output_stage2___1_data_to_stage3_trace_data_word5__h31421,
		rd_val___1__h18575,
		rd_val___1__h18705,
		rd_val___1__h18708,
		rd_val___1__h18714,
		rd_val___1__h18720,
		rd_val___1__h18723,
		rd_val___1__h18726,
		rd_val___1__h18742,
		rd_val___1__h18773,
		rd_val___1__h18805,
		rd_val___1__h18834,
		rd_val___1__h18886,
		rd_val___1__h18934,
		rd_val___1__h18940,
		rd_val___1__h18985,
		rd_val__h11729,
		rd_val__h11785,
		rd_val__h11809,
		rd_val__h18428,
		rd_val__h18479,
		rd_val__h18501,
		rd_val__h9862,
		rd_val__h9895,
		rd_val__h9928,
		rd_val__h9959,
		rd_val__h9993,
		rs1_val__h44544,
		rs1_val_bypassed__h5399,
		rs2_val__h10533,
		rs2_val_local___1__h18588,
		td_word1__h33973,
		trace_data___1_word2__h31109,
		trap_info_tval__h16637,
		val__h9864,
		val__h9897,
		value__h16712,
		x__h31169,
		x__h31183,
		x__h43705,
		x__h44985,
		x__h46308,
		x__h46372,
		x_out_cf_info_fallthru_PC__h17799,
		x_out_data_to_stage2_fval1__h10356,
		x_out_data_to_stage2_fval3__h10358,
		x_out_data_to_stage2_val2__h10355,
		x_out_next_pc__h10042,
		y__h46103;
  wire [31 : 0] IF_NOT_imem_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem__ETC___d2176,
		IF_csr_regfile_read_misa__6_BIT_2_759_AND_stag_ETC___d2017,
		IF_csr_regfile_read_misa__6_BIT_2_759_AND_stag_ETC___d2018,
		IF_csr_regfile_read_misa__6_BIT_2_759_AND_stag_ETC___d2019,
		IF_csr_regfile_read_misa__6_BIT_2_759_AND_stag_ETC___d2020,
		IF_csr_regfile_read_misa__6_BIT_2_759_AND_stag_ETC___d2021,
		IF_csr_regfile_read_misa__6_BIT_2_759_AND_stag_ETC___d2022,
		IF_csr_regfile_read_misa__6_BIT_2_759_AND_stag_ETC___d2023,
		IF_csr_regfile_read_misa__6_BIT_2_759_AND_stag_ETC___d2025,
		IF_csr_regfile_read_misa__6_BIT_2_759_AND_stag_ETC___d2027,
		IF_csr_regfile_read_misa__6_BIT_2_759_AND_stag_ETC___d2029,
		IF_csr_regfile_read_misa__6_BIT_2_759_AND_stag_ETC___d2031,
		IF_csr_regfile_read_misa__6_BIT_2_759_AND_stag_ETC___d2032,
		IF_csr_regfile_read_misa__6_BIT_2_759_AND_stag_ETC___d2033,
		IF_csr_regfile_read_misa__6_BIT_2_759_AND_stag_ETC___d2035,
		IF_csr_regfile_read_misa__6_BIT_2_759_AND_stag_ETC___d2036,
		IF_csr_regfile_read_misa__6_BIT_2_759_AND_stag_ETC___d2037,
		IF_csr_regfile_read_misa__6_BIT_2_759_AND_stag_ETC___d2039,
		IF_csr_regfile_read_misa__6_BIT_2_759_AND_stag_ETC___d2041,
		IF_csr_regfile_read_misa__6_BIT_2_759_AND_stag_ETC___d2042,
		IF_csr_regfile_read_misa__6_BIT_2_759_AND_stag_ETC___d2044,
		IF_csr_regfile_read_misa__6_BIT_2_759_AND_stag_ETC___d2045,
		IF_csr_regfile_read_misa__6_BIT_2_759_AND_stag_ETC___d2046,
		IF_csr_regfile_read_misa__6_BIT_2_759_AND_stag_ETC___d2047,
		IF_csr_regfile_read_misa__6_BIT_2_759_AND_stag_ETC___d2048,
		IF_csr_regfile_read_misa__6_BIT_2_759_AND_stag_ETC___d2049,
		IF_csr_regfile_read_misa__6_BIT_2_759_AND_stag_ETC___d2050,
		IF_csr_regfile_read_misa__6_BIT_2_759_AND_stag_ETC___d2051,
		IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_rg_p_ETC___d2177,
		IF_stage1_rg_stage_input_46_BITS_175_TO_171_50_ETC__q18,
		_theResult____h5683,
		alu_outputs___1_trace_data_instr__h32893,
		alu_outputs___1_trace_data_instr__h33216,
		alu_outputs_trace_data_instr__h33262,
		d_instr__h27420,
		instr___1__h19800,
		instr__h19977,
		instr__h20122,
		instr__h20314,
		instr__h20509,
		instr__h20738,
		instr__h21191,
		instr__h21307,
		instr__h21372,
		instr__h21689,
		instr__h22027,
		instr__h22211,
		instr__h22340,
		instr__h22567,
		instr__h22822,
		instr__h22994,
		instr__h23163,
		instr__h23352,
		instr__h23541,
		instr__h23658,
		instr__h23836,
		instr__h23954,
		instr__h24048,
		instr__h24182,
		instr__h24316,
		instr__h24450,
		instr__h24586,
		instr__h24722,
		instr__h24878,
		instr__h24973,
		instr__h25126,
		instr__h25325,
		instr__h25476,
		instr__h25681,
		instr__h26481,
		instr__h26646,
		instr__h26845,
		instr__h26996,
		instr_out___1__h27422,
		instr_out___1__h27444,
		result___1__h34904,
		rs1_val_bypassed399_BITS_31_TO_0_MINUS_rs2_val_ETC__q12,
		rs1_val_bypassed399_BITS_31_TO_0_PLUS_rs2_val0_ETC__q11,
		rs1_val_bypassed399_BITS_31_TO_0_SRL_rs2_val05_ETC__q10,
		rs1_val_bypassed399_BITS_31_TO_0__q9,
		stage1_rg_stage_input_BITS_31_TO_0__q26,
		tmp__h18833,
		v32__h11783,
		x__h18776,
		x__h18808,
		x__h18943,
		x__h18988,
		x_out_data_to_stage1_instr__h19725;
  wire [20 : 0] SEXT_stageD_rg_data_754_BIT_76_771_CONCAT_stag_ETC___d1824,
		decoded_instr_imm13_J__h39636,
		stage1_rg_stage_input_BITS_66_TO_46__q3;
  wire [19 : 0] imm20__h22079;
  wire [12 : 0] SEXT_stageD_rg_data_754_BIT_76_771_CONCAT_stag_ETC___d1849,
		decoded_instr_imm13_B__h39634,
		stage1_rg_stage_input_BITS_99_TO_87__q2;
  wire [11 : 0] decoded_instr_imm12_S__h39633,
		imm12__h19978,
		imm12__h20315,
		imm12__h21951,
		imm12__h22620,
		imm12__h22835,
		imm12__h23031,
		imm12__h23368,
		imm12__h24974,
		imm12__h25326,
		offset__h20685,
		stage1_rg_stage_input_BITS_111_TO_100__q8,
		stage1_rg_stage_input_BITS_123_TO_112__q17,
		stage1_rg_stage_input_BITS_31_TO_20__q4;
  wire [9 : 0] decoded_instr_funct10__h39631,
	       nzimm10__h22618,
	       nzimm10__h22833;
  wire [8 : 0] offset__h21316, offset__h24888;
  wire [7 : 0] offset__h19850, offset__h25260;
  wire [6 : 0] offset__h20257;
  wire [5 : 0] imm6__h21949, shamt__h10730;
  wire [4 : 0] IF_NOT_csr_regfile_read_mstatus__9_BITS_14_TO__ETC___d2664,
	       IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d2661,
	       IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d2662,
	       IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d2673,
	       IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d2674,
	       alu_outputs_trace_data_rd__h33263,
	       data_to_stage2_rd__h10334,
	       offset_BITS_4_TO_0___h20246,
	       offset_BITS_4_TO_0___h20677,
	       offset_BITS_4_TO_0___h25601,
	       rd__h20317,
	       rs1__h20316,
	       td1_rd__h48442,
	       x_out_data_to_stage2_rd__h10352,
	       x_rd__h43327;
  wire [3 : 0] alu_outputs___1_exc_code__h12188,
	       cur_verbosity__h3724,
	       x_exc_code__h56527,
	       x_out_trap_info_exc_code__h16642;
  wire [2 : 0] rm__h10518;
  wire [1 : 0] new_epoch__h29156, sxl__h6927, uxl__h6928;
  wire IF_IF_stage1_rg_stage_input_46_BITS_187_TO_181_ETC___d1744,
       IF_NOT_stage1_rg_full_45_028_OR_NOT_stage1_rg__ETC___d2376,
       IF_NOT_stage1_rg_full_45_028_OR_NOT_stage1_rg__ETC___d2454,
       IF_NOT_stage1_rg_full_45_028_OR_NOT_stage1_rg__ETC___d2854,
       IF_NOT_stage2_rg_full_14_71_OR_stage2_rg_stage_ETC___d357,
       IF_NOT_stage2_rg_full_14_71_OR_stage2_rg_stage_ETC___d358,
       IF_NOT_stage2_rg_full_14_71_OR_stage2_rg_stage_ETC___d361,
       IF_csr_regfile_csr_mip_read__380_EQ_rg_prev_mi_ETC___d2415,
       IF_csr_regfile_csr_mip_read__380_EQ_rg_prev_mi_ETC___d2418,
       IF_csr_regfile_csr_mip_read__380_EQ_rg_prev_mi_ETC___d2431,
       IF_csr_regfile_csr_mip_read__380_EQ_rg_prev_mi_ETC___d2902,
       IF_csr_regfile_csr_mip_read__380_EQ_rg_prev_mi_ETC___d2949,
       IF_csr_regfile_csr_mip_read__380_EQ_rg_prev_mi_ETC___d3003,
       IF_stage1_rg_full_45_THEN_stage1_rg_stage_inpu_ETC___d3225,
       IF_stage1_rg_stage_input_46_BITS_148_TO_146_94_ETC___d3043,
       IF_stage1_rg_stage_input_46_BITS_175_TO_171_50_ETC___d436,
       IF_stage1_rg_stage_input_46_BITS_175_TO_171_50_ETC___d438,
       IF_stage1_rg_stage_input_46_BITS_175_TO_171_50_ETC___d440,
       IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d1017,
       IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d1021,
       IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d2688,
       IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d809,
       IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d821,
       IF_stage1_rg_stage_input_46_BITS_35_TO_34_75_E_ETC___d853,
       IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d351,
       IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d353,
       NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56,
       NOT_IF_stage1_rg_stage_input_46_BITS_35_TO_34__ETC___d515,
       NOT_csr_regfile_csr_mip_read__380_EQ_rg_prev_m_ETC___d2964,
       NOT_csr_regfile_csr_mip_read__380_EQ_rg_prev_m_ETC___d2968,
       NOT_csr_regfile_csr_mip_read__380_EQ_rg_prev_m_ETC___d3010,
       NOT_csr_regfile_csr_mip_read__380_EQ_rg_prev_m_ETC___d3015,
       NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d2402,
       NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d2448,
       NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d3028,
       NOT_csr_regfile_read_csr_minstret__0_EQ_rg_ins_ETC___d2537,
       NOT_csr_regfile_read_mstatus__9_BITS_14_TO_13__ETC___d2616,
       NOT_csr_regfile_read_mstatus__9_BITS_14_TO_13__ETC___d2659,
       NOT_csr_regfile_read_mstatus__9_BITS_14_TO_13__ETC___d899,
       NOT_imem_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_rg__ETC___d2159,
       NOT_imem_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_rg__ETC___d2173,
       NOT_near_mem_imem_exc__1_2_AND_imem_rg_pc_BITS_ETC___d2192,
       NOT_near_mem_imem_exc__1_2_AND_imem_rg_pc_BITS_ETC___d2199,
       NOT_rg_cur_priv_8_EQ_0b11_111_143_AND_NOT_rg_c_ETC___d1156,
       NOT_rg_cur_priv_8_EQ_0b11_111_143_AND_NOT_rg_c_ETC___d1178,
       NOT_rg_cur_priv_8_EQ_0b11_111_143_AND_NOT_rg_c_ETC___d1253,
       NOT_rg_cur_priv_8_EQ_0b11_111_143_AND_NOT_rg_c_ETC___d1732,
       NOT_rg_cur_priv_8_EQ_0b11_111_143_AND_NOT_rg_c_ETC___d3037,
       NOT_rg_next_pc_195_BITS_1_TO_0_196_EQ_0b0_197__ETC___d3203,
       NOT_rg_run_on_reset_337_338_OR_imem_rg_pc_BITS_ETC___d2345,
       NOT_set_verbosity_verbosity_EQ_cfg_verbosity_r_ETC___d3311,
       NOT_stage1_rg_stage_input_46_BITS_135_TO_134_1_ETC___d793,
       NOT_stage1_rg_stage_input_46_BITS_145_TO_141_6_ETC___d599,
       NOT_stage1_rg_stage_input_46_BITS_148_TO_146_9_ETC___d1209,
       NOT_stage1_rg_stage_input_46_BITS_148_TO_146_9_ETC___d1216,
       NOT_stage1_rg_stage_input_46_BITS_180_TO_176_0_ETC___d1221,
       NOT_stage1_rg_stage_input_46_BITS_187_TO_181_9_ETC___d1435,
       NOT_stage1_rg_stage_input_46_BITS_187_TO_181_9_ETC___d3053,
       NOT_stage1_rg_stage_input_46_BITS_187_TO_181_9_ETC___d464,
       NOT_stage1_rg_stage_input_46_BITS_187_TO_181_9_ETC___d806,
       NOT_stage1_rg_stage_input_46_BITS_371_TO_370_4_ETC___d1026,
       NOT_stage1_rg_stage_input_46_BITS_371_TO_370_4_ETC___d1282,
       NOT_stage1_rg_stage_input_46_BITS_371_TO_370_4_ETC___d1290,
       NOT_stage1_rg_stage_input_46_BITS_371_TO_370_4_ETC___d1295,
       NOT_stage1_rg_stage_input_46_BITS_371_TO_370_4_ETC___d1301,
       NOT_stage1_rg_stage_input_46_BITS_371_TO_370_4_ETC___d1351,
       NOT_stage1_rg_stage_input_46_BITS_371_TO_370_4_ETC___d1353,
       NOT_stage1_rg_stage_input_46_BITS_371_TO_370_4_ETC___d1747,
       NOT_stage1_rg_stage_input_46_BITS_371_TO_370_4_ETC___d1751,
       NOT_stage1_rg_stage_input_46_BITS_371_TO_370_4_ETC___d2372,
       NOT_stage1_rg_stage_input_46_BITS_371_TO_370_4_ETC___d2440,
       NOT_stage1_rg_stage_input_46_BIT_368_91_29_AND_ETC___d1056,
       NOT_stage1_rg_stage_input_46_BIT_368_91_29_AND_ETC___d1071,
       NOT_stage1_rg_stage_input_46_BIT_368_91_29_AND_ETC___d1120,
       NOT_stage1_rg_stage_input_46_BIT_368_91_29_AND_ETC___d1181,
       NOT_stage1_rg_stage_input_46_BIT_368_91_29_AND_ETC___d3212,
       NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d1037,
       NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d1271,
       NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d1394,
       NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d2408,
       NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d382,
       NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d389,
       NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d824,
       NOT_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ__ETC___d148,
       NOT_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ__ETC___d156,
       NOT_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ__ETC___d177,
       NOT_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ__ETC___d289,
       NOT_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ__ETC___d417,
       NOT_stageF_branch_predictor_predict_rsp_NOT_im_ETC___d2982,
       _0_OR_stage1_rg_stage_input_46_BITS_140_TO_134__ETC___d2639,
       csr_regfile_csr_mip_read__380_EQ_rg_prev_mip_381___d2382,
       csr_regfile_csr_mip_read__380_EQ_rg_prev_mip_3_ETC___d2407,
       csr_regfile_csr_mip_read__380_EQ_rg_prev_mip_3_ETC___d2411,
       csr_regfile_csr_mip_read__380_EQ_rg_prev_mip_3_ETC___d2420,
       csr_regfile_csr_mip_read__380_EQ_rg_prev_mip_3_ETC___d2425,
       csr_regfile_csr_mip_read__380_EQ_rg_prev_mip_3_ETC___d2453,
       csr_regfile_csr_mip_read__380_EQ_rg_prev_mip_3_ETC___d2551,
       csr_regfile_csr_mip_read__380_EQ_rg_prev_mip_3_ETC___d2552,
       csr_regfile_csr_mip_read__380_EQ_rg_prev_mip_3_ETC___d2555,
       csr_regfile_csr_mip_read__380_EQ_rg_prev_mip_3_ETC___d2802,
       csr_regfile_csr_mip_read__380_EQ_rg_prev_mip_3_ETC___d2839,
       csr_regfile_csr_mip_read__380_EQ_rg_prev_mip_3_ETC___d2856,
       csr_regfile_csr_mip_read__380_EQ_rg_prev_mip_3_ETC___d2866,
       csr_regfile_csr_mip_read__380_EQ_rg_prev_mip_3_ETC___d2870,
       csr_regfile_csr_mip_read__380_EQ_rg_prev_mip_3_ETC___d2875,
       csr_regfile_csr_mip_read__380_EQ_rg_prev_mip_3_ETC___d2885,
       csr_regfile_csr_mip_read__380_EQ_rg_prev_mip_3_ETC___d2890,
       csr_regfile_csr_mip_read__380_EQ_rg_prev_mip_3_ETC___d2895,
       csr_regfile_csr_mip_read__380_EQ_rg_prev_mip_3_ETC___d2898,
       csr_regfile_csr_mip_read__380_EQ_rg_prev_mip_3_ETC___d3112,
       csr_regfile_interrupt_pending_rg_cur_priv_8_39_ETC___d2959,
       csr_regfile_read_csr_minstret__0_BITS_19_TO_0__ETC___d2542,
       csr_regfile_read_csr_minstret__0_BITS_19_TO_0__ETC___d3107,
       csr_regfile_read_csr_minstret__0_BITS_19_TO_0__ETC___d3156,
       csr_regfile_read_csr_minstret__0_BITS_19_TO_0__ETC___d3242,
       csr_regfile_read_misa__6_BIT_2_759_AND_stageD__ETC___d1834,
       csr_regfile_read_misa__6_BIT_2_759_AND_stageD__ETC___d1840,
       csr_regfile_read_mstatus__9_BITS_14_TO_13_1_EQ_ETC___d613,
       f_reset_reqs_i_notEmpty__307_AND_stageF_f_rese_ETC___d2319,
       fpr_regfile_RDY_server_reset_request_put__304__ETC___d2322,
       imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_rg_p_ETC___d2196,
       imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_near_mem__ETC___d2341,
       imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_near_mem__ETC___d3251,
       imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_near_mem__ETC___d3261,
       imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_near_mem__ETC___d3271,
       imem_rg_pc_BITS_63_TO_2_4_EQ_imem_rg_cache_add_ETC___d2151,
       imem_rg_pc_BITS_63_TO_2_4_EQ_near_mem_imem_pc__ETC___d17,
       near_mem_imem_exc__1_OR_NOT_imem_rg_pc_BITS_1__ETC___d2204,
       near_mem_imem_exc__1_OR_NOT_imem_rg_pc_BITS_1__ETC___d2206,
       near_mem_imem_pc__5_EQ_imem_rg_pc_PLUS_2_153___d2154,
       near_mem_imem_valid_AND_near_mem_imem_exc__1_A_ETC___d2301,
       rg_cur_priv_8_EQ_0b11_111_OR_rg_cur_priv_8_EQ__ETC___d1176,
       rg_cur_priv_8_EQ_0b11_111_OR_rg_cur_priv_8_EQ__ETC___d1241,
       rg_cur_priv_8_EQ_0b11_111_OR_rg_cur_priv_8_EQ__ETC___d1255,
       rg_cur_priv_8_EQ_0b11_111_OR_rg_cur_priv_8_EQ__ETC___d1722,
       rg_state_7_EQ_12_4_AND_csr_regfile_wfi_resume__ETC___d3289,
       rg_state_7_EQ_3_370_AND_csr_regfile_csr_mip_re_ETC___d3031,
       rg_state_7_EQ_3_370_AND_csr_regfile_csr_mip_re_ETC___d3058,
       rg_state_7_EQ_3_370_AND_csr_regfile_csr_mip_re_ETC___d3115,
       rg_state_7_EQ_3_370_AND_csr_regfile_csr_mip_re_ETC___d3226,
       rg_state_7_EQ_3_370_AND_csr_regfile_csr_mip_re_ETC___d3227,
       rg_state_7_EQ_3_370_AND_csr_regfile_csr_mip_re_ETC___d3245,
       rg_state_7_EQ_3_370_AND_csr_regfile_csr_mip_re_ETC___d3246,
       rg_state_7_EQ_3_370_AND_csr_regfile_csr_mip_re_ETC___d3255,
       rg_state_7_EQ_3_370_AND_csr_regfile_csr_mip_re_ETC___d3256,
       rg_state_7_EQ_3_370_AND_csr_regfile_csr_mip_re_ETC___d3266,
       rg_state_7_EQ_3_370_AND_csr_regfile_csr_mip_re_ETC___d3275,
       rg_state_7_EQ_3_370_AND_stage1_rg_full_45_AND__ETC___d2385,
       rg_state_7_EQ_3_370_AND_stage3_rg_full_8_OR_st_ETC___d2444,
       rg_state_7_EQ_4_065_AND_NOT_stageF_rg_full_181_ETC___d3066,
       rg_state_7_EQ_5_293_AND_NOT_stageF_rg_full_181_ETC___d3294,
       rg_state_7_EQ_8_192_AND_NOT_stageF_rg_full_181_ETC___d3193,
       rg_trap_info_068_BITS_131_TO_68_069_EQ_csr_reg_ETC___d3090,
       stage1_rg_full_45_AND_NOT_stage1_rg_stage_inpu_ETC___d3302,
       stage1_rg_full_45_AND_NOT_stage2_rg_full_14_71_ETC___d1042,
       stage1_rg_full_45_AND_NOT_stage2_rg_full_14_71_ETC___d1050,
       stage1_rg_full_45_AND_NOT_stage2_rg_full_14_71_ETC___d1376,
       stage1_rg_full_45_AND_NOT_stage2_rg_full_14_71_ETC___d1433,
       stage1_rg_full_45_AND_NOT_stage2_rg_full_14_71_ETC___d1459,
       stage1_rg_full_45_AND_stage1_rg_stage_input_46_ETC___d377,
       stage1_rg_stage_input_46_BITS_135_TO_134_14_EQ_ETC___d1001,
       stage1_rg_stage_input_46_BITS_135_TO_134_14_EQ_ETC___d2599,
       stage1_rg_stage_input_46_BITS_140_TO_134_53_EQ_ETC___d2578,
       stage1_rg_stage_input_46_BITS_140_TO_134_53_EQ_ETC___d917,
       stage1_rg_stage_input_46_BITS_140_TO_134_53_EQ_ETC___d926,
       stage1_rg_stage_input_46_BITS_140_TO_134_53_EQ_ETC___d934,
       stage1_rg_stage_input_46_BITS_140_TO_134_53_EQ_ETC___d941,
       stage1_rg_stage_input_46_BITS_140_TO_134_53_EQ_ETC___d968,
       stage1_rg_stage_input_46_BITS_140_TO_134_53_EQ_ETC___d979,
       stage1_rg_stage_input_46_BITS_140_TO_134_53_EQ_ETC___d985,
       stage1_rg_stage_input_46_BITS_148_TO_146_94_EQ_ETC___d1087,
       stage1_rg_stage_input_46_BITS_148_TO_146_94_EQ_ETC___d1101,
       stage1_rg_stage_input_46_BITS_180_TO_176_079_E_ETC___d1117,
       stage1_rg_stage_input_46_BITS_180_TO_176_079_E_ETC___d1155,
       stage1_rg_stage_input_46_BITS_187_TO_181_92_EQ_ETC___d1014,
       stage1_rg_stage_input_46_BITS_187_TO_181_92_EQ_ETC___d1347,
       stage1_rg_stage_input_46_BITS_187_TO_181_92_EQ_ETC___d1398,
       stage1_rg_stage_input_46_BITS_187_TO_181_92_EQ_ETC___d1461,
       stage1_rg_stage_input_46_BITS_187_TO_181_92_EQ_ETC___d3220,
       stage1_rg_stage_input_46_BITS_187_TO_181_92_EQ_ETC___d840,
       stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d1360,
       stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d1438,
       stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d1673,
       stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d2450,
       stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d2879,
       stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d348,
       stage1_rg_stage_input_46_BIT_368_91_OR_NOT_rg__ETC___d1148,
       stage2_rg_full_14_AND_IF_stage2_rg_stage2_15_B_ETC___d2522,
       stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1024,
       stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1047,
       stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1058,
       stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1059,
       stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1061,
       stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1073,
       stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1074,
       stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1076,
       stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1091,
       stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1092,
       stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1094,
       stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1105,
       stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1106,
       stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1108,
       stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1122,
       stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1123,
       stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1125,
       stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1137,
       stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1138,
       stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1140,
       stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1161,
       stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1162,
       stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1163,
       stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1165,
       stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1183,
       stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1184,
       stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1185,
       stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1187,
       stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1260,
       stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1261,
       stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1262,
       stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1265,
       stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1266,
       stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1267,
       stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1268,
       stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1330,
       stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1391,
       stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1400,
       stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1408,
       stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1418,
       stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1423,
       stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1426,
       stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1453,
       stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d2399,
       stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d2871,
       stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d2886,
       stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d2891,
       stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d355,
       stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d363,
       stage2_rg_full_14_AND_stage2_rg_stage2_15_BITS_ETC___d170,
       stage2_rg_full_14_AND_stage2_rg_stage2_15_BITS_ETC___d2519,
       stage2_rg_full_14_AND_stage2_rg_stage2_15_BITS_ETC___d2524,
       stage2_rg_full_14_AND_stage2_rg_stage2_15_BITS_ETC___d2526,
       stage2_rg_full_14_AND_stage2_rg_stage2_15_BITS_ETC___d2528,
       stage2_rg_full_14_AND_stage2_rg_stage2_15_BITS_ETC___d2530,
       stage2_rg_full_14_AND_stage2_rg_stage2_15_BITS_ETC___d2532,
       stage2_rg_full_14_AND_stage2_rg_stage2_15_BITS_ETC___d2544,
       stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_0_17_ETC___d168,
       stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_0_17_ETC___d215,
       stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_0_17_ETC___d244,
       stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_2_21_ETC___d298,
       stage3_rg_full_8_OR_NOT_stage2_rg_full_14_71_O_ETC___d2443,
       stage3_rg_stage3_00_BITS_566_TO_562_09_EQ_stag_ETC___d422,
       stage3_rg_stage3_00_BITS_566_TO_562_09_EQ_stag_ETC___d430,
       stageF_f_reset_rsps_i_notEmpty__331_AND_stageD_ETC___d2351,
       stageF_rg_full_181_AND_near_mem_imem_valid_AND_ETC___d2213;

  // action method hart0_server_reset_request_put
  assign RDY_hart0_server_reset_request_put = f_reset_reqs$FULL_N ;
  assign CAN_FIRE_hart0_server_reset_request_put = f_reset_reqs$FULL_N ;
  assign WILL_FIRE_hart0_server_reset_request_put =
	     EN_hart0_server_reset_request_put ;

  // actionvalue method hart0_server_reset_response_get
  assign hart0_server_reset_response_get = f_reset_rsps$D_OUT ;
  assign RDY_hart0_server_reset_response_get = f_reset_rsps$EMPTY_N ;
  assign CAN_FIRE_hart0_server_reset_response_get = f_reset_rsps$EMPTY_N ;
  assign WILL_FIRE_hart0_server_reset_response_get =
	     EN_hart0_server_reset_response_get ;

  // value method imem_master_m_awvalid
  assign imem_master_awvalid = near_mem$imem_master_awvalid ;

  // value method imem_master_m_awid
  assign imem_master_awid = near_mem$imem_master_awid ;

  // value method imem_master_m_awaddr
  assign imem_master_awaddr = near_mem$imem_master_awaddr ;

  // value method imem_master_m_awlen
  assign imem_master_awlen = near_mem$imem_master_awlen ;

  // value method imem_master_m_awsize
  assign imem_master_awsize = near_mem$imem_master_awsize ;

  // value method imem_master_m_awburst
  assign imem_master_awburst = near_mem$imem_master_awburst ;

  // value method imem_master_m_awlock
  assign imem_master_awlock = near_mem$imem_master_awlock ;

  // value method imem_master_m_awcache
  assign imem_master_awcache = near_mem$imem_master_awcache ;

  // value method imem_master_m_awprot
  assign imem_master_awprot = near_mem$imem_master_awprot ;

  // value method imem_master_m_awqos
  assign imem_master_awqos = near_mem$imem_master_awqos ;

  // value method imem_master_m_awregion
  assign imem_master_awregion = near_mem$imem_master_awregion ;

  // action method imem_master_m_awready
  assign CAN_FIRE_imem_master_m_awready = 1'd1 ;
  assign WILL_FIRE_imem_master_m_awready = 1'd1 ;

  // value method imem_master_m_wvalid
  assign imem_master_wvalid = near_mem$imem_master_wvalid ;

  // value method imem_master_m_wdata
  assign imem_master_wdata = near_mem$imem_master_wdata ;

  // value method imem_master_m_wstrb
  assign imem_master_wstrb = near_mem$imem_master_wstrb ;

  // value method imem_master_m_wlast
  assign imem_master_wlast = near_mem$imem_master_wlast ;

  // action method imem_master_m_wready
  assign CAN_FIRE_imem_master_m_wready = 1'd1 ;
  assign WILL_FIRE_imem_master_m_wready = 1'd1 ;

  // action method imem_master_m_bvalid
  assign CAN_FIRE_imem_master_m_bvalid = 1'd1 ;
  assign WILL_FIRE_imem_master_m_bvalid = 1'd1 ;

  // value method imem_master_m_bready
  assign imem_master_bready = near_mem$imem_master_bready ;

  // value method imem_master_m_arvalid
  assign imem_master_arvalid = near_mem$imem_master_arvalid ;

  // value method imem_master_m_arid
  assign imem_master_arid = near_mem$imem_master_arid ;

  // value method imem_master_m_araddr
  assign imem_master_araddr = near_mem$imem_master_araddr ;

  // value method imem_master_m_arlen
  assign imem_master_arlen = near_mem$imem_master_arlen ;

  // value method imem_master_m_arsize
  assign imem_master_arsize = near_mem$imem_master_arsize ;

  // value method imem_master_m_arburst
  assign imem_master_arburst = near_mem$imem_master_arburst ;

  // value method imem_master_m_arlock
  assign imem_master_arlock = near_mem$imem_master_arlock ;

  // value method imem_master_m_arcache
  assign imem_master_arcache = near_mem$imem_master_arcache ;

  // value method imem_master_m_arprot
  assign imem_master_arprot = near_mem$imem_master_arprot ;

  // value method imem_master_m_arqos
  assign imem_master_arqos = near_mem$imem_master_arqos ;

  // value method imem_master_m_arregion
  assign imem_master_arregion = near_mem$imem_master_arregion ;

  // action method imem_master_m_arready
  assign CAN_FIRE_imem_master_m_arready = 1'd1 ;
  assign WILL_FIRE_imem_master_m_arready = 1'd1 ;

  // action method imem_master_m_rvalid
  assign CAN_FIRE_imem_master_m_rvalid = 1'd1 ;
  assign WILL_FIRE_imem_master_m_rvalid = 1'd1 ;

  // value method imem_master_m_rready
  assign imem_master_rready = near_mem$imem_master_rready ;

  // value method mem_master_m_awvalid
  assign mem_master_awvalid = near_mem$mem_master_awvalid ;

  // value method mem_master_m_awid
  assign mem_master_awid = near_mem$mem_master_awid ;

  // value method mem_master_m_awaddr
  assign mem_master_awaddr = near_mem$mem_master_awaddr ;

  // value method mem_master_m_awlen
  assign mem_master_awlen = near_mem$mem_master_awlen ;

  // value method mem_master_m_awsize
  assign mem_master_awsize = near_mem$mem_master_awsize ;

  // value method mem_master_m_awburst
  assign mem_master_awburst = near_mem$mem_master_awburst ;

  // value method mem_master_m_awlock
  assign mem_master_awlock = near_mem$mem_master_awlock ;

  // value method mem_master_m_awcache
  assign mem_master_awcache = near_mem$mem_master_awcache ;

  // value method mem_master_m_awprot
  assign mem_master_awprot = near_mem$mem_master_awprot ;

  // value method mem_master_m_awqos
  assign mem_master_awqos = near_mem$mem_master_awqos ;

  // value method mem_master_m_awregion
  assign mem_master_awregion = near_mem$mem_master_awregion ;

  // action method mem_master_m_awready
  assign CAN_FIRE_mem_master_m_awready = 1'd1 ;
  assign WILL_FIRE_mem_master_m_awready = 1'd1 ;

  // value method mem_master_m_wvalid
  assign mem_master_wvalid = near_mem$mem_master_wvalid ;

  // value method mem_master_m_wdata
  assign mem_master_wdata = near_mem$mem_master_wdata ;

  // value method mem_master_m_wstrb
  assign mem_master_wstrb = near_mem$mem_master_wstrb ;

  // value method mem_master_m_wlast
  assign mem_master_wlast = near_mem$mem_master_wlast ;

  // action method mem_master_m_wready
  assign CAN_FIRE_mem_master_m_wready = 1'd1 ;
  assign WILL_FIRE_mem_master_m_wready = 1'd1 ;

  // action method mem_master_m_bvalid
  assign CAN_FIRE_mem_master_m_bvalid = 1'd1 ;
  assign WILL_FIRE_mem_master_m_bvalid = 1'd1 ;

  // value method mem_master_m_bready
  assign mem_master_bready = near_mem$mem_master_bready ;

  // value method mem_master_m_arvalid
  assign mem_master_arvalid = near_mem$mem_master_arvalid ;

  // value method mem_master_m_arid
  assign mem_master_arid = near_mem$mem_master_arid ;

  // value method mem_master_m_araddr
  assign mem_master_araddr = near_mem$mem_master_araddr ;

  // value method mem_master_m_arlen
  assign mem_master_arlen = near_mem$mem_master_arlen ;

  // value method mem_master_m_arsize
  assign mem_master_arsize = near_mem$mem_master_arsize ;

  // value method mem_master_m_arburst
  assign mem_master_arburst = near_mem$mem_master_arburst ;

  // value method mem_master_m_arlock
  assign mem_master_arlock = near_mem$mem_master_arlock ;

  // value method mem_master_m_arcache
  assign mem_master_arcache = near_mem$mem_master_arcache ;

  // value method mem_master_m_arprot
  assign mem_master_arprot = near_mem$mem_master_arprot ;

  // value method mem_master_m_arqos
  assign mem_master_arqos = near_mem$mem_master_arqos ;

  // value method mem_master_m_arregion
  assign mem_master_arregion = near_mem$mem_master_arregion ;

  // action method mem_master_m_arready
  assign CAN_FIRE_mem_master_m_arready = 1'd1 ;
  assign WILL_FIRE_mem_master_m_arready = 1'd1 ;

  // action method mem_master_m_rvalid
  assign CAN_FIRE_mem_master_m_rvalid = 1'd1 ;
  assign WILL_FIRE_mem_master_m_rvalid = 1'd1 ;

  // value method mem_master_m_rready
  assign mem_master_rready = near_mem$mem_master_rready ;

  // action method dma_server_m_awvalid
  assign CAN_FIRE_dma_server_m_awvalid = 1'd1 ;
  assign WILL_FIRE_dma_server_m_awvalid = 1'd1 ;

  // value method dma_server_m_awready
  assign dma_server_awready = near_mem$dma_server_awready ;

  // action method dma_server_m_wvalid
  assign CAN_FIRE_dma_server_m_wvalid = 1'd1 ;
  assign WILL_FIRE_dma_server_m_wvalid = 1'd1 ;

  // value method dma_server_m_wready
  assign dma_server_wready = near_mem$dma_server_wready ;

  // value method dma_server_m_bvalid
  assign dma_server_bvalid = near_mem$dma_server_bvalid ;

  // value method dma_server_m_bid
  assign dma_server_bid = near_mem$dma_server_bid ;

  // value method dma_server_m_bresp
  assign dma_server_bresp = near_mem$dma_server_bresp ;

  // action method dma_server_m_bready
  assign CAN_FIRE_dma_server_m_bready = 1'd1 ;
  assign WILL_FIRE_dma_server_m_bready = 1'd1 ;

  // action method dma_server_m_arvalid
  assign CAN_FIRE_dma_server_m_arvalid = 1'd1 ;
  assign WILL_FIRE_dma_server_m_arvalid = 1'd1 ;

  // value method dma_server_m_arready
  assign dma_server_arready = near_mem$dma_server_arready ;

  // value method dma_server_m_rvalid
  assign dma_server_rvalid = near_mem$dma_server_rvalid ;

  // value method dma_server_m_rid
  assign dma_server_rid = near_mem$dma_server_rid ;

  // value method dma_server_m_rdata
  assign dma_server_rdata = near_mem$dma_server_rdata ;

  // value method dma_server_m_rresp
  assign dma_server_rresp = near_mem$dma_server_rresp ;

  // value method dma_server_m_rlast
  assign dma_server_rlast = near_mem$dma_server_rlast ;

  // action method dma_server_m_rready
  assign CAN_FIRE_dma_server_m_rready = 1'd1 ;
  assign WILL_FIRE_dma_server_m_rready = 1'd1 ;

  // action method m_external_interrupt_req
  assign CAN_FIRE_m_external_interrupt_req = 1'd1 ;
  assign WILL_FIRE_m_external_interrupt_req = 1'd1 ;

  // action method s_external_interrupt_req
  assign CAN_FIRE_s_external_interrupt_req = 1'd1 ;
  assign WILL_FIRE_s_external_interrupt_req = 1'd1 ;

  // action method ma_set_csr_time
  assign CAN_FIRE_ma_set_csr_time = 1'd1 ;
  assign WILL_FIRE_ma_set_csr_time = 1'd1 ;

  // action method software_interrupt_req
  assign CAN_FIRE_software_interrupt_req = 1'd1 ;
  assign WILL_FIRE_software_interrupt_req = 1'd1 ;

  // action method timer_interrupt_req
  assign CAN_FIRE_timer_interrupt_req = 1'd1 ;
  assign WILL_FIRE_timer_interrupt_req = 1'd1 ;

  // action method nmi_req
  assign CAN_FIRE_nmi_req = 1'd1 ;
  assign WILL_FIRE_nmi_req = 1'd1 ;

  // actionvalue method trace_data_out_get
  assign trace_data_out_get = f_trace_data$D_OUT ;
  assign RDY_trace_data_out_get = f_trace_data$EMPTY_N ;
  assign CAN_FIRE_trace_data_out_get = f_trace_data$EMPTY_N ;
  assign WILL_FIRE_trace_data_out_get = EN_trace_data_out_get ;

  // action method set_verbosity
  assign RDY_set_verbosity = 1'd1 ;
  assign CAN_FIRE_set_verbosity = 1'd1 ;
  assign WILL_FIRE_set_verbosity = EN_set_verbosity ;

  // action method set_watch_tohost
  assign RDY_set_watch_tohost = 1'd1 ;
  assign CAN_FIRE_set_watch_tohost = 1'd1 ;
  assign WILL_FIRE_set_watch_tohost = EN_set_watch_tohost ;

  // value method mv_tohost_value
  assign mv_tohost_value = near_mem$mv_tohost_value ;
  assign RDY_mv_tohost_value = 1'd1 ;

  // action method ma_ddr4_ready
  assign RDY_ma_ddr4_ready = 1'd1 ;
  assign CAN_FIRE_ma_ddr4_ready = 1'd1 ;
  assign WILL_FIRE_ma_ddr4_ready = EN_ma_ddr4_ready ;

  // value method mv_status
  assign mv_status = near_mem$mv_status ;

  // submodule csr_regfile
  mkCSR_RegFile csr_regfile(.CLK(CLK),
			    .RST_N(RST_N),
			    .access_permitted_1_csr_addr(csr_regfile$access_permitted_1_csr_addr),
			    .access_permitted_1_priv(csr_regfile$access_permitted_1_priv),
			    .access_permitted_1_read_not_write(csr_regfile$access_permitted_1_read_not_write),
			    .access_permitted_2_csr_addr(csr_regfile$access_permitted_2_csr_addr),
			    .access_permitted_2_priv(csr_regfile$access_permitted_2_priv),
			    .access_permitted_2_read_not_write(csr_regfile$access_permitted_2_read_not_write),
			    .csr_counter_read_fault_csr_addr(csr_regfile$csr_counter_read_fault_csr_addr),
			    .csr_counter_read_fault_priv(csr_regfile$csr_counter_read_fault_priv),
			    .csr_ret_actions_from_priv(csr_regfile$csr_ret_actions_from_priv),
			    .csr_trap_actions_exc_code(csr_regfile$csr_trap_actions_exc_code),
			    .csr_trap_actions_from_priv(csr_regfile$csr_trap_actions_from_priv),
			    .csr_trap_actions_interrupt(csr_regfile$csr_trap_actions_interrupt),
			    .csr_trap_actions_nmi(csr_regfile$csr_trap_actions_nmi),
			    .csr_trap_actions_pc(csr_regfile$csr_trap_actions_pc),
			    .csr_trap_actions_xtval(csr_regfile$csr_trap_actions_xtval),
			    .interrupt_pending_cur_priv(csr_regfile$interrupt_pending_cur_priv),
			    .m_external_interrupt_req_set_not_clear(csr_regfile$m_external_interrupt_req_set_not_clear),
			    .ma_set_csr_time_t(csr_regfile$ma_set_csr_time_t),
			    .ma_update_fcsr_fflags_flags(csr_regfile$ma_update_fcsr_fflags_flags),
			    .ma_update_mstatus_fs_fs(csr_regfile$ma_update_mstatus_fs_fs),
			    .mav_csr_write_csr_addr(csr_regfile$mav_csr_write_csr_addr),
			    .mav_csr_write_word(csr_regfile$mav_csr_write_word),
			    .mav_read_csr_csr_addr(csr_regfile$mav_read_csr_csr_addr),
			    .mv_update_fcsr_fflags_flags(csr_regfile$mv_update_fcsr_fflags_flags),
			    .mv_update_mstatus_fs_fs(csr_regfile$mv_update_mstatus_fs_fs),
			    .nmi_req_set_not_clear(csr_regfile$nmi_req_set_not_clear),
			    .read_csr_csr_addr(csr_regfile$read_csr_csr_addr),
			    .read_csr_port2_csr_addr(csr_regfile$read_csr_port2_csr_addr),
			    .s_external_interrupt_req_set_not_clear(csr_regfile$s_external_interrupt_req_set_not_clear),
			    .software_interrupt_req_set_not_clear(csr_regfile$software_interrupt_req_set_not_clear),
			    .timer_interrupt_req_set_not_clear(csr_regfile$timer_interrupt_req_set_not_clear),
			    .EN_server_reset_request_put(csr_regfile$EN_server_reset_request_put),
			    .EN_server_reset_response_get(csr_regfile$EN_server_reset_response_get),
			    .EN_mav_read_csr(csr_regfile$EN_mav_read_csr),
			    .EN_mav_csr_write(csr_regfile$EN_mav_csr_write),
			    .EN_ma_update_fcsr_fflags(csr_regfile$EN_ma_update_fcsr_fflags),
			    .EN_ma_update_mstatus_fs(csr_regfile$EN_ma_update_mstatus_fs),
			    .EN_csr_trap_actions(csr_regfile$EN_csr_trap_actions),
			    .EN_csr_ret_actions(csr_regfile$EN_csr_ret_actions),
			    .EN_csr_minstret_incr(csr_regfile$EN_csr_minstret_incr),
			    .EN_debug(csr_regfile$EN_debug),
			    .RDY_server_reset_request_put(csr_regfile$RDY_server_reset_request_put),
			    .RDY_server_reset_response_get(csr_regfile$RDY_server_reset_response_get),
			    .read_csr(csr_regfile$read_csr),
			    .read_csr_port2(),
			    .mav_read_csr(),
			    .mav_csr_write(csr_regfile$mav_csr_write),
			    .read_frm(csr_regfile$read_frm),
			    .read_fflags(csr_regfile$read_fflags),
			    .mv_update_fcsr_fflags(csr_regfile$mv_update_fcsr_fflags),
			    .mv_update_mstatus_fs(csr_regfile$mv_update_mstatus_fs),
			    .read_misa(csr_regfile$read_misa),
			    .read_mstatus(csr_regfile$read_mstatus),
			    .read_sstatus(csr_regfile$read_sstatus),
			    .read_ustatus(),
			    .read_satp(csr_regfile$read_satp),
			    .csr_trap_actions(csr_regfile$csr_trap_actions),
			    .RDY_csr_trap_actions(),
			    .csr_ret_actions(csr_regfile$csr_ret_actions),
			    .RDY_csr_ret_actions(),
			    .read_csr_minstret(csr_regfile$read_csr_minstret),
			    .read_csr_mcycle(csr_regfile$read_csr_mcycle),
			    .access_permitted_1(csr_regfile$access_permitted_1),
			    .access_permitted_2(csr_regfile$access_permitted_2),
			    .csr_counter_read_fault(),
			    .csr_mip_read(csr_regfile$csr_mip_read),
			    .interrupt_pending(csr_regfile$interrupt_pending),
			    .wfi_resume(csr_regfile$wfi_resume),
			    .nmi_pending(csr_regfile$nmi_pending),
			    .RDY_debug());

  // submodule f_reset_reqs
  FIFO2 #(.width(32'd1), .guarded(1'd1)) f_reset_reqs(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(f_reset_reqs$D_IN),
						      .ENQ(f_reset_reqs$ENQ),
						      .DEQ(f_reset_reqs$DEQ),
						      .CLR(f_reset_reqs$CLR),
						      .D_OUT(f_reset_reqs$D_OUT),
						      .FULL_N(f_reset_reqs$FULL_N),
						      .EMPTY_N(f_reset_reqs$EMPTY_N));

  // submodule f_reset_rsps
  FIFO2 #(.width(32'd1), .guarded(1'd1)) f_reset_rsps(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(f_reset_rsps$D_IN),
						      .ENQ(f_reset_rsps$ENQ),
						      .DEQ(f_reset_rsps$DEQ),
						      .CLR(f_reset_rsps$CLR),
						      .D_OUT(f_reset_rsps$D_OUT),
						      .FULL_N(f_reset_rsps$FULL_N),
						      .EMPTY_N(f_reset_rsps$EMPTY_N));

  // submodule f_trace_data
  FIFO2 #(.width(32'd427), .guarded(1'd1)) f_trace_data(.RST(RST_N),
							.CLK(CLK),
							.D_IN(f_trace_data$D_IN),
							.ENQ(f_trace_data$ENQ),
							.DEQ(f_trace_data$DEQ),
							.CLR(f_trace_data$CLR),
							.D_OUT(f_trace_data$D_OUT),
							.FULL_N(f_trace_data$FULL_N),
							.EMPTY_N(f_trace_data$EMPTY_N));

  // submodule fpr_regfile
  mkFPR_RegFile fpr_regfile(.CLK(CLK),
			    .RST_N(RST_N),
			    .read_rs1_port2_rs1(fpr_regfile$read_rs1_port2_rs1),
			    .read_rs1_rs1(fpr_regfile$read_rs1_rs1),
			    .read_rs2_rs2(fpr_regfile$read_rs2_rs2),
			    .read_rs3_rs3(fpr_regfile$read_rs3_rs3),
			    .write_rd_rd(fpr_regfile$write_rd_rd),
			    .write_rd_rd_val(fpr_regfile$write_rd_rd_val),
			    .EN_server_reset_request_put(fpr_regfile$EN_server_reset_request_put),
			    .EN_server_reset_response_get(fpr_regfile$EN_server_reset_response_get),
			    .EN_write_rd(fpr_regfile$EN_write_rd),
			    .RDY_server_reset_request_put(fpr_regfile$RDY_server_reset_request_put),
			    .RDY_server_reset_response_get(fpr_regfile$RDY_server_reset_response_get),
			    .read_rs1(fpr_regfile$read_rs1),
			    .read_rs1_port2(),
			    .read_rs2(fpr_regfile$read_rs2),
			    .read_rs3(fpr_regfile$read_rs3));

  // submodule gpr_regfile
  mkGPR_RegFile gpr_regfile(.CLK(CLK),
			    .RST_N(RST_N),
			    .read_rs1_port2_rs1(gpr_regfile$read_rs1_port2_rs1),
			    .read_rs1_rs1(gpr_regfile$read_rs1_rs1),
			    .read_rs2_rs2(gpr_regfile$read_rs2_rs2),
			    .write_rd_rd(gpr_regfile$write_rd_rd),
			    .write_rd_rd_val(gpr_regfile$write_rd_rd_val),
			    .EN_server_reset_request_put(gpr_regfile$EN_server_reset_request_put),
			    .EN_server_reset_response_get(gpr_regfile$EN_server_reset_response_get),
			    .EN_write_rd(gpr_regfile$EN_write_rd),
			    .RDY_server_reset_request_put(gpr_regfile$RDY_server_reset_request_put),
			    .RDY_server_reset_response_get(gpr_regfile$RDY_server_reset_response_get),
			    .read_rs1(gpr_regfile$read_rs1),
			    .read_rs1_port2(),
			    .read_rs2(gpr_regfile$read_rs2));

  // submodule near_mem
  mkNear_Mem near_mem(.CLK(CLK),
		      .RST_N(RST_N),
		      .dma_server_araddr(near_mem$dma_server_araddr),
		      .dma_server_arburst(near_mem$dma_server_arburst),
		      .dma_server_arcache(near_mem$dma_server_arcache),
		      .dma_server_arid(near_mem$dma_server_arid),
		      .dma_server_arlen(near_mem$dma_server_arlen),
		      .dma_server_arlock(near_mem$dma_server_arlock),
		      .dma_server_arprot(near_mem$dma_server_arprot),
		      .dma_server_arqos(near_mem$dma_server_arqos),
		      .dma_server_arregion(near_mem$dma_server_arregion),
		      .dma_server_arsize(near_mem$dma_server_arsize),
		      .dma_server_arvalid(near_mem$dma_server_arvalid),
		      .dma_server_awaddr(near_mem$dma_server_awaddr),
		      .dma_server_awburst(near_mem$dma_server_awburst),
		      .dma_server_awcache(near_mem$dma_server_awcache),
		      .dma_server_awid(near_mem$dma_server_awid),
		      .dma_server_awlen(near_mem$dma_server_awlen),
		      .dma_server_awlock(near_mem$dma_server_awlock),
		      .dma_server_awprot(near_mem$dma_server_awprot),
		      .dma_server_awqos(near_mem$dma_server_awqos),
		      .dma_server_awregion(near_mem$dma_server_awregion),
		      .dma_server_awsize(near_mem$dma_server_awsize),
		      .dma_server_awvalid(near_mem$dma_server_awvalid),
		      .dma_server_bready(near_mem$dma_server_bready),
		      .dma_server_rready(near_mem$dma_server_rready),
		      .dma_server_wdata(near_mem$dma_server_wdata),
		      .dma_server_wlast(near_mem$dma_server_wlast),
		      .dma_server_wstrb(near_mem$dma_server_wstrb),
		      .dma_server_wvalid(near_mem$dma_server_wvalid),
		      .dmem_req_addr(near_mem$dmem_req_addr),
		      .dmem_req_amo_funct7(near_mem$dmem_req_amo_funct7),
		      .dmem_req_f3(near_mem$dmem_req_f3),
		      .dmem_req_mstatus_MXR(near_mem$dmem_req_mstatus_MXR),
		      .dmem_req_op(near_mem$dmem_req_op),
		      .dmem_req_priv(near_mem$dmem_req_priv),
		      .dmem_req_satp(near_mem$dmem_req_satp),
		      .dmem_req_sstatus_SUM(near_mem$dmem_req_sstatus_SUM),
		      .dmem_req_store_value(near_mem$dmem_req_store_value),
		      .imem_master_arready(near_mem$imem_master_arready),
		      .imem_master_awready(near_mem$imem_master_awready),
		      .imem_master_bid(near_mem$imem_master_bid),
		      .imem_master_bresp(near_mem$imem_master_bresp),
		      .imem_master_bvalid(near_mem$imem_master_bvalid),
		      .imem_master_rdata(near_mem$imem_master_rdata),
		      .imem_master_rid(near_mem$imem_master_rid),
		      .imem_master_rlast(near_mem$imem_master_rlast),
		      .imem_master_rresp(near_mem$imem_master_rresp),
		      .imem_master_rvalid(near_mem$imem_master_rvalid),
		      .imem_master_wready(near_mem$imem_master_wready),
		      .imem_req_addr(near_mem$imem_req_addr),
		      .imem_req_f3(near_mem$imem_req_f3),
		      .imem_req_mstatus_MXR(near_mem$imem_req_mstatus_MXR),
		      .imem_req_priv(near_mem$imem_req_priv),
		      .imem_req_satp(near_mem$imem_req_satp),
		      .imem_req_sstatus_SUM(near_mem$imem_req_sstatus_SUM),
		      .mem_master_arready(near_mem$mem_master_arready),
		      .mem_master_awready(near_mem$mem_master_awready),
		      .mem_master_bid(near_mem$mem_master_bid),
		      .mem_master_bresp(near_mem$mem_master_bresp),
		      .mem_master_bvalid(near_mem$mem_master_bvalid),
		      .mem_master_rdata(near_mem$mem_master_rdata),
		      .mem_master_rid(near_mem$mem_master_rid),
		      .mem_master_rlast(near_mem$mem_master_rlast),
		      .mem_master_rresp(near_mem$mem_master_rresp),
		      .mem_master_rvalid(near_mem$mem_master_rvalid),
		      .mem_master_wready(near_mem$mem_master_wready),
		      .server_fence_request_put(near_mem$server_fence_request_put),
		      .set_watch_tohost_tohost_addr(near_mem$set_watch_tohost_tohost_addr),
		      .set_watch_tohost_watch_tohost(near_mem$set_watch_tohost_watch_tohost),
		      .EN_server_reset_request_put(near_mem$EN_server_reset_request_put),
		      .EN_server_reset_response_get(near_mem$EN_server_reset_response_get),
		      .EN_imem_req(near_mem$EN_imem_req),
		      .EN_dmem_req(near_mem$EN_dmem_req),
		      .EN_server_fence_i_request_put(near_mem$EN_server_fence_i_request_put),
		      .EN_server_fence_i_response_get(near_mem$EN_server_fence_i_response_get),
		      .EN_server_fence_request_put(near_mem$EN_server_fence_request_put),
		      .EN_server_fence_response_get(near_mem$EN_server_fence_response_get),
		      .EN_sfence_vma_server_request_put(near_mem$EN_sfence_vma_server_request_put),
		      .EN_sfence_vma_server_response_get(near_mem$EN_sfence_vma_server_response_get),
		      .EN_set_watch_tohost(near_mem$EN_set_watch_tohost),
		      .EN_ma_ddr4_ready(near_mem$EN_ma_ddr4_ready),
		      .RDY_server_reset_request_put(near_mem$RDY_server_reset_request_put),
		      .RDY_server_reset_response_get(near_mem$RDY_server_reset_response_get),
		      .imem_valid(near_mem$imem_valid),
		      .imem_is_i32_not_i16(near_mem$imem_is_i32_not_i16),
		      .imem_pc(near_mem$imem_pc),
		      .imem_instr(near_mem$imem_instr),
		      .imem_exc(near_mem$imem_exc),
		      .imem_exc_code(near_mem$imem_exc_code),
		      .imem_tval(),
		      .imem_master_awvalid(near_mem$imem_master_awvalid),
		      .imem_master_awid(near_mem$imem_master_awid),
		      .imem_master_awaddr(near_mem$imem_master_awaddr),
		      .imem_master_awlen(near_mem$imem_master_awlen),
		      .imem_master_awsize(near_mem$imem_master_awsize),
		      .imem_master_awburst(near_mem$imem_master_awburst),
		      .imem_master_awlock(near_mem$imem_master_awlock),
		      .imem_master_awcache(near_mem$imem_master_awcache),
		      .imem_master_awprot(near_mem$imem_master_awprot),
		      .imem_master_awqos(near_mem$imem_master_awqos),
		      .imem_master_awregion(near_mem$imem_master_awregion),
		      .imem_master_wvalid(near_mem$imem_master_wvalid),
		      .imem_master_wdata(near_mem$imem_master_wdata),
		      .imem_master_wstrb(near_mem$imem_master_wstrb),
		      .imem_master_wlast(near_mem$imem_master_wlast),
		      .imem_master_bready(near_mem$imem_master_bready),
		      .imem_master_arvalid(near_mem$imem_master_arvalid),
		      .imem_master_arid(near_mem$imem_master_arid),
		      .imem_master_araddr(near_mem$imem_master_araddr),
		      .imem_master_arlen(near_mem$imem_master_arlen),
		      .imem_master_arsize(near_mem$imem_master_arsize),
		      .imem_master_arburst(near_mem$imem_master_arburst),
		      .imem_master_arlock(near_mem$imem_master_arlock),
		      .imem_master_arcache(near_mem$imem_master_arcache),
		      .imem_master_arprot(near_mem$imem_master_arprot),
		      .imem_master_arqos(near_mem$imem_master_arqos),
		      .imem_master_arregion(near_mem$imem_master_arregion),
		      .imem_master_rready(near_mem$imem_master_rready),
		      .dmem_valid(near_mem$dmem_valid),
		      .dmem_word64(near_mem$dmem_word64),
		      .dmem_st_amo_val(),
		      .dmem_exc(near_mem$dmem_exc),
		      .dmem_exc_code(near_mem$dmem_exc_code),
		      .mem_master_awvalid(near_mem$mem_master_awvalid),
		      .mem_master_awid(near_mem$mem_master_awid),
		      .mem_master_awaddr(near_mem$mem_master_awaddr),
		      .mem_master_awlen(near_mem$mem_master_awlen),
		      .mem_master_awsize(near_mem$mem_master_awsize),
		      .mem_master_awburst(near_mem$mem_master_awburst),
		      .mem_master_awlock(near_mem$mem_master_awlock),
		      .mem_master_awcache(near_mem$mem_master_awcache),
		      .mem_master_awprot(near_mem$mem_master_awprot),
		      .mem_master_awqos(near_mem$mem_master_awqos),
		      .mem_master_awregion(near_mem$mem_master_awregion),
		      .mem_master_wvalid(near_mem$mem_master_wvalid),
		      .mem_master_wdata(near_mem$mem_master_wdata),
		      .mem_master_wstrb(near_mem$mem_master_wstrb),
		      .mem_master_wlast(near_mem$mem_master_wlast),
		      .mem_master_bready(near_mem$mem_master_bready),
		      .mem_master_arvalid(near_mem$mem_master_arvalid),
		      .mem_master_arid(near_mem$mem_master_arid),
		      .mem_master_araddr(near_mem$mem_master_araddr),
		      .mem_master_arlen(near_mem$mem_master_arlen),
		      .mem_master_arsize(near_mem$mem_master_arsize),
		      .mem_master_arburst(near_mem$mem_master_arburst),
		      .mem_master_arlock(near_mem$mem_master_arlock),
		      .mem_master_arcache(near_mem$mem_master_arcache),
		      .mem_master_arprot(near_mem$mem_master_arprot),
		      .mem_master_arqos(near_mem$mem_master_arqos),
		      .mem_master_arregion(near_mem$mem_master_arregion),
		      .mem_master_rready(near_mem$mem_master_rready),
		      .RDY_server_fence_i_request_put(near_mem$RDY_server_fence_i_request_put),
		      .RDY_server_fence_i_response_get(near_mem$RDY_server_fence_i_response_get),
		      .RDY_server_fence_request_put(near_mem$RDY_server_fence_request_put),
		      .RDY_server_fence_response_get(near_mem$RDY_server_fence_response_get),
		      .RDY_sfence_vma_server_request_put(near_mem$RDY_sfence_vma_server_request_put),
		      .RDY_sfence_vma_server_response_get(near_mem$RDY_sfence_vma_server_response_get),
		      .dma_server_awready(near_mem$dma_server_awready),
		      .dma_server_wready(near_mem$dma_server_wready),
		      .dma_server_bvalid(near_mem$dma_server_bvalid),
		      .dma_server_bid(near_mem$dma_server_bid),
		      .dma_server_bresp(near_mem$dma_server_bresp),
		      .dma_server_arready(near_mem$dma_server_arready),
		      .dma_server_rvalid(near_mem$dma_server_rvalid),
		      .dma_server_rid(near_mem$dma_server_rid),
		      .dma_server_rdata(near_mem$dma_server_rdata),
		      .dma_server_rresp(near_mem$dma_server_rresp),
		      .dma_server_rlast(near_mem$dma_server_rlast),
		      .RDY_set_watch_tohost(),
		      .mv_tohost_value(near_mem$mv_tohost_value),
		      .RDY_mv_tohost_value(),
		      .RDY_ma_ddr4_ready(),
		      .mv_status(near_mem$mv_status));

  // submodule stage1_f_reset_reqs
  FIFO20 #(.guarded(1'd1)) stage1_f_reset_reqs(.RST(RST_N),
					       .CLK(CLK),
					       .ENQ(stage1_f_reset_reqs$ENQ),
					       .DEQ(stage1_f_reset_reqs$DEQ),
					       .CLR(stage1_f_reset_reqs$CLR),
					       .FULL_N(stage1_f_reset_reqs$FULL_N),
					       .EMPTY_N(stage1_f_reset_reqs$EMPTY_N));

  // submodule stage1_f_reset_rsps
  FIFO20 #(.guarded(1'd1)) stage1_f_reset_rsps(.RST(RST_N),
					       .CLK(CLK),
					       .ENQ(stage1_f_reset_rsps$ENQ),
					       .DEQ(stage1_f_reset_rsps$DEQ),
					       .CLR(stage1_f_reset_rsps$CLR),
					       .FULL_N(stage1_f_reset_rsps$FULL_N),
					       .EMPTY_N(stage1_f_reset_rsps$EMPTY_N));

  // submodule stage2_f_reset_reqs
  FIFO20 #(.guarded(1'd1)) stage2_f_reset_reqs(.RST(RST_N),
					       .CLK(CLK),
					       .ENQ(stage2_f_reset_reqs$ENQ),
					       .DEQ(stage2_f_reset_reqs$DEQ),
					       .CLR(stage2_f_reset_reqs$CLR),
					       .FULL_N(stage2_f_reset_reqs$FULL_N),
					       .EMPTY_N(stage2_f_reset_reqs$EMPTY_N));

  // submodule stage2_f_reset_rsps
  FIFO20 #(.guarded(1'd1)) stage2_f_reset_rsps(.RST(RST_N),
					       .CLK(CLK),
					       .ENQ(stage2_f_reset_rsps$ENQ),
					       .DEQ(stage2_f_reset_rsps$DEQ),
					       .CLR(stage2_f_reset_rsps$CLR),
					       .FULL_N(stage2_f_reset_rsps$FULL_N),
					       .EMPTY_N(stage2_f_reset_rsps$EMPTY_N));

  // submodule stage2_fbox
  mkFBox_Top stage2_fbox(.verbosity(4'd0),
			 .CLK(CLK),
			 .RST_N(RST_N),
			 .req_f7(stage2_fbox$req_f7),
			 .req_opcode(stage2_fbox$req_opcode),
			 .req_rm(stage2_fbox$req_rm),
			 .req_rs2(stage2_fbox$req_rs2),
			 .req_v1(stage2_fbox$req_v1),
			 .req_v2(stage2_fbox$req_v2),
			 .req_v3(stage2_fbox$req_v3),
			 .EN_server_reset_request_put(stage2_fbox$EN_server_reset_request_put),
			 .EN_server_reset_response_get(stage2_fbox$EN_server_reset_response_get),
			 .EN_req(stage2_fbox$EN_req),
			 .RDY_server_reset_request_put(stage2_fbox$RDY_server_reset_request_put),
			 .RDY_server_reset_response_get(stage2_fbox$RDY_server_reset_response_get),
			 .valid(stage2_fbox$valid),
			 .word_fst(stage2_fbox$word_fst),
			 .word_snd(stage2_fbox$word_snd));

  // submodule stage2_mbox
  mkRISCV_MBox stage2_mbox(.CLK(CLK),
			   .RST_N(RST_N),
			   .req_f3(stage2_mbox$req_f3),
			   .req_is_OP_not_OP_32(stage2_mbox$req_is_OP_not_OP_32),
			   .req_v1(stage2_mbox$req_v1),
			   .req_v2(stage2_mbox$req_v2),
			   .set_verbosity_verbosity(stage2_mbox$set_verbosity_verbosity),
			   .EN_set_verbosity(stage2_mbox$EN_set_verbosity),
			   .EN_req_reset(stage2_mbox$EN_req_reset),
			   .EN_rsp_reset(stage2_mbox$EN_rsp_reset),
			   .EN_req(stage2_mbox$EN_req),
			   .RDY_set_verbosity(),
			   .RDY_req_reset(),
			   .RDY_rsp_reset(),
			   .valid(stage2_mbox$valid),
			   .word(stage2_mbox$word));

  // submodule stage3_f_reset_reqs
  FIFO20 #(.guarded(1'd1)) stage3_f_reset_reqs(.RST(RST_N),
					       .CLK(CLK),
					       .ENQ(stage3_f_reset_reqs$ENQ),
					       .DEQ(stage3_f_reset_reqs$DEQ),
					       .CLR(stage3_f_reset_reqs$CLR),
					       .FULL_N(stage3_f_reset_reqs$FULL_N),
					       .EMPTY_N(stage3_f_reset_reqs$EMPTY_N));

  // submodule stage3_f_reset_rsps
  FIFO20 #(.guarded(1'd1)) stage3_f_reset_rsps(.RST(RST_N),
					       .CLK(CLK),
					       .ENQ(stage3_f_reset_rsps$ENQ),
					       .DEQ(stage3_f_reset_rsps$DEQ),
					       .CLR(stage3_f_reset_rsps$CLR),
					       .FULL_N(stage3_f_reset_rsps$FULL_N),
					       .EMPTY_N(stage3_f_reset_rsps$EMPTY_N));

  // submodule stageD_f_reset_reqs
  FIFO20 #(.guarded(1'd1)) stageD_f_reset_reqs(.RST(RST_N),
					       .CLK(CLK),
					       .ENQ(stageD_f_reset_reqs$ENQ),
					       .DEQ(stageD_f_reset_reqs$DEQ),
					       .CLR(stageD_f_reset_reqs$CLR),
					       .FULL_N(stageD_f_reset_reqs$FULL_N),
					       .EMPTY_N(stageD_f_reset_reqs$EMPTY_N));

  // submodule stageD_f_reset_rsps
  FIFO20 #(.guarded(1'd1)) stageD_f_reset_rsps(.RST(RST_N),
					       .CLK(CLK),
					       .ENQ(stageD_f_reset_rsps$ENQ),
					       .DEQ(stageD_f_reset_rsps$DEQ),
					       .CLR(stageD_f_reset_rsps$CLR),
					       .FULL_N(stageD_f_reset_rsps$FULL_N),
					       .EMPTY_N(stageD_f_reset_rsps$EMPTY_N));

  // submodule stageF_branch_predictor
  mkBranch_Predictor stageF_branch_predictor(.CLK(CLK),
					     .RST_N(RST_N),
					     .bp_train_cf_info(stageF_branch_predictor$bp_train_cf_info),
					     .bp_train_instr(stageF_branch_predictor$bp_train_instr),
					     .bp_train_is_i32_not_i16(stageF_branch_predictor$bp_train_is_i32_not_i16),
					     .bp_train_pc(stageF_branch_predictor$bp_train_pc),
					     .predict_req_pc(stageF_branch_predictor$predict_req_pc),
					     .predict_rsp_instr(stageF_branch_predictor$predict_rsp_instr),
					     .predict_rsp_is_i32_not_i16(stageF_branch_predictor$predict_rsp_is_i32_not_i16),
					     .EN_reset(stageF_branch_predictor$EN_reset),
					     .EN_predict_req(stageF_branch_predictor$EN_predict_req),
					     .EN_bp_train(stageF_branch_predictor$EN_bp_train),
					     .RDY_reset(),
					     .RDY_predict_req(stageF_branch_predictor$RDY_predict_req),
					     .predict_rsp(stageF_branch_predictor$predict_rsp),
					     .RDY_bp_train());

  // submodule stageF_f_reset_reqs
  FIFO20 #(.guarded(1'd1)) stageF_f_reset_reqs(.RST(RST_N),
					       .CLK(CLK),
					       .ENQ(stageF_f_reset_reqs$ENQ),
					       .DEQ(stageF_f_reset_reqs$DEQ),
					       .CLR(stageF_f_reset_reqs$CLR),
					       .FULL_N(stageF_f_reset_reqs$FULL_N),
					       .EMPTY_N(stageF_f_reset_reqs$EMPTY_N));

  // submodule stageF_f_reset_rsps
  FIFO20 #(.guarded(1'd1)) stageF_f_reset_rsps(.RST(RST_N),
					       .CLK(CLK),
					       .ENQ(stageF_f_reset_rsps$ENQ),
					       .DEQ(stageF_f_reset_rsps$DEQ),
					       .CLR(stageF_f_reset_rsps$CLR),
					       .FULL_N(stageF_f_reset_rsps$FULL_N),
					       .EMPTY_N(stageF_f_reset_rsps$EMPTY_N));

  // rule RL_rl_show_pipe
  assign CAN_FIRE_RL_rl_show_pipe =
	     NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56 &&
	     rg_state != 4'd0 &&
	     rg_state != 4'd1 &&
	     rg_state != 4'd12 ;
  assign WILL_FIRE_RL_rl_show_pipe = CAN_FIRE_RL_rl_show_pipe ;

  // rule RL_rl_stage1_mip_cmd
  assign CAN_FIRE_RL_rl_stage1_mip_cmd =
	     f_trace_data$FULL_N &&
	     rg_state_7_EQ_3_370_AND_stage1_rg_full_45_AND__ETC___d2385 ;
  assign WILL_FIRE_RL_rl_stage1_mip_cmd = CAN_FIRE_RL_rl_stage1_mip_cmd ;

  // rule RL_rl_stage2_nonpipe
  assign CAN_FIRE_RL_rl_stage2_nonpipe =
	     rg_state == 4'd3 && !stage3_rg_full && stage2_rg_full &&
	     NOT_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ__ETC___d156 ;
  assign WILL_FIRE_RL_rl_stage2_nonpipe = CAN_FIRE_RL_rl_stage2_nonpipe ;

  // rule RL_rl_stage1_trap
  assign CAN_FIRE_RL_rl_stage1_trap =
	     rg_state_7_EQ_3_370_AND_csr_regfile_csr_mip_re_ETC___d3058 &&
	     (!stageF_rg_full ||
	      near_mem$imem_valid &&
	      near_mem_imem_exc__1_OR_NOT_imem_rg_pc_BITS_1__ETC___d2206) ;
  assign WILL_FIRE_RL_rl_stage1_trap = CAN_FIRE_RL_rl_stage1_trap ;

  // rule RL_rl_trap
  assign CAN_FIRE_RL_rl_trap =
	     f_trace_data$FULL_N &&
	     rg_state_7_EQ_4_065_AND_NOT_stageF_rg_full_181_ETC___d3066 ;
  assign WILL_FIRE_RL_rl_trap = CAN_FIRE_RL_rl_trap ;

  // rule RL_rl_stage1_CSRR_W
  assign CAN_FIRE_RL_rl_stage1_CSRR_W = MUX_rg_state$write_1__SEL_10 ;
  assign WILL_FIRE_RL_rl_stage1_CSRR_W = MUX_rg_state$write_1__SEL_10 ;

  // rule RL_rl_stage1_CSRR_W_2
  assign CAN_FIRE_RL_rl_stage1_CSRR_W_2 = MUX_rg_state$write_1__SEL_3 ;
  assign WILL_FIRE_RL_rl_stage1_CSRR_W_2 = MUX_rg_state$write_1__SEL_3 ;

  // rule RL_rl_stage1_CSRR_S_or_C
  assign CAN_FIRE_RL_rl_stage1_CSRR_S_or_C = MUX_rg_state$write_1__SEL_11 ;
  assign WILL_FIRE_RL_rl_stage1_CSRR_S_or_C = MUX_rg_state$write_1__SEL_11 ;

  // rule RL_rl_stage1_CSRR_S_or_C_2
  assign CAN_FIRE_RL_rl_stage1_CSRR_S_or_C_2 = MUX_rg_state$write_1__SEL_4 ;
  assign WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 = MUX_rg_state$write_1__SEL_4 ;

  // rule RL_rl_stage1_restart_after_csrrx
  assign CAN_FIRE_RL_rl_stage1_restart_after_csrrx =
	     (imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_near_mem__ETC___d2341 ||
	      near_mem$imem_instr[17:16] != 2'b11) &&
	     stageF_branch_predictor$RDY_predict_req &&
	     rg_state_7_EQ_8_192_AND_NOT_stageF_rg_full_181_ETC___d3193 ;
  assign WILL_FIRE_RL_rl_stage1_restart_after_csrrx =
	     CAN_FIRE_RL_rl_stage1_restart_after_csrrx ;

  // rule RL_rl_stage1_xRET
  assign CAN_FIRE_RL_rl_stage1_xRET =
	     f_trace_data$FULL_N &&
	     rg_state_7_EQ_3_370_AND_csr_regfile_csr_mip_re_ETC___d3227 ;
  assign WILL_FIRE_RL_rl_stage1_xRET = CAN_FIRE_RL_rl_stage1_xRET ;

  // rule RL_rl_stage1_FENCE_I
  assign CAN_FIRE_RL_rl_stage1_FENCE_I = MUX_rg_state$write_1__SEL_12 ;
  assign WILL_FIRE_RL_rl_stage1_FENCE_I = MUX_rg_state$write_1__SEL_12 ;

  // rule RL_rl_finish_FENCE_I
  assign CAN_FIRE_RL_rl_finish_FENCE_I =
	     imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_near_mem__ETC___d3251 &&
	     rg_state == 4'd9 ;
  assign WILL_FIRE_RL_rl_finish_FENCE_I = CAN_FIRE_RL_rl_finish_FENCE_I ;

  // rule RL_rl_stage1_FENCE
  assign CAN_FIRE_RL_rl_stage1_FENCE = MUX_rg_state$write_1__SEL_13 ;
  assign WILL_FIRE_RL_rl_stage1_FENCE = MUX_rg_state$write_1__SEL_13 ;

  // rule RL_rl_finish_FENCE
  assign CAN_FIRE_RL_rl_finish_FENCE =
	     imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_near_mem__ETC___d3261 &&
	     rg_state == 4'd10 ;
  assign WILL_FIRE_RL_rl_finish_FENCE = CAN_FIRE_RL_rl_finish_FENCE ;

  // rule RL_rl_stage1_SFENCE_VMA
  assign CAN_FIRE_RL_rl_stage1_SFENCE_VMA = MUX_rg_state$write_1__SEL_14 ;
  assign WILL_FIRE_RL_rl_stage1_SFENCE_VMA = MUX_rg_state$write_1__SEL_14 ;

  // rule RL_rl_finish_SFENCE_VMA
  assign CAN_FIRE_RL_rl_finish_SFENCE_VMA =
	     imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_near_mem__ETC___d3271 &&
	     rg_state == 4'd11 ;
  assign WILL_FIRE_RL_rl_finish_SFENCE_VMA =
	     CAN_FIRE_RL_rl_finish_SFENCE_VMA ;

  // rule RL_rl_stage1_WFI
  assign CAN_FIRE_RL_rl_stage1_WFI = MUX_rg_state$write_1__SEL_15 ;
  assign WILL_FIRE_RL_rl_stage1_WFI = MUX_rg_state$write_1__SEL_15 ;

  // rule RL_rl_WFI_count
  assign CAN_FIRE_RL_rl_WFI_count = rg_state == 4'd12 ;
  assign WILL_FIRE_RL_rl_WFI_count =
	     CAN_FIRE_RL_rl_WFI_count && !WILL_FIRE_RL_rl_WFI_resume ;

  // rule RL_rl_WFI_resume
  assign CAN_FIRE_RL_rl_WFI_resume =
	     (imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_near_mem__ETC___d2341 ||
	      near_mem$imem_instr[17:16] != 2'b11) &&
	     stageF_branch_predictor$RDY_predict_req &&
	     rg_state_7_EQ_12_4_AND_csr_regfile_wfi_resume__ETC___d3289 ;
  assign WILL_FIRE_RL_rl_WFI_resume = CAN_FIRE_RL_rl_WFI_resume ;

  // rule RL_rl_reset_from_WFI
  assign CAN_FIRE_RL_rl_reset_from_WFI =
	     rg_state == 4'd12 && f_reset_reqs$EMPTY_N ;
  assign WILL_FIRE_RL_rl_reset_from_WFI = MUX_rg_state$write_1__SEL_5 ;

  // rule RL_rl_trap_fetch
  assign CAN_FIRE_RL_rl_trap_fetch =
	     (imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_near_mem__ETC___d2341 ||
	      near_mem$imem_instr[17:16] != 2'b11) &&
	     stageF_branch_predictor$RDY_predict_req &&
	     rg_state_7_EQ_5_293_AND_NOT_stageF_rg_full_181_ETC___d3294 ;
  assign WILL_FIRE_RL_rl_trap_fetch = CAN_FIRE_RL_rl_trap_fetch ;

  // rule RL_rl_stage1_interrupt
  assign CAN_FIRE_RL_rl_stage1_interrupt =
	     (csr_regfile$interrupt_pending[4] || csr_regfile$nmi_pending) &&
	     rg_state == 4'd3 &&
	     stage1_rg_full_45_AND_NOT_stage1_rg_stage_inpu_ETC___d3302 &&
	     (!stageF_rg_full ||
	      near_mem$imem_valid &&
	      near_mem_imem_exc__1_OR_NOT_imem_rg_pc_BITS_1__ETC___d2206) ;
  assign WILL_FIRE_RL_rl_stage1_interrupt = CAN_FIRE_RL_rl_stage1_interrupt ;

  // rule RL_imem_rl_assert_fail
  assign CAN_FIRE_RL_imem_rl_assert_fail = !near_mem$imem_is_i32_not_i16 ;
  assign WILL_FIRE_RL_imem_rl_assert_fail = CAN_FIRE_RL_imem_rl_assert_fail ;

  // rule RL_rl_reset_complete
  assign CAN_FIRE_RL_rl_reset_complete =
	     gpr_regfile$RDY_server_reset_response_get &&
	     fpr_regfile$RDY_server_reset_response_get &&
	     near_mem$RDY_server_reset_response_get &&
	     csr_regfile$RDY_server_reset_response_get &&
	     stageF_f_reset_rsps_i_notEmpty__331_AND_stageD_ETC___d2351 &&
	     rg_state == 4'd1 ;
  assign WILL_FIRE_RL_rl_reset_complete = MUX_rg_state$write_1__SEL_2 ;

  // rule RL_rl_pipe
  assign CAN_FIRE_RL_rl_pipe =
	     (!stage3_rg_full || f_trace_data$FULL_N) &&
	     IF_csr_regfile_csr_mip_read__380_EQ_rg_prev_mi_ETC___d2431 &&
	     rg_state_7_EQ_3_370_AND_stage3_rg_full_8_OR_st_ETC___d2444 &&
	     (csr_regfile_csr_mip_read__380_EQ_rg_prev_mip_3_ETC___d2453 ||
	      IF_NOT_stage1_rg_full_45_028_OR_NOT_stage1_rg__ETC___d2454 ||
	      stage2_rg_full ||
	      stage3_rg_full) ;
  assign WILL_FIRE_RL_rl_pipe =
	     CAN_FIRE_RL_rl_pipe && !WILL_FIRE_RL_imem_rl_fetch_next_32b &&
	     !WILL_FIRE_RL_rl_stage1_mip_cmd ;

  // rule RL_rl_reset_start
  assign CAN_FIRE_RL_rl_reset_start =
	     gpr_regfile$RDY_server_reset_request_put &&
	     fpr_regfile_RDY_server_reset_request_put__304__ETC___d2322 &&
	     rg_state == 4'd0 ;
  assign WILL_FIRE_RL_rl_reset_start = CAN_FIRE_RL_rl_reset_start ;

  // rule RL_imem_rl_fetch_next_32b
  assign CAN_FIRE_RL_imem_rl_fetch_next_32b =
	     imem_rg_pc[1:0] != 2'b0 && near_mem$imem_valid &&
	     !near_mem$imem_exc &&
	     imem_rg_pc_BITS_63_TO_2_4_EQ_near_mem_imem_pc__ETC___d17 &&
	     near_mem$imem_instr[17:16] == 2'b11 ;
  assign WILL_FIRE_RL_imem_rl_fetch_next_32b =
	     CAN_FIRE_RL_imem_rl_fetch_next_32b ;

  // rule RL_stage3_rl_reset
  assign CAN_FIRE_RL_stage3_rl_reset =
	     stage3_f_reset_reqs$EMPTY_N && stage3_f_reset_rsps$FULL_N ;
  assign WILL_FIRE_RL_stage3_rl_reset = CAN_FIRE_RL_stage3_rl_reset ;

  // rule RL_stage2_rl_reset_end
  assign CAN_FIRE_RL_stage2_rl_reset_end =
	     stage2_fbox$RDY_server_reset_response_get &&
	     stage2_f_reset_rsps$FULL_N &&
	     stage2_rg_resetting ;
  assign WILL_FIRE_RL_stage2_rl_reset_end = CAN_FIRE_RL_stage2_rl_reset_end ;

  // rule RL_stage2_rl_reset_begin
  assign CAN_FIRE_RL_stage2_rl_reset_begin =
	     stage2_fbox$RDY_server_reset_request_put &&
	     stage2_f_reset_reqs$EMPTY_N ;
  assign WILL_FIRE_RL_stage2_rl_reset_begin =
	     CAN_FIRE_RL_stage2_rl_reset_begin ;

  // rule RL_stage1_rl_reset
  assign CAN_FIRE_RL_stage1_rl_reset =
	     stage1_f_reset_reqs$EMPTY_N && stage1_f_reset_rsps$FULL_N ;
  assign WILL_FIRE_RL_stage1_rl_reset = CAN_FIRE_RL_stage1_rl_reset ;

  // rule RL_stageD_rl_reset
  assign CAN_FIRE_RL_stageD_rl_reset =
	     stageD_f_reset_reqs$EMPTY_N && stageD_f_reset_rsps$FULL_N ;
  assign WILL_FIRE_RL_stageD_rl_reset = CAN_FIRE_RL_stageD_rl_reset ;

  // rule RL_stageF_rl_reset
  assign CAN_FIRE_RL_stageF_rl_reset =
	     stageF_f_reset_reqs$EMPTY_N && stageF_f_reset_rsps$FULL_N ;
  assign WILL_FIRE_RL_stageF_rl_reset = CAN_FIRE_RL_stageF_rl_reset ;

  // inputs to muxes for submodule ports
  assign MUX_csr_regfile$mav_csr_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_stage1_CSRR_W_2 &&
	     csr_regfile$access_permitted_1 ;
  assign MUX_f_trace_data$enq_1__SEL_1 =
	     WILL_FIRE_RL_rl_pipe && stage3_rg_full ;
  assign MUX_f_trace_data$enq_1__SEL_3 =
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 &&
	     csr_regfile$access_permitted_2 ;
  assign MUX_f_trace_data$enq_1__SEL_4 =
	     WILL_FIRE_RL_rl_stage1_WFI ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ;
  assign MUX_imem_rg_cache_addr$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ;
  assign MUX_imem_rg_cache_addr$write_1__SEL_2 =
	     WILL_FIRE_RL_rl_pipe &&
	     IF_csr_regfile_csr_mip_read__380_EQ_rg_prev_mi_ETC___d2949 &&
	     NOT_csr_regfile_csr_mip_read__380_EQ_rg_prev_m_ETC___d2968 ;
  assign MUX_rg_instret_reported$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_pipe && stage2_rg_full &&
	     (stage2_rg_stage2[824:822] == 3'd0 ||
	      IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d2404) ;
  assign MUX_rg_next_pc$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_pipe &&
	     csr_regfile_csr_mip_read__380_EQ_rg_prev_mip_3_ETC___d2898 ;
  assign MUX_rg_next_pc$write_1__SEL_4 =
	     WILL_FIRE_RL_rl_stage1_WFI || WILL_FIRE_RL_rl_stage1_FENCE ||
	     WILL_FIRE_RL_rl_stage1_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W ||
	     WILL_FIRE_RL_rl_stage1_SFENCE_VMA ;
  assign MUX_rg_pc_reported$write_1__SEL_4 =
	     WILL_FIRE_RL_rl_stage1_WFI ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_xRET ;
  assign MUX_rg_state$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_pipe &&
	     IF_csr_regfile_csr_mip_read__380_EQ_rg_prev_mi_ETC___d2949 &&
	     csr_regfile_csr_mip_read__380_EQ_rg_prev_mip_3_ETC___d2425 ;
  assign MUX_rg_state$write_1__SEL_2 =
	     CAN_FIRE_RL_rl_reset_complete &&
	     !WILL_FIRE_RL_imem_rl_fetch_next_32b ;
  assign MUX_rg_state$write_1__SEL_3 =
	     (!csr_regfile$access_permitted_1 || f_trace_data$FULL_N) &&
	     rg_state == 4'd6 ;
  assign MUX_rg_state$write_1__SEL_4 =
	     (!csr_regfile$access_permitted_2 || f_trace_data$FULL_N) &&
	     rg_state == 4'd7 ;
  assign MUX_rg_state$write_1__SEL_5 =
	     CAN_FIRE_RL_rl_reset_from_WFI && !WILL_FIRE_RL_rl_WFI_resume ;
  assign MUX_rg_state$write_1__SEL_7 =
	     WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_WFI_resume ;
  assign MUX_rg_state$write_1__SEL_8 =
	     WILL_FIRE_RL_rl_stage1_interrupt ||
	     WILL_FIRE_RL_rl_stage1_trap ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ;
  assign MUX_rg_state$write_1__SEL_9 =
	     WILL_FIRE_RL_rl_stage1_xRET || WILL_FIRE_RL_rl_trap ;
  assign MUX_rg_state$write_1__SEL_10 =
	     rg_state_7_EQ_3_370_AND_csr_regfile_csr_mip_re_ETC___d3115 &&
	     stage1_rg_full &&
	     stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d2450 &&
	     NOT_stage1_rg_stage_input_46_BIT_368_91_29_AND_ETC___d1056 ;
  assign MUX_rg_state$write_1__SEL_11 =
	     rg_state_7_EQ_3_370_AND_csr_regfile_csr_mip_re_ETC___d3115 &&
	     stage1_rg_full &&
	     stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d2450 &&
	     NOT_stage1_rg_stage_input_46_BIT_368_91_29_AND_ETC___d1071 ;
  assign MUX_rg_state$write_1__SEL_12 =
	     near_mem$RDY_server_fence_i_request_put &&
	     rg_state_7_EQ_3_370_AND_csr_regfile_csr_mip_re_ETC___d3246 ;
  assign MUX_rg_state$write_1__SEL_13 =
	     near_mem$RDY_server_fence_request_put &&
	     rg_state_7_EQ_3_370_AND_csr_regfile_csr_mip_re_ETC___d3256 ;
  assign MUX_rg_state$write_1__SEL_14 =
	     near_mem$RDY_sfence_vma_server_request_put &&
	     rg_state_7_EQ_3_370_AND_csr_regfile_csr_mip_re_ETC___d3266 ;
  assign MUX_rg_state$write_1__SEL_15 =
	     f_trace_data$FULL_N &&
	     rg_state_7_EQ_3_370_AND_csr_regfile_csr_mip_re_ETC___d3275 ;
  assign MUX_rg_trap_info$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W ;
  assign MUX_rg_trap_instr$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_stage1_interrupt ||
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W ||
	     WILL_FIRE_RL_rl_stage1_trap ;
  assign MUX_rg_trap_interrupt$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W ||
	     WILL_FIRE_RL_rl_stage1_trap ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ;
  assign MUX_rg_trap_trace_data$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W ||
	     WILL_FIRE_RL_rl_stage1_trap ;
  always@(rg_trap_instr or
	  csr_regfile$read_csr or
	  y__h46103 or
	  IF_csr_regfile_read_csr_rg_trap_instr_091_BITS_ETC___d3178)
  begin
    case (rg_trap_instr[14:12])
      3'b010, 3'b110:
	  MUX_csr_regfile$mav_csr_write_2__VAL_2 =
	      IF_csr_regfile_read_csr_rg_trap_instr_091_BITS_ETC___d3178;
      default: MUX_csr_regfile$mav_csr_write_2__VAL_2 =
		   csr_regfile$read_csr[63:0] & y__h46103;
    endcase
  end
  assign MUX_f_trace_data$enq_1__VAL_1 =
	     { stage3_rg_stage3[426:256],
	       x__h31169,
	       stage3_rg_stage3[191:128],
	       x__h31183,
	       stage3_rg_stage3[63:0] } ;
  assign MUX_f_trace_data$enq_1__VAL_2 =
	     { 5'd16,
	       rg_trap_trace_data[421:325],
	       rg_trap_instr[11:7],
	       csr_regfile$read_csr[63:0],
	       x__h44985,
	       x__h46372,
	       csr_regfile$mav_csr_write[128:65],
	       csr_regfile$mav_csr_write[63:0] } ;
  assign MUX_f_trace_data$enq_1__VAL_3 =
	     { 5'd16,
	       rg_trap_trace_data[421:325],
	       rg_trap_instr[11:7],
	       csr_regfile$read_csr[63:0],
	       x__h46308,
	       x__h46372,
	       csr_regfile$mav_csr_write[128:65],
	       csr_regfile$mav_csr_write[63:0] } ;
  assign MUX_f_trace_data$enq_1__VAL_4 =
	     { IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d2674,
	       alu_outputs_trace_data_pc__h33260,
	       IF_stage1_rg_stage_input_46_BITS_371_TO_370_47_ETC___d2761 } ;
  assign MUX_f_trace_data$enq_1__VAL_6 =
	     { 299'h0EAAAAAAAAAAAAAAA955555554AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA0000000000000344,
	       csr_regfile$csr_mip_read,
	       64'hAAAAAAAAAAAAAAAA } ;
  assign MUX_f_trace_data$enq_1__VAL_7 =
	     { rg_trap_interrupt ? 5'd17 : 5'd14,
	       csr_regfile$csr_trap_actions[193:130],
	       rg_trap_trace_data[357:325],
	       x_rd__h43327,
	       csr_regfile_csr_trap_actions_075_BITS_129_TO_2_ETC___d3087 } ;
  assign MUX_f_trace_data$enq_1__VAL_8 =
	     { 5'd15,
	       csr_regfile$csr_ret_actions[129:66],
	       IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d2688,
	       alu_outputs_trace_data_instr__h33262,
	       td1_rd__h48442,
	       csr_regfile$csr_ret_actions[63:0],
	       256'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA } ;
  assign MUX_imem_rg_cache_addr$write_1__VAL_1 =
	     (near_mem$imem_valid && !near_mem$imem_exc) ?
	       near_mem$imem_pc :
	       64'h0000000000000001 ;
  assign MUX_imem_rg_cache_addr$write_1__VAL_2 =
	     near_mem$imem_exc ? 64'h0000000000000001 : near_mem$imem_pc ;
  assign MUX_imem_rg_tval$write_1__VAL_2 =
	     (NOT_stageF_branch_predictor_predict_rsp_NOT_im_ETC___d2982 &&
	      near_mem$imem_instr[17:16] == 2'b11) ?
	       addr_of_b32___1__h41727 :
	       stageF_branch_predictor$predict_rsp ;
  assign MUX_imem_rg_tval$write_1__VAL_3 =
	     (NOT_rg_next_pc_195_BITS_1_TO_0_196_EQ_0b0_197__ETC___d3203 &&
	      near_mem$imem_instr[17:16] == 2'b11) ?
	       addr_of_b32___1__h56231 :
	       rg_next_pc ;
  assign MUX_imem_rg_tval$write_1__VAL_4 = near_mem$imem_pc + 64'd4 ;
  assign MUX_near_mem$imem_req_2__VAL_2 =
	     (NOT_stageF_branch_predictor_predict_rsp_NOT_im_ETC___d2982 &&
	      near_mem$imem_instr[17:16] == 2'b11) ?
	       addr_of_b32___1__h41727 :
	       addr_of_b32__h41599 ;
  assign MUX_near_mem$imem_req_2__VAL_4 =
	     (NOT_rg_next_pc_195_BITS_1_TO_0_196_EQ_0b0_197__ETC___d3203 &&
	      near_mem$imem_instr[17:16] == 2'b11) ?
	       addr_of_b32___1__h56231 :
	       addr_of_b32__h56103 ;
  assign MUX_rg_state$write_1__VAL_2 = rg_run_on_reset ? 4'd3 : 4'd2 ;
  assign MUX_rg_state$write_1__VAL_3 =
	     csr_regfile$access_permitted_1 ? 4'd8 : 4'd4 ;
  assign MUX_rg_state$write_1__VAL_4 =
	     csr_regfile$access_permitted_2 ? 4'd8 : 4'd4 ;
  assign MUX_rg_trap_info$write_1__VAL_1 =
	     { stage1_rg_stage_input[437:374],
	       4'd2,
	       stage1_rg_stage_input[368] ?
		 stage1_rg_stage_input[363:300] :
		 trap_info_tval__h16637 } ;
  assign MUX_rg_trap_info$write_1__VAL_2 =
	     { value__h8810,
	       near_mem$dmem_exc_code,
	       stage2_rg_stage2[816:753] } ;
  assign MUX_rg_trap_info$write_1__VAL_3 =
	     { stage1_rg_stage_input[437:374],
	       stage1_rg_stage_input[368] ?
		 stage1_rg_stage_input[367:300] :
		 { alu_outputs_exc_code__h13083, trap_info_tval__h16637 } } ;
  assign MUX_rg_trap_info$write_1__VAL_4 =
	     { stage1_rg_stage_input[437:374], x_exc_code__h56527, 64'd0 } ;
  assign MUX_rg_trap_instr$write_1__VAL_1 = stage1_rg_stage_input[299:268] ;
  assign MUX_rg_trap_trace_data$write_1__VAL_2 =
	     { stage2_rg_stage2[426:320],
	       CASE_stage2_rg_stage2_BITS_824_TO_822_1_output_ETC__q34,
	       stage2_rg_stage2[255:128],
	       CASE_stage2_rg_stage2_BITS_824_TO_822_1_IF_sta_ETC__q35 } ;
  assign MUX_rg_wfi_counter$write_1__VAL_1 = rg_wfi_counter + 32'd1 ;
  assign MUX_stage1_rg_full$write_1__VAL_2 =
	     IF_csr_regfile_csr_mip_read__380_EQ_rg_prev_mi_ETC___d2902 &&
	     stageD_rg_full ||
	     IF_csr_regfile_csr_mip_read__380_EQ_rg_prev_mi_ETC___d3003 ;
  assign MUX_stage2_rg_full$write_1__VAL_2 =
	     csr_regfile_csr_mip_read__380_EQ_rg_prev_mip_3_ETC___d2411 ?
	       stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d348 &&
	       (IF_NOT_stage1_rg_full_45_028_OR_NOT_stage1_rg__ETC___d2376 ||
		stage2_rg_stage2[824:822] != 3'd0 &&
		IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d2961 &&
		stage2_rg_full) :
	       stage2_rg_stage2[824:822] != 3'd0 &&
	       IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d2961 &&
	       stage2_rg_full ;
  assign MUX_stage3_rg_full$write_1__VAL_2 =
	     stage2_rg_full &&
	     (stage2_rg_stage2[824:822] == 3'd0 ||
	      IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d2404) ;
  assign MUX_stageD_rg_full$write_1__VAL_2 =
	     IF_csr_regfile_csr_mip_read__380_EQ_rg_prev_mi_ETC___d2949 ||
	     IF_csr_regfile_csr_mip_read__380_EQ_rg_prev_mi_ETC___d2415 &&
	     stageD_rg_full ;
  assign MUX_stageF_rg_full$write_1__VAL_2 =
	     IF_csr_regfile_csr_mip_read__380_EQ_rg_prev_mi_ETC___d2949 ?
	       NOT_csr_regfile_csr_mip_read__380_EQ_rg_prev_m_ETC___d3015 ||
	       IF_csr_regfile_csr_mip_read__380_EQ_rg_prev_mi_ETC___d2415 &&
	       stageD_rg_full :
	       (IF_csr_regfile_csr_mip_read__380_EQ_rg_prev_mi_ETC___d2415 &&
		stageD_rg_full ||
		!near_mem$imem_valid ||
		NOT_near_mem_imem_exc__1_2_AND_imem_rg_pc_BITS_ETC___d2199) &&
	       stageF_rg_full ;

  // register cfg_logdelay
  assign cfg_logdelay$D_IN = set_verbosity_logdelay ;
  assign cfg_logdelay$EN = EN_set_verbosity ;

  // register cfg_verbosity
  assign cfg_verbosity$D_IN = set_verbosity_verbosity ;
  assign cfg_verbosity$EN = EN_set_verbosity ;

  // register imem_rg_cache_addr
  always@(MUX_imem_rg_cache_addr$write_1__SEL_1 or
	  MUX_imem_rg_cache_addr$write_1__VAL_1 or
	  MUX_imem_rg_cache_addr$write_1__SEL_2 or
	  MUX_imem_rg_cache_addr$write_1__VAL_2 or
	  WILL_FIRE_RL_imem_rl_fetch_next_32b or
	  near_mem$imem_pc or MUX_rg_state$write_1__SEL_7)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_imem_rg_cache_addr$write_1__SEL_1:
	  imem_rg_cache_addr$D_IN = MUX_imem_rg_cache_addr$write_1__VAL_1;
      MUX_imem_rg_cache_addr$write_1__SEL_2:
	  imem_rg_cache_addr$D_IN = MUX_imem_rg_cache_addr$write_1__VAL_2;
      WILL_FIRE_RL_imem_rl_fetch_next_32b:
	  imem_rg_cache_addr$D_IN = near_mem$imem_pc;
      MUX_rg_state$write_1__SEL_7:
	  imem_rg_cache_addr$D_IN = MUX_imem_rg_cache_addr$write_1__VAL_1;
      default: imem_rg_cache_addr$D_IN =
		   64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign imem_rg_cache_addr$EN =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     WILL_FIRE_RL_rl_pipe &&
	     IF_csr_regfile_csr_mip_read__380_EQ_rg_prev_mi_ETC___d2949 &&
	     NOT_csr_regfile_csr_mip_read__380_EQ_rg_prev_m_ETC___d2968 ||
	     WILL_FIRE_RL_imem_rl_fetch_next_32b ||
	     WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_WFI_resume ;

  // register imem_rg_cache_b16
  assign imem_rg_cache_b16$D_IN = near_mem$imem_instr[31:16] ;
  assign imem_rg_cache_b16$EN =
	     MUX_rg_state$write_1__SEL_7 && near_mem$imem_valid &&
	     !near_mem$imem_exc ||
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset &&
	     near_mem$imem_valid &&
	     !near_mem$imem_exc ||
	     WILL_FIRE_RL_rl_pipe &&
	     IF_csr_regfile_csr_mip_read__380_EQ_rg_prev_mi_ETC___d2949 &&
	     NOT_csr_regfile_csr_mip_read__380_EQ_rg_prev_m_ETC___d2968 &&
	     !near_mem$imem_exc ||
	     WILL_FIRE_RL_imem_rl_fetch_next_32b ;

  // register imem_rg_f3
  assign imem_rg_f3$D_IN = 3'b010 ;
  assign imem_rg_f3$EN =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     WILL_FIRE_RL_rl_pipe &&
	     IF_csr_regfile_csr_mip_read__380_EQ_rg_prev_mi_ETC___d2949 &&
	     NOT_csr_regfile_csr_mip_read__380_EQ_rg_prev_m_ETC___d2968 ||
	     WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_WFI_resume ;

  // register imem_rg_mstatus_MXR
  assign imem_rg_mstatus_MXR$D_IN = csr_regfile$read_mstatus[19] ;
  assign imem_rg_mstatus_MXR$EN =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     WILL_FIRE_RL_rl_pipe &&
	     IF_csr_regfile_csr_mip_read__380_EQ_rg_prev_mi_ETC___d2949 &&
	     NOT_csr_regfile_csr_mip_read__380_EQ_rg_prev_m_ETC___d2968 ||
	     WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_WFI_resume ;

  // register imem_rg_pc
  always@(MUX_imem_rg_cache_addr$write_1__SEL_1 or
	  MUX_imem_rg_cache_addr$write_1__SEL_2 or
	  stageF_branch_predictor$predict_rsp or
	  MUX_rg_state$write_1__SEL_7 or rg_next_pc)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_imem_rg_cache_addr$write_1__SEL_1: imem_rg_pc$D_IN = 64'd4096;
      MUX_imem_rg_cache_addr$write_1__SEL_2:
	  imem_rg_pc$D_IN = stageF_branch_predictor$predict_rsp;
      MUX_rg_state$write_1__SEL_7: imem_rg_pc$D_IN = rg_next_pc;
      default: imem_rg_pc$D_IN =
		   64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign imem_rg_pc$EN =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     WILL_FIRE_RL_rl_pipe &&
	     IF_csr_regfile_csr_mip_read__380_EQ_rg_prev_mi_ETC___d2949 &&
	     NOT_csr_regfile_csr_mip_read__380_EQ_rg_prev_m_ETC___d2968 ||
	     WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_WFI_resume ;

  // register imem_rg_priv
  assign imem_rg_priv$D_IN = rg_cur_priv ;
  assign imem_rg_priv$EN =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     WILL_FIRE_RL_rl_pipe &&
	     IF_csr_regfile_csr_mip_read__380_EQ_rg_prev_mi_ETC___d2949 &&
	     NOT_csr_regfile_csr_mip_read__380_EQ_rg_prev_m_ETC___d2968 ||
	     WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_WFI_resume ;

  // register imem_rg_satp
  assign imem_rg_satp$D_IN = csr_regfile$read_satp ;
  assign imem_rg_satp$EN =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     WILL_FIRE_RL_rl_pipe &&
	     IF_csr_regfile_csr_mip_read__380_EQ_rg_prev_mi_ETC___d2949 &&
	     NOT_csr_regfile_csr_mip_read__380_EQ_rg_prev_m_ETC___d2968 ||
	     WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_WFI_resume ;

  // register imem_rg_sstatus_SUM
  assign imem_rg_sstatus_SUM$D_IN = csr_regfile$read_sstatus[18] ;
  assign imem_rg_sstatus_SUM$EN =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     WILL_FIRE_RL_rl_pipe &&
	     IF_csr_regfile_csr_mip_read__380_EQ_rg_prev_mi_ETC___d2949 &&
	     NOT_csr_regfile_csr_mip_read__380_EQ_rg_prev_m_ETC___d2968 ||
	     WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_WFI_resume ;

  // register imem_rg_tval
  always@(MUX_imem_rg_cache_addr$write_1__SEL_1 or
	  MUX_imem_rg_cache_addr$write_1__SEL_2 or
	  MUX_imem_rg_tval$write_1__VAL_2 or
	  MUX_rg_state$write_1__SEL_7 or
	  MUX_imem_rg_tval$write_1__VAL_3 or
	  WILL_FIRE_RL_imem_rl_fetch_next_32b or
	  MUX_imem_rg_tval$write_1__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_imem_rg_cache_addr$write_1__SEL_1: imem_rg_tval$D_IN = 64'd4096;
      MUX_imem_rg_cache_addr$write_1__SEL_2:
	  imem_rg_tval$D_IN = MUX_imem_rg_tval$write_1__VAL_2;
      MUX_rg_state$write_1__SEL_7:
	  imem_rg_tval$D_IN = MUX_imem_rg_tval$write_1__VAL_3;
      WILL_FIRE_RL_imem_rl_fetch_next_32b:
	  imem_rg_tval$D_IN = MUX_imem_rg_tval$write_1__VAL_4;
      default: imem_rg_tval$D_IN =
		   64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign imem_rg_tval$EN =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     WILL_FIRE_RL_rl_pipe &&
	     IF_csr_regfile_csr_mip_read__380_EQ_rg_prev_mi_ETC___d2949 &&
	     NOT_csr_regfile_csr_mip_read__380_EQ_rg_prev_m_ETC___d2968 ||
	     WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_imem_rl_fetch_next_32b ;

  // register rg_csr_pc
  assign rg_csr_pc$D_IN = stage1_rg_stage_input[437:374] ;
  assign rg_csr_pc$EN = MUX_rg_trap_info$write_1__SEL_1 ;

  // register rg_csr_val1
  assign rg_csr_val1$D_IN = x_out_data_to_stage2_val1__h10354 ;
  assign rg_csr_val1$EN = MUX_rg_trap_info$write_1__SEL_1 ;

  // register rg_cur_priv
  always@(WILL_FIRE_RL_rl_trap or
	  csr_regfile$csr_trap_actions or
	  WILL_FIRE_RL_rl_stage1_xRET or
	  csr_regfile$csr_ret_actions or WILL_FIRE_RL_rl_reset_start)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_rl_trap:
	  rg_cur_priv$D_IN = csr_regfile$csr_trap_actions[1:0];
      WILL_FIRE_RL_rl_stage1_xRET:
	  rg_cur_priv$D_IN = csr_regfile$csr_ret_actions[65:64];
      WILL_FIRE_RL_rl_reset_start: rg_cur_priv$D_IN = 2'b11;
      default: rg_cur_priv$D_IN = 2'b10 /* unspecified value */ ;
    endcase
  end
  assign rg_cur_priv$EN =
	     WILL_FIRE_RL_rl_trap || WILL_FIRE_RL_rl_stage1_xRET ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_epoch
  always@(MUX_imem_rg_cache_addr$write_1__SEL_1 or
	  new_epoch__h29156 or
	  MUX_rg_state$write_1__SEL_7 or WILL_FIRE_RL_rl_reset_start)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_imem_rg_cache_addr$write_1__SEL_1:
	  rg_epoch$D_IN = new_epoch__h29156;
      MUX_rg_state$write_1__SEL_7: rg_epoch$D_IN = new_epoch__h29156;
      WILL_FIRE_RL_rl_reset_start: rg_epoch$D_IN = 2'd0;
      default: rg_epoch$D_IN = 2'b10 /* unspecified value */ ;
    endcase
  end
  assign rg_epoch$EN =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_instret_reported
  assign rg_instret_reported$D_IN = csr_regfile$read_csr_minstret ;
  assign rg_instret_reported$EN =
	     WILL_FIRE_RL_rl_pipe && stage2_rg_full &&
	     (stage2_rg_stage2[824:822] == 3'd0 ||
	      IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d2404) ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W_2 &&
	     csr_regfile$access_permitted_1 ||
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 &&
	     csr_regfile$access_permitted_2 ||
	     WILL_FIRE_RL_rl_stage1_WFI ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_xRET ||
	     WILL_FIRE_RL_rl_trap ;

  // register rg_mstatus_MXR
  assign rg_mstatus_MXR$D_IN = csr_regfile$read_mstatus[19] ;
  assign rg_mstatus_MXR$EN = MUX_rg_state$write_1__SEL_9 ;

  // register rg_next_pc
  always@(MUX_rg_next_pc$write_1__SEL_1 or
	  x_out_next_pc__h10042 or
	  WILL_FIRE_RL_rl_trap or
	  csr_regfile$csr_trap_actions or
	  WILL_FIRE_RL_rl_stage1_xRET or
	  csr_regfile$csr_ret_actions or MUX_rg_next_pc$write_1__SEL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_rg_next_pc$write_1__SEL_1: rg_next_pc$D_IN = x_out_next_pc__h10042;
      WILL_FIRE_RL_rl_trap:
	  rg_next_pc$D_IN = csr_regfile$csr_trap_actions[193:130];
      WILL_FIRE_RL_rl_stage1_xRET:
	  rg_next_pc$D_IN = csr_regfile$csr_ret_actions[129:66];
      MUX_rg_next_pc$write_1__SEL_4: rg_next_pc$D_IN = x_out_next_pc__h10042;
      default: rg_next_pc$D_IN =
		   64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign rg_next_pc$EN =
	     WILL_FIRE_RL_rl_pipe &&
	     csr_regfile_csr_mip_read__380_EQ_rg_prev_mip_3_ETC___d2898 ||
	     WILL_FIRE_RL_rl_trap ||
	     WILL_FIRE_RL_rl_stage1_xRET ||
	     WILL_FIRE_RL_rl_stage1_WFI ||
	     WILL_FIRE_RL_rl_stage1_FENCE ||
	     WILL_FIRE_RL_rl_stage1_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W ||
	     WILL_FIRE_RL_rl_stage1_SFENCE_VMA ;

  // register rg_pc_reported
  always@(WILL_FIRE_RL_rl_trap or
	  rg_trap_info or
	  MUX_rg_pc_reported$write_1__SEL_4 or
	  stage1_rg_stage_input or
	  MUX_rg_instret_reported$write_1__SEL_1 or
	  stage2_rg_stage2 or
	  MUX_csr_regfile$mav_csr_write_1__SEL_1 or
	  MUX_f_trace_data$enq_1__SEL_3 or rg_csr_pc)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_rl_trap: rg_pc_reported$D_IN = rg_trap_info[131:68];
      MUX_rg_pc_reported$write_1__SEL_4:
	  rg_pc_reported$D_IN = stage1_rg_stage_input[437:374];
      MUX_rg_instret_reported$write_1__SEL_1:
	  rg_pc_reported$D_IN = stage2_rg_stage2[920:857];
      MUX_csr_regfile$mav_csr_write_1__SEL_1 || MUX_f_trace_data$enq_1__SEL_3:
	  rg_pc_reported$D_IN = rg_csr_pc;
      default: rg_pc_reported$D_IN =
		   64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign rg_pc_reported$EN =
	     WILL_FIRE_RL_rl_pipe && stage2_rg_full &&
	     (stage2_rg_stage2[824:822] == 3'd0 ||
	      IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d2404) ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W_2 &&
	     csr_regfile$access_permitted_1 ||
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 &&
	     csr_regfile$access_permitted_2 ||
	     WILL_FIRE_RL_rl_stage1_WFI ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_xRET ||
	     WILL_FIRE_RL_rl_trap ;

  // register rg_prev_mip
  assign rg_prev_mip$D_IN =
	     WILL_FIRE_RL_rl_stage1_mip_cmd ?
	       csr_regfile$csr_mip_read :
	       64'd0 ;
  assign rg_prev_mip$EN =
	     WILL_FIRE_RL_rl_stage1_mip_cmd || WILL_FIRE_RL_rl_reset_start ;

  // register rg_run_on_reset
  assign rg_run_on_reset$D_IN = f_reset_reqs$D_OUT ;
  assign rg_run_on_reset$EN = CAN_FIRE_RL_rl_reset_start ;

  // register rg_sstatus_SUM
  assign rg_sstatus_SUM$D_IN = csr_regfile$read_sstatus[18] ;
  assign rg_sstatus_SUM$EN = MUX_rg_state$write_1__SEL_9 ;

  // register rg_start_CPI_cycles
  assign rg_start_CPI_cycles$D_IN = csr_regfile$read_csr_mcycle ;
  assign rg_start_CPI_cycles$EN = MUX_imem_rg_cache_addr$write_1__SEL_1 ;

  // register rg_start_CPI_instrs
  assign rg_start_CPI_instrs$D_IN = csr_regfile$read_csr_minstret ;
  assign rg_start_CPI_instrs$EN = MUX_imem_rg_cache_addr$write_1__SEL_1 ;

  // register rg_state
  always@(WILL_FIRE_RL_rl_reset_complete or
	  MUX_rg_state$write_1__VAL_2 or
	  WILL_FIRE_RL_rl_stage1_CSRR_W_2 or
	  MUX_rg_state$write_1__VAL_3 or
	  WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 or
	  MUX_rg_state$write_1__VAL_4 or
	  WILL_FIRE_RL_rl_reset_from_WFI or
	  WILL_FIRE_RL_rl_reset_start or
	  MUX_rg_state$write_1__SEL_7 or
	  MUX_rg_state$write_1__SEL_8 or
	  MUX_rg_state$write_1__SEL_1 or
	  MUX_rg_state$write_1__SEL_9 or
	  WILL_FIRE_RL_rl_stage1_CSRR_W or
	  WILL_FIRE_RL_rl_stage1_CSRR_S_or_C or
	  WILL_FIRE_RL_rl_stage1_FENCE_I or
	  WILL_FIRE_RL_rl_stage1_FENCE or
	  WILL_FIRE_RL_rl_stage1_SFENCE_VMA or WILL_FIRE_RL_rl_stage1_WFI)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_rl_reset_complete:
	  rg_state$D_IN = MUX_rg_state$write_1__VAL_2;
      WILL_FIRE_RL_rl_stage1_CSRR_W_2:
	  rg_state$D_IN = MUX_rg_state$write_1__VAL_3;
      WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2:
	  rg_state$D_IN = MUX_rg_state$write_1__VAL_4;
      WILL_FIRE_RL_rl_reset_from_WFI: rg_state$D_IN = 4'd0;
      WILL_FIRE_RL_rl_reset_start: rg_state$D_IN = 4'd1;
      MUX_rg_state$write_1__SEL_7: rg_state$D_IN = 4'd3;
      MUX_rg_state$write_1__SEL_8: rg_state$D_IN = 4'd4;
      MUX_rg_state$write_1__SEL_1 || MUX_rg_state$write_1__SEL_9:
	  rg_state$D_IN = 4'd5;
      WILL_FIRE_RL_rl_stage1_CSRR_W: rg_state$D_IN = 4'd6;
      WILL_FIRE_RL_rl_stage1_CSRR_S_or_C: rg_state$D_IN = 4'd7;
      WILL_FIRE_RL_rl_stage1_FENCE_I: rg_state$D_IN = 4'd9;
      WILL_FIRE_RL_rl_stage1_FENCE: rg_state$D_IN = 4'd10;
      WILL_FIRE_RL_rl_stage1_SFENCE_VMA: rg_state$D_IN = 4'd11;
      WILL_FIRE_RL_rl_stage1_WFI: rg_state$D_IN = 4'd12;
      default: rg_state$D_IN = 4'b1010 /* unspecified value */ ;
    endcase
  end
  assign rg_state$EN =
	     WILL_FIRE_RL_rl_pipe &&
	     IF_csr_regfile_csr_mip_read__380_EQ_rg_prev_mi_ETC___d2949 &&
	     csr_regfile_csr_mip_read__380_EQ_rg_prev_mip_3_ETC___d2425 ||
	     WILL_FIRE_RL_rl_reset_complete ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W_2 ||
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 ||
	     WILL_FIRE_RL_rl_reset_from_WFI ||
	     WILL_FIRE_RL_rl_reset_start ||
	     WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_stage1_interrupt ||
	     WILL_FIRE_RL_rl_stage1_trap ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ||
	     WILL_FIRE_RL_rl_stage1_xRET ||
	     WILL_FIRE_RL_rl_trap ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W ||
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C ||
	     WILL_FIRE_RL_rl_stage1_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_FENCE ||
	     WILL_FIRE_RL_rl_stage1_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_stage1_WFI ;

  // register rg_trap_info
  always@(MUX_rg_trap_info$write_1__SEL_1 or
	  MUX_rg_trap_info$write_1__VAL_1 or
	  WILL_FIRE_RL_rl_stage2_nonpipe or
	  MUX_rg_trap_info$write_1__VAL_2 or
	  WILL_FIRE_RL_rl_stage1_trap or
	  MUX_rg_trap_info$write_1__VAL_3 or
	  WILL_FIRE_RL_rl_stage1_interrupt or MUX_rg_trap_info$write_1__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_rg_trap_info$write_1__SEL_1:
	  rg_trap_info$D_IN = MUX_rg_trap_info$write_1__VAL_1;
      WILL_FIRE_RL_rl_stage2_nonpipe:
	  rg_trap_info$D_IN = MUX_rg_trap_info$write_1__VAL_2;
      WILL_FIRE_RL_rl_stage1_trap:
	  rg_trap_info$D_IN = MUX_rg_trap_info$write_1__VAL_3;
      WILL_FIRE_RL_rl_stage1_interrupt:
	  rg_trap_info$D_IN = MUX_rg_trap_info$write_1__VAL_4;
      default: rg_trap_info$D_IN =
		   132'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign rg_trap_info$EN =
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ||
	     WILL_FIRE_RL_rl_stage1_trap ||
	     WILL_FIRE_RL_rl_stage1_interrupt ;

  // register rg_trap_instr
  assign rg_trap_instr$D_IN =
	     MUX_rg_trap_instr$write_1__SEL_1 ?
	       stage1_rg_stage_input[299:268] :
	       stage2_rg_stage2[856:825] ;
  assign rg_trap_instr$EN =
	     WILL_FIRE_RL_rl_stage1_interrupt ||
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W ||
	     WILL_FIRE_RL_rl_stage1_trap ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ;

  // register rg_trap_interrupt
  assign rg_trap_interrupt$D_IN = !MUX_rg_trap_interrupt$write_1__SEL_1 ;
  assign rg_trap_interrupt$EN =
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W ||
	     WILL_FIRE_RL_rl_stage1_trap ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ||
	     WILL_FIRE_RL_rl_stage1_interrupt ;

  // register rg_trap_trace_data
  assign rg_trap_trace_data$D_IN =
	     MUX_rg_trap_trace_data$write_1__SEL_1 ?
	       MUX_f_trace_data$enq_1__VAL_4 :
	       MUX_rg_trap_trace_data$write_1__VAL_2 ;
  assign rg_trap_trace_data$EN = MUX_rg_trap_interrupt$write_1__SEL_1 ;

  // register rg_wfi_counter
  assign rg_wfi_counter$D_IN =
	     WILL_FIRE_RL_rl_WFI_count ?
	       MUX_rg_wfi_counter$write_1__VAL_1 :
	       32'd1 ;
  assign rg_wfi_counter$EN =
	     WILL_FIRE_RL_rl_WFI_count || WILL_FIRE_RL_rl_stage1_WFI ;

  // register stage1_rg_full
  always@(WILL_FIRE_RL_stage1_rl_reset or
	  WILL_FIRE_RL_rl_pipe or
	  MUX_stage1_rg_full$write_1__VAL_2 or
	  MUX_imem_rg_cache_addr$write_1__SEL_1 or
	  WILL_FIRE_RL_rl_stage1_WFI or
	  WILL_FIRE_RL_rl_finish_SFENCE_VMA or
	  WILL_FIRE_RL_rl_finish_FENCE or
	  WILL_FIRE_RL_rl_finish_FENCE_I or
	  WILL_FIRE_RL_rl_stage1_xRET or
	  WILL_FIRE_RL_rl_stage1_restart_after_csrrx or WILL_FIRE_RL_rl_trap)
  case (1'b1)
    WILL_FIRE_RL_stage1_rl_reset: stage1_rg_full$D_IN = 1'd0;
    WILL_FIRE_RL_rl_pipe:
	stage1_rg_full$D_IN = MUX_stage1_rg_full$write_1__VAL_2;
    MUX_imem_rg_cache_addr$write_1__SEL_1 || WILL_FIRE_RL_rl_stage1_WFI ||
    WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
    WILL_FIRE_RL_rl_finish_FENCE ||
    WILL_FIRE_RL_rl_finish_FENCE_I ||
    WILL_FIRE_RL_rl_stage1_xRET ||
    WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
    WILL_FIRE_RL_rl_trap:
	stage1_rg_full$D_IN = 1'd0;
    default: stage1_rg_full$D_IN = 1'b0 /* unspecified value */ ;
  endcase
  assign stage1_rg_full$EN =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     WILL_FIRE_RL_rl_pipe ||
	     WILL_FIRE_RL_rl_stage1_WFI ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_xRET ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_trap ||
	     WILL_FIRE_RL_stage1_rl_reset ;

  // register stage1_rg_stage_input
  assign stage1_rg_stage_input$D_IN =
	     { stageD_rg_data[233:170],
	       stageD_rg_data[167:166],
	       stageD_rg_data[169:168],
	       stageD_rg_data[165:96],
	       _theResult____h5683,
	       stageD_rg_data[79:0],
	       _theResult____h5683[6:0],
	       _theResult____h5683[11:7],
	       _theResult____h5683[19:15],
	       _theResult____h5683[24:20],
	       _theResult____h5683[31:27],
	       _theResult____h5683[31:20],
	       _theResult____h5683[14:12],
	       _theResult____h5683[31:27],
	       _theResult____h5683[31:25],
	       decoded_instr_funct10__h39631,
	       _theResult____h5683[31:20],
	       decoded_instr_imm12_S__h39633,
	       decoded_instr_imm13_B__h39634,
	       _theResult____h5683[31:12],
	       decoded_instr_imm13_J__h39636,
	       _theResult____h5683[27:20],
	       _theResult____h5683[26:25],
	       IF_IF_stageD_rg_data_754_BIT_165_757_THEN_stag_ETC___d2942,
	       IF_IF_stageD_rg_data_754_BIT_165_757_THEN_stag_ETC___d2942,
	       _theResult____h5683 } ;
  assign stage1_rg_stage_input$EN =
	     WILL_FIRE_RL_rl_pipe &&
	     IF_csr_regfile_csr_mip_read__380_EQ_rg_prev_mi_ETC___d2902 &&
	     stageD_rg_full ;

  // register stage2_rg_full
  always@(WILL_FIRE_RL_stage2_rl_reset_begin or
	  WILL_FIRE_RL_rl_pipe or
	  MUX_stage2_rg_full$write_1__VAL_2 or
	  MUX_imem_rg_cache_addr$write_1__SEL_1 or WILL_FIRE_RL_rl_trap)
  case (1'b1)
    WILL_FIRE_RL_stage2_rl_reset_begin: stage2_rg_full$D_IN = 1'd0;
    WILL_FIRE_RL_rl_pipe:
	stage2_rg_full$D_IN = MUX_stage2_rg_full$write_1__VAL_2;
    MUX_imem_rg_cache_addr$write_1__SEL_1 || WILL_FIRE_RL_rl_trap:
	stage2_rg_full$D_IN = 1'd0;
    default: stage2_rg_full$D_IN = 1'b0 /* unspecified value */ ;
  endcase
  assign stage2_rg_full$EN =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     WILL_FIRE_RL_rl_pipe ||
	     WILL_FIRE_RL_rl_trap ||
	     WILL_FIRE_RL_stage2_rl_reset_begin ;

  // register stage2_rg_resetting
  assign stage2_rg_resetting$D_IN = WILL_FIRE_RL_stage2_rl_reset_begin ;
  assign stage2_rg_resetting$EN =
	     WILL_FIRE_RL_stage2_rl_reset_end ||
	     WILL_FIRE_RL_stage2_rl_reset_begin ;

  // register stage2_rg_stage2
  assign stage2_rg_stage2$D_IN =
	     { rg_cur_priv,
	       stage1_rg_stage_input[437:374],
	       IF_stage1_rg_stage_input_46_BITS_371_TO_370_47_ETC___d2769 } ;
  assign stage2_rg_stage2$EN =
	     WILL_FIRE_RL_rl_pipe &&
	     csr_regfile_csr_mip_read__380_EQ_rg_prev_mip_3_ETC___d2555 ;

  // register stage3_rg_full
  always@(WILL_FIRE_RL_stage3_rl_reset or
	  WILL_FIRE_RL_rl_pipe or
	  MUX_stage3_rg_full$write_1__VAL_2 or
	  MUX_imem_rg_cache_addr$write_1__SEL_1)
  case (1'b1)
    WILL_FIRE_RL_stage3_rl_reset: stage3_rg_full$D_IN = 1'd0;
    WILL_FIRE_RL_rl_pipe:
	stage3_rg_full$D_IN = MUX_stage3_rg_full$write_1__VAL_2;
    MUX_imem_rg_cache_addr$write_1__SEL_1: stage3_rg_full$D_IN = 1'd0;
    default: stage3_rg_full$D_IN = 1'b0 /* unspecified value */ ;
  endcase
  assign stage3_rg_full$EN =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     WILL_FIRE_RL_rl_pipe ||
	     WILL_FIRE_RL_stage3_rl_reset ;

  // register stage3_rg_stage3
  assign stage3_rg_stage3$D_IN =
	     { stage2_rg_stage2[920:825],
	       stage2_rg_stage2[922:921],
	       1'd1,
	       x_out_data_to_stage3_rd__h8411,
	       x_out_data_to_stage3_rd_val__h8412,
	       stage2_rg_stage2[824:822] != 3'd0 &&
	       stage2_rg_stage2[824:822] != 3'd1 &&
	       stage2_rg_stage2[824:822] != 3'd4 &&
	       stage2_rg_stage2[824:822] != 3'd2 &&
	       stage2_rg_stage2[824:822] != 3'd3,
	       stage2_rg_stage2[824:822] != 3'd0 &&
	       CASE_stage2_rg_stage2_BITS_824_TO_822_1_stage2_ETC__q6,
	       x_out_data_to_stage3_fpr_flags__h8415,
	       x_out_data_to_stage3_frd_val__h8416,
	       stage2_rg_stage2[426:320],
	       IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_0_ETC___d2513 } ;
  assign stage3_rg_stage3$EN = MUX_rg_instret_reported$write_1__SEL_1 ;

  // register stageD_rg_data
  assign stageD_rg_data$D_IN =
	     { imem_rg_pc,
	       stageF_rg_epoch,
	       stageF_rg_priv,
	       NOT_imem_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_rg__ETC___d2159 ||
	       imem_rg_pc[1:0] == 2'b0 &&
	       imem_rg_pc_BITS_63_TO_2_4_EQ_near_mem_imem_pc__ETC___d17 &&
	       near_mem$imem_instr[1:0] == 2'b11,
	       near_mem$imem_exc,
	       near_mem$imem_exc_code,
	       imem_rg_tval,
	       d_instr__h27420,
	       stageF_branch_predictor$predict_rsp } ;
  assign stageD_rg_data$EN =
	     WILL_FIRE_RL_rl_pipe &&
	     IF_csr_regfile_csr_mip_read__380_EQ_rg_prev_mi_ETC___d2949 ;

  // register stageD_rg_full
  always@(WILL_FIRE_RL_stageD_rl_reset or
	  WILL_FIRE_RL_rl_pipe or
	  MUX_stageD_rg_full$write_1__VAL_2 or
	  MUX_imem_rg_cache_addr$write_1__SEL_1 or
	  WILL_FIRE_RL_rl_trap_fetch or
	  WILL_FIRE_RL_rl_WFI_resume or
	  WILL_FIRE_RL_rl_stage1_WFI or
	  WILL_FIRE_RL_rl_finish_SFENCE_VMA or
	  WILL_FIRE_RL_rl_finish_FENCE or
	  WILL_FIRE_RL_rl_finish_FENCE_I or
	  WILL_FIRE_RL_rl_stage1_xRET or
	  WILL_FIRE_RL_rl_stage1_restart_after_csrrx or WILL_FIRE_RL_rl_trap)
  case (1'b1)
    WILL_FIRE_RL_stageD_rl_reset: stageD_rg_full$D_IN = 1'd0;
    WILL_FIRE_RL_rl_pipe:
	stageD_rg_full$D_IN = MUX_stageD_rg_full$write_1__VAL_2;
    MUX_imem_rg_cache_addr$write_1__SEL_1 || WILL_FIRE_RL_rl_trap_fetch ||
    WILL_FIRE_RL_rl_WFI_resume ||
    WILL_FIRE_RL_rl_stage1_WFI ||
    WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
    WILL_FIRE_RL_rl_finish_FENCE ||
    WILL_FIRE_RL_rl_finish_FENCE_I ||
    WILL_FIRE_RL_rl_stage1_xRET ||
    WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
    WILL_FIRE_RL_rl_trap:
	stageD_rg_full$D_IN = 1'd0;
    default: stageD_rg_full$D_IN = 1'b0 /* unspecified value */ ;
  endcase
  assign stageD_rg_full$EN =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     WILL_FIRE_RL_rl_pipe ||
	     WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_stage1_WFI ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_xRET ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_trap ||
	     WILL_FIRE_RL_stageD_rl_reset ||
	     WILL_FIRE_RL_rl_WFI_resume ;

  // register stageF_rg_epoch
  always@(WILL_FIRE_RL_stageF_rl_reset or
	  MUX_imem_rg_cache_addr$write_1__SEL_2 or
	  stageF_rg_epoch or
	  MUX_imem_rg_cache_addr$write_1__SEL_1 or
	  new_epoch__h29156 or
	  WILL_FIRE_RL_rl_trap_fetch or
	  WILL_FIRE_RL_rl_WFI_resume or
	  WILL_FIRE_RL_rl_finish_SFENCE_VMA or
	  WILL_FIRE_RL_rl_finish_FENCE or
	  WILL_FIRE_RL_rl_finish_FENCE_I or
	  WILL_FIRE_RL_rl_stage1_restart_after_csrrx)
  case (1'b1)
    WILL_FIRE_RL_stageF_rl_reset: stageF_rg_epoch$D_IN = 2'd0;
    MUX_imem_rg_cache_addr$write_1__SEL_2:
	stageF_rg_epoch$D_IN = stageF_rg_epoch;
    MUX_imem_rg_cache_addr$write_1__SEL_1:
	stageF_rg_epoch$D_IN = new_epoch__h29156;
    WILL_FIRE_RL_rl_trap_fetch: stageF_rg_epoch$D_IN = new_epoch__h29156;
    WILL_FIRE_RL_rl_WFI_resume: stageF_rg_epoch$D_IN = new_epoch__h29156;
    WILL_FIRE_RL_rl_finish_SFENCE_VMA:
	stageF_rg_epoch$D_IN = new_epoch__h29156;
    WILL_FIRE_RL_rl_finish_FENCE: stageF_rg_epoch$D_IN = new_epoch__h29156;
    WILL_FIRE_RL_rl_finish_FENCE_I: stageF_rg_epoch$D_IN = new_epoch__h29156;
    WILL_FIRE_RL_rl_stage1_restart_after_csrrx:
	stageF_rg_epoch$D_IN = new_epoch__h29156;
    default: stageF_rg_epoch$D_IN = 2'b10 /* unspecified value */ ;
  endcase
  assign stageF_rg_epoch$EN =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     WILL_FIRE_RL_rl_pipe &&
	     IF_csr_regfile_csr_mip_read__380_EQ_rg_prev_mi_ETC___d2949 &&
	     NOT_csr_regfile_csr_mip_read__380_EQ_rg_prev_m_ETC___d2968 ||
	     WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_stageF_rl_reset ;

  // register stageF_rg_full
  always@(WILL_FIRE_RL_stageF_rl_reset or
	  WILL_FIRE_RL_rl_pipe or
	  MUX_stageF_rg_full$write_1__VAL_2 or
	  MUX_imem_rg_cache_addr$write_1__SEL_1 or
	  WILL_FIRE_RL_rl_trap_fetch or
	  WILL_FIRE_RL_rl_WFI_resume or
	  WILL_FIRE_RL_rl_finish_SFENCE_VMA or
	  WILL_FIRE_RL_rl_finish_FENCE or
	  WILL_FIRE_RL_rl_finish_FENCE_I or
	  WILL_FIRE_RL_rl_stage1_restart_after_csrrx)
  case (1'b1)
    WILL_FIRE_RL_stageF_rl_reset: stageF_rg_full$D_IN = 1'd0;
    WILL_FIRE_RL_rl_pipe:
	stageF_rg_full$D_IN = MUX_stageF_rg_full$write_1__VAL_2;
    MUX_imem_rg_cache_addr$write_1__SEL_1 || WILL_FIRE_RL_rl_trap_fetch ||
    WILL_FIRE_RL_rl_WFI_resume ||
    WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
    WILL_FIRE_RL_rl_finish_FENCE ||
    WILL_FIRE_RL_rl_finish_FENCE_I ||
    WILL_FIRE_RL_rl_stage1_restart_after_csrrx:
	stageF_rg_full$D_IN = 1'd1;
    default: stageF_rg_full$D_IN = 1'b0 /* unspecified value */ ;
  endcase
  assign stageF_rg_full$EN =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     WILL_FIRE_RL_rl_pipe ||
	     WILL_FIRE_RL_stageF_rl_reset ||
	     WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_WFI_resume ;

  // register stageF_rg_priv
  assign stageF_rg_priv$D_IN = rg_cur_priv ;
  assign stageF_rg_priv$EN =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     WILL_FIRE_RL_rl_pipe &&
	     IF_csr_regfile_csr_mip_read__380_EQ_rg_prev_mi_ETC___d2949 &&
	     NOT_csr_regfile_csr_mip_read__380_EQ_rg_prev_m_ETC___d2968 ||
	     WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_WFI_resume ;

  // submodule csr_regfile
  assign csr_regfile$access_permitted_1_csr_addr = rg_trap_instr[31:20] ;
  assign csr_regfile$access_permitted_1_priv = rg_cur_priv ;
  assign csr_regfile$access_permitted_1_read_not_write = 1'd0 ;
  assign csr_regfile$access_permitted_2_csr_addr = rg_trap_instr[31:20] ;
  assign csr_regfile$access_permitted_2_priv = rg_cur_priv ;
  assign csr_regfile$access_permitted_2_read_not_write =
	     rs1_val__h45825 == 64'd0 ;
  assign csr_regfile$csr_counter_read_fault_csr_addr = 12'h0 ;
  assign csr_regfile$csr_counter_read_fault_priv = 2'h0 ;
  assign csr_regfile$csr_ret_actions_from_priv =
	     (stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d348 &&
	      NOT_stage1_rg_stage_input_46_BIT_368_91_29_AND_ETC___d3212) ?
	       2'b11 :
	       ((stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d348 &&
		 !stage1_rg_stage_input[368] &&
		 stage1_rg_stage_input_46_BITS_187_TO_181_92_EQ_ETC___d3220) ?
		  2'b01 :
		  2'b0) ;
  assign csr_regfile$csr_trap_actions_exc_code = rg_trap_info[67:64] ;
  assign csr_regfile$csr_trap_actions_from_priv = rg_cur_priv ;
  assign csr_regfile$csr_trap_actions_interrupt =
	     rg_trap_interrupt && !csr_regfile$nmi_pending ;
  assign csr_regfile$csr_trap_actions_nmi =
	     rg_trap_interrupt && csr_regfile$nmi_pending ;
  assign csr_regfile$csr_trap_actions_pc = rg_trap_info[131:68] ;
  assign csr_regfile$csr_trap_actions_xtval = rg_trap_info[63:0] ;
  assign csr_regfile$interrupt_pending_cur_priv = rg_cur_priv ;
  assign csr_regfile$m_external_interrupt_req_set_not_clear =
	     m_external_interrupt_req_set_not_clear ;
  assign csr_regfile$ma_set_csr_time_t = ma_set_csr_time_t ;
  assign csr_regfile$ma_update_fcsr_fflags_flags = stage3_rg_stage3[495:491] ;
  assign csr_regfile$ma_update_mstatus_fs_fs = 2'h3 ;
  assign csr_regfile$mav_csr_write_csr_addr = rg_trap_instr[31:20] ;
  assign csr_regfile$mav_csr_write_word =
	     MUX_csr_regfile$mav_csr_write_1__SEL_1 ?
	       rs1_val__h44544 :
	       MUX_csr_regfile$mav_csr_write_2__VAL_2 ;
  assign csr_regfile$mav_read_csr_csr_addr = 12'h0 ;
  assign csr_regfile$mv_update_fcsr_fflags_flags = stage3_rg_stage3[495:491] ;
  assign csr_regfile$mv_update_mstatus_fs_fs = 2'h3 ;
  assign csr_regfile$nmi_req_set_not_clear = nmi_req_set_not_clear ;
  assign csr_regfile$read_csr_csr_addr = rg_trap_instr[31:20] ;
  assign csr_regfile$read_csr_port2_csr_addr = 12'h0 ;
  assign csr_regfile$s_external_interrupt_req_set_not_clear =
	     s_external_interrupt_req_set_not_clear ;
  assign csr_regfile$software_interrupt_req_set_not_clear =
	     software_interrupt_req_set_not_clear ;
  assign csr_regfile$timer_interrupt_req_set_not_clear =
	     timer_interrupt_req_set_not_clear ;
  assign csr_regfile$EN_server_reset_request_put =
	     CAN_FIRE_RL_rl_reset_start ;
  assign csr_regfile$EN_server_reset_response_get =
	     MUX_rg_state$write_1__SEL_2 ;
  assign csr_regfile$EN_mav_read_csr = 1'b0 ;
  assign csr_regfile$EN_mav_csr_write =
	     WILL_FIRE_RL_rl_stage1_CSRR_W_2 &&
	     csr_regfile$access_permitted_1 ||
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 &&
	     csr_regfile$access_permitted_2 &&
	     rg_trap_instr[19:15] != 5'd0 ;
  assign csr_regfile$EN_ma_update_fcsr_fflags =
	     WILL_FIRE_RL_rl_pipe && stage3_rg_full &&
	     stage3_rg_stage3[567] &&
	     stage3_rg_stage3[497] ;
  assign csr_regfile$EN_ma_update_mstatus_fs =
	     WILL_FIRE_RL_rl_pipe && stage3_rg_full &&
	     stage3_rg_stage3[567] &&
	     (stage3_rg_stage3[497] || stage3_rg_stage3[496]) ;
  assign csr_regfile$EN_csr_trap_actions = CAN_FIRE_RL_rl_trap ;
  assign csr_regfile$EN_csr_ret_actions = CAN_FIRE_RL_rl_stage1_xRET ;
  assign csr_regfile$EN_csr_minstret_incr =
	     WILL_FIRE_RL_rl_pipe && stage2_rg_full &&
	     (stage2_rg_stage2[824:822] == 3'd0 ||
	      IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d2404) ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W_2 &&
	     csr_regfile$access_permitted_1 ||
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 &&
	     csr_regfile$access_permitted_2 ||
	     WILL_FIRE_RL_rl_stage1_WFI ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_xRET ;
  assign csr_regfile$EN_debug = 1'b0 ;

  // submodule f_reset_reqs
  assign f_reset_reqs$D_IN = hart0_server_reset_request_put ;
  assign f_reset_reqs$ENQ = EN_hart0_server_reset_request_put ;
  assign f_reset_reqs$DEQ =
	     gpr_regfile$RDY_server_reset_request_put &&
	     fpr_regfile_RDY_server_reset_request_put__304__ETC___d2322 &&
	     rg_state == 4'd0 ;
  assign f_reset_reqs$CLR = 1'b0 ;

  // submodule f_reset_rsps
  assign f_reset_rsps$D_IN = rg_run_on_reset ;
  assign f_reset_rsps$ENQ = MUX_rg_state$write_1__SEL_2 ;
  assign f_reset_rsps$DEQ = EN_hart0_server_reset_response_get ;
  assign f_reset_rsps$CLR = 1'b0 ;

  // submodule f_trace_data
  always@(MUX_f_trace_data$enq_1__SEL_1 or
	  MUX_f_trace_data$enq_1__VAL_1 or
	  MUX_csr_regfile$mav_csr_write_1__SEL_1 or
	  MUX_f_trace_data$enq_1__VAL_2 or
	  MUX_f_trace_data$enq_1__SEL_3 or
	  MUX_f_trace_data$enq_1__VAL_3 or
	  MUX_f_trace_data$enq_1__SEL_4 or
	  MUX_f_trace_data$enq_1__VAL_4 or
	  WILL_FIRE_RL_rl_reset_start or
	  WILL_FIRE_RL_rl_stage1_mip_cmd or
	  MUX_f_trace_data$enq_1__VAL_6 or
	  WILL_FIRE_RL_rl_trap or
	  MUX_f_trace_data$enq_1__VAL_7 or
	  WILL_FIRE_RL_rl_stage1_xRET or MUX_f_trace_data$enq_1__VAL_8)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_f_trace_data$enq_1__SEL_1:
	  f_trace_data$D_IN = MUX_f_trace_data$enq_1__VAL_1;
      MUX_csr_regfile$mav_csr_write_1__SEL_1:
	  f_trace_data$D_IN = MUX_f_trace_data$enq_1__VAL_2;
      MUX_f_trace_data$enq_1__SEL_3:
	  f_trace_data$D_IN = MUX_f_trace_data$enq_1__VAL_3;
      MUX_f_trace_data$enq_1__SEL_4:
	  f_trace_data$D_IN = MUX_f_trace_data$enq_1__VAL_4;
      WILL_FIRE_RL_rl_reset_start:
	  f_trace_data$D_IN =
	      427'h02AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
      WILL_FIRE_RL_rl_stage1_mip_cmd:
	  f_trace_data$D_IN = MUX_f_trace_data$enq_1__VAL_6;
      WILL_FIRE_RL_rl_trap: f_trace_data$D_IN = MUX_f_trace_data$enq_1__VAL_7;
      WILL_FIRE_RL_rl_stage1_xRET:
	  f_trace_data$D_IN = MUX_f_trace_data$enq_1__VAL_8;
      default: f_trace_data$D_IN =
		   427'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign f_trace_data$ENQ =
	     WILL_FIRE_RL_rl_pipe && stage3_rg_full ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W_2 &&
	     csr_regfile$access_permitted_1 ||
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 &&
	     csr_regfile$access_permitted_2 ||
	     WILL_FIRE_RL_rl_stage1_WFI ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_reset_start ||
	     WILL_FIRE_RL_rl_stage1_mip_cmd ||
	     WILL_FIRE_RL_rl_trap ||
	     WILL_FIRE_RL_rl_stage1_xRET ;
  assign f_trace_data$DEQ = EN_trace_data_out_get ;
  assign f_trace_data$CLR = 1'b0 ;

  // submodule fpr_regfile
  assign fpr_regfile$read_rs1_port2_rs1 = 5'h0 ;
  assign fpr_regfile$read_rs1_rs1 = stage1_rg_stage_input[175:171] ;
  assign fpr_regfile$read_rs2_rs2 = stage1_rg_stage_input[170:166] ;
  assign fpr_regfile$read_rs3_rs3 = stage1_rg_stage_input[165:161] ;
  assign fpr_regfile$write_rd_rd = stage3_rg_stage3[566:562] ;
  assign fpr_regfile$write_rd_rd_val = stage3_rg_stage3[490:427] ;
  assign fpr_regfile$EN_server_reset_request_put =
	     CAN_FIRE_RL_rl_reset_start ;
  assign fpr_regfile$EN_server_reset_response_get =
	     MUX_rg_state$write_1__SEL_2 ;
  assign fpr_regfile$EN_write_rd =
	     WILL_FIRE_RL_rl_pipe && stage3_rg_full &&
	     stage3_rg_stage3[567] &&
	     stage3_rg_stage3[496] ;

  // submodule gpr_regfile
  assign gpr_regfile$read_rs1_port2_rs1 = 5'h0 ;
  assign gpr_regfile$read_rs1_rs1 = stage1_rg_stage_input[175:171] ;
  assign gpr_regfile$read_rs2_rs2 = stage1_rg_stage_input[170:166] ;
  assign gpr_regfile$write_rd_rd =
	     (MUX_csr_regfile$mav_csr_write_1__SEL_1 ||
	      MUX_f_trace_data$enq_1__SEL_3) ?
	       rg_trap_instr[11:7] :
	       stage3_rg_stage3[566:562] ;
  assign gpr_regfile$write_rd_rd_val =
	     (MUX_csr_regfile$mav_csr_write_1__SEL_1 ||
	      MUX_f_trace_data$enq_1__SEL_3) ?
	       csr_regfile$read_csr[63:0] :
	       stage3_rg_stage3[561:498] ;
  assign gpr_regfile$EN_server_reset_request_put =
	     CAN_FIRE_RL_rl_reset_start ;
  assign gpr_regfile$EN_server_reset_response_get =
	     MUX_rg_state$write_1__SEL_2 ;
  assign gpr_regfile$EN_write_rd =
	     WILL_FIRE_RL_rl_stage1_CSRR_W_2 &&
	     csr_regfile$access_permitted_1 ||
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 &&
	     csr_regfile$access_permitted_2 ||
	     WILL_FIRE_RL_rl_pipe && stage3_rg_full &&
	     stage3_rg_stage3[567] &&
	     !stage3_rg_stage3[496] ;

  // submodule near_mem
  assign near_mem$dma_server_araddr = dma_server_araddr ;
  assign near_mem$dma_server_arburst = dma_server_arburst ;
  assign near_mem$dma_server_arcache = dma_server_arcache ;
  assign near_mem$dma_server_arid = dma_server_arid ;
  assign near_mem$dma_server_arlen = dma_server_arlen ;
  assign near_mem$dma_server_arlock = dma_server_arlock ;
  assign near_mem$dma_server_arprot = dma_server_arprot ;
  assign near_mem$dma_server_arqos = dma_server_arqos ;
  assign near_mem$dma_server_arregion = dma_server_arregion ;
  assign near_mem$dma_server_arsize = dma_server_arsize ;
  assign near_mem$dma_server_arvalid = dma_server_arvalid ;
  assign near_mem$dma_server_awaddr = dma_server_awaddr ;
  assign near_mem$dma_server_awburst = dma_server_awburst ;
  assign near_mem$dma_server_awcache = dma_server_awcache ;
  assign near_mem$dma_server_awid = dma_server_awid ;
  assign near_mem$dma_server_awlen = dma_server_awlen ;
  assign near_mem$dma_server_awlock = dma_server_awlock ;
  assign near_mem$dma_server_awprot = dma_server_awprot ;
  assign near_mem$dma_server_awqos = dma_server_awqos ;
  assign near_mem$dma_server_awregion = dma_server_awregion ;
  assign near_mem$dma_server_awsize = dma_server_awsize ;
  assign near_mem$dma_server_awvalid = dma_server_awvalid ;
  assign near_mem$dma_server_bready = dma_server_bready ;
  assign near_mem$dma_server_rready = dma_server_rready ;
  assign near_mem$dma_server_wdata = dma_server_wdata ;
  assign near_mem$dma_server_wlast = dma_server_wlast ;
  assign near_mem$dma_server_wstrb = dma_server_wstrb ;
  assign near_mem$dma_server_wvalid = dma_server_wvalid ;
  assign near_mem$dmem_req_addr = x_out_data_to_stage2_addr__h10353 ;
  assign near_mem$dmem_req_amo_funct7 =
	     x_out_data_to_stage2_val1__h10354[6:0] ;
  assign near_mem$dmem_req_f3 = MUX_rg_trap_instr$write_1__VAL_1[14:12] ;
  assign near_mem$dmem_req_mstatus_MXR = csr_regfile$read_mstatus[19] ;
  assign near_mem$dmem_req_op =
	     (stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d348 &&
	      (stage1_rg_stage_input[187:181] == 7'b0000011 ||
	       stage1_rg_stage_input[187:181] == 7'b0000111)) ?
	       2'd0 :
	       ((stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d348 &&
		 (stage1_rg_stage_input[187:181] == 7'b0100011 ||
		  stage1_rg_stage_input[187:181] == 7'b0100111)) ?
		  2'd1 :
		  2'd2) ;
  assign near_mem$dmem_req_priv =
	     csr_regfile$read_mstatus[17] ?
	       csr_regfile$read_mstatus[12:11] :
	       rg_cur_priv ;
  assign near_mem$dmem_req_satp = csr_regfile$read_satp ;
  assign near_mem$dmem_req_sstatus_SUM = csr_regfile$read_sstatus[18] ;
  always@(stage1_rg_stage_input or
	  IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d1613 or
	  alu_outputs___1_fval2__h11906 or branch_target__h10537)
  begin
    case (stage1_rg_stage_input[187:181])
      7'b0100111:
	  near_mem$dmem_req_store_value = alu_outputs___1_fval2__h11906;
      7'b1100011: near_mem$dmem_req_store_value = branch_target__h10537;
      default: near_mem$dmem_req_store_value =
		   IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d1613;
    endcase
  end
  assign near_mem$imem_master_arready = imem_master_arready ;
  assign near_mem$imem_master_awready = imem_master_awready ;
  assign near_mem$imem_master_bid = imem_master_bid ;
  assign near_mem$imem_master_bresp = imem_master_bresp ;
  assign near_mem$imem_master_bvalid = imem_master_bvalid ;
  assign near_mem$imem_master_rdata = imem_master_rdata ;
  assign near_mem$imem_master_rid = imem_master_rid ;
  assign near_mem$imem_master_rlast = imem_master_rlast ;
  assign near_mem$imem_master_rresp = imem_master_rresp ;
  assign near_mem$imem_master_rvalid = imem_master_rvalid ;
  assign near_mem$imem_master_wready = imem_master_wready ;
  always@(MUX_imem_rg_cache_addr$write_1__SEL_1 or
	  MUX_imem_rg_cache_addr$write_1__SEL_2 or
	  MUX_near_mem$imem_req_2__VAL_2 or
	  WILL_FIRE_RL_imem_rl_fetch_next_32b or
	  MUX_imem_rg_tval$write_1__VAL_4 or
	  MUX_rg_state$write_1__SEL_7 or MUX_near_mem$imem_req_2__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_imem_rg_cache_addr$write_1__SEL_1:
	  near_mem$imem_req_addr = 64'd4096;
      MUX_imem_rg_cache_addr$write_1__SEL_2:
	  near_mem$imem_req_addr = MUX_near_mem$imem_req_2__VAL_2;
      WILL_FIRE_RL_imem_rl_fetch_next_32b:
	  near_mem$imem_req_addr = MUX_imem_rg_tval$write_1__VAL_4;
      MUX_rg_state$write_1__SEL_7:
	  near_mem$imem_req_addr = MUX_near_mem$imem_req_2__VAL_4;
      default: near_mem$imem_req_addr =
		   64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign near_mem$imem_req_f3 =
	     WILL_FIRE_RL_imem_rl_fetch_next_32b ? imem_rg_f3 : 3'b010 ;
  assign near_mem$imem_req_mstatus_MXR =
	     (MUX_imem_rg_cache_addr$write_1__SEL_1 ||
	      MUX_imem_rg_cache_addr$write_1__SEL_2 ||
	      MUX_rg_state$write_1__SEL_7) ?
	       csr_regfile$read_mstatus[19] :
	       imem_rg_mstatus_MXR ;
  assign near_mem$imem_req_priv =
	     (MUX_imem_rg_cache_addr$write_1__SEL_1 ||
	      MUX_imem_rg_cache_addr$write_1__SEL_2 ||
	      MUX_rg_state$write_1__SEL_7) ?
	       rg_cur_priv :
	       imem_rg_priv ;
  assign near_mem$imem_req_satp =
	     WILL_FIRE_RL_imem_rl_fetch_next_32b ?
	       imem_rg_satp :
	       csr_regfile$read_satp ;
  assign near_mem$imem_req_sstatus_SUM =
	     (MUX_imem_rg_cache_addr$write_1__SEL_1 ||
	      MUX_imem_rg_cache_addr$write_1__SEL_2 ||
	      MUX_rg_state$write_1__SEL_7) ?
	       csr_regfile$read_sstatus[18] :
	       imem_rg_sstatus_SUM ;
  assign near_mem$mem_master_arready = mem_master_arready ;
  assign near_mem$mem_master_awready = mem_master_awready ;
  assign near_mem$mem_master_bid = mem_master_bid ;
  assign near_mem$mem_master_bresp = mem_master_bresp ;
  assign near_mem$mem_master_bvalid = mem_master_bvalid ;
  assign near_mem$mem_master_rdata = mem_master_rdata ;
  assign near_mem$mem_master_rid = mem_master_rid ;
  assign near_mem$mem_master_rlast = mem_master_rlast ;
  assign near_mem$mem_master_rresp = mem_master_rresp ;
  assign near_mem$mem_master_rvalid = mem_master_rvalid ;
  assign near_mem$mem_master_wready = mem_master_wready ;
  assign near_mem$server_fence_request_put =
	     8'b10101010 /* unspecified value */  ;
  assign near_mem$set_watch_tohost_tohost_addr =
	     set_watch_tohost_tohost_addr ;
  assign near_mem$set_watch_tohost_watch_tohost =
	     set_watch_tohost_watch_tohost ;
  assign near_mem$EN_server_reset_request_put = CAN_FIRE_RL_rl_reset_start ;
  assign near_mem$EN_server_reset_response_get = MUX_rg_state$write_1__SEL_2 ;
  assign near_mem$EN_imem_req =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     WILL_FIRE_RL_rl_pipe &&
	     IF_csr_regfile_csr_mip_read__380_EQ_rg_prev_mi_ETC___d2949 &&
	     NOT_csr_regfile_csr_mip_read__380_EQ_rg_prev_m_ETC___d2968 ||
	     WILL_FIRE_RL_imem_rl_fetch_next_32b ||
	     WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_WFI_resume ;
  assign near_mem$EN_dmem_req =
	     WILL_FIRE_RL_rl_pipe &&
	     csr_regfile_csr_mip_read__380_EQ_rg_prev_mip_3_ETC___d2802 ;
  assign near_mem$EN_server_fence_i_request_put =
	     MUX_rg_state$write_1__SEL_12 ;
  assign near_mem$EN_server_fence_i_response_get =
	     CAN_FIRE_RL_rl_finish_FENCE_I ;
  assign near_mem$EN_server_fence_request_put = MUX_rg_state$write_1__SEL_13 ;
  assign near_mem$EN_server_fence_response_get = CAN_FIRE_RL_rl_finish_FENCE ;
  assign near_mem$EN_sfence_vma_server_request_put =
	     MUX_rg_state$write_1__SEL_14 ;
  assign near_mem$EN_sfence_vma_server_response_get =
	     CAN_FIRE_RL_rl_finish_SFENCE_VMA ;
  assign near_mem$EN_set_watch_tohost = EN_set_watch_tohost ;
  assign near_mem$EN_ma_ddr4_ready = EN_ma_ddr4_ready ;

  // submodule stage1_f_reset_reqs
  assign stage1_f_reset_reqs$ENQ = CAN_FIRE_RL_rl_reset_start ;
  assign stage1_f_reset_reqs$DEQ = CAN_FIRE_RL_stage1_rl_reset ;
  assign stage1_f_reset_reqs$CLR = 1'b0 ;

  // submodule stage1_f_reset_rsps
  assign stage1_f_reset_rsps$ENQ = CAN_FIRE_RL_stage1_rl_reset ;
  assign stage1_f_reset_rsps$DEQ = MUX_rg_state$write_1__SEL_2 ;
  assign stage1_f_reset_rsps$CLR = 1'b0 ;

  // submodule stage2_f_reset_reqs
  assign stage2_f_reset_reqs$ENQ = CAN_FIRE_RL_rl_reset_start ;
  assign stage2_f_reset_reqs$DEQ = CAN_FIRE_RL_stage2_rl_reset_begin ;
  assign stage2_f_reset_reqs$CLR = 1'b0 ;

  // submodule stage2_f_reset_rsps
  assign stage2_f_reset_rsps$ENQ = CAN_FIRE_RL_stage2_rl_reset_end ;
  assign stage2_f_reset_rsps$DEQ = MUX_rg_state$write_1__SEL_2 ;
  assign stage2_f_reset_rsps$CLR = 1'b0 ;

  // submodule stage2_fbox
  assign stage2_fbox$req_f7 = MUX_rg_trap_instr$write_1__VAL_1[31:25] ;
  assign stage2_fbox$req_opcode = MUX_rg_trap_instr$write_1__VAL_1[6:0] ;
  assign stage2_fbox$req_rm = rm__h10518 ;
  assign stage2_fbox$req_rs2 = MUX_rg_trap_instr$write_1__VAL_1[24:20] ;
  assign stage2_fbox$req_v1 =
	     NOT_csr_regfile_read_mstatus__9_BITS_14_TO_13__ETC___d2659 ?
	       x_out_data_to_stage2_val1__h10354 :
	       x_out_data_to_stage2_fval1__h10356 ;
  assign stage2_fbox$req_v2 = alu_outputs___1_fval2__h11906 ;
  assign stage2_fbox$req_v3 = x_out_data_to_stage2_fval3__h10358 ;
  assign stage2_fbox$EN_server_reset_request_put =
	     CAN_FIRE_RL_stage2_rl_reset_begin ;
  assign stage2_fbox$EN_server_reset_response_get =
	     CAN_FIRE_RL_stage2_rl_reset_end ;
  assign stage2_fbox$EN_req =
	     WILL_FIRE_RL_rl_pipe &&
	     csr_regfile_csr_mip_read__380_EQ_rg_prev_mip_3_ETC___d2856 ;

  // submodule stage2_mbox
  assign stage2_mbox$req_f3 = MUX_rg_trap_instr$write_1__VAL_1[14:12] ;
  assign stage2_mbox$req_is_OP_not_OP_32 =
	     !MUX_rg_trap_instr$write_1__VAL_1[3] ;
  assign stage2_mbox$req_v1 = x_out_data_to_stage2_val1__h10354 ;
  assign stage2_mbox$req_v2 = x_out_data_to_stage2_val2__h10355 ;
  assign stage2_mbox$set_verbosity_verbosity = 4'h0 ;
  assign stage2_mbox$EN_set_verbosity = 1'b0 ;
  assign stage2_mbox$EN_req_reset = 1'b0 ;
  assign stage2_mbox$EN_rsp_reset = 1'b0 ;
  assign stage2_mbox$EN_req =
	     WILL_FIRE_RL_rl_pipe &&
	     csr_regfile_csr_mip_read__380_EQ_rg_prev_mip_3_ETC___d2839 ;

  // submodule stage3_f_reset_reqs
  assign stage3_f_reset_reqs$ENQ = CAN_FIRE_RL_rl_reset_start ;
  assign stage3_f_reset_reqs$DEQ = CAN_FIRE_RL_stage3_rl_reset ;
  assign stage3_f_reset_reqs$CLR = 1'b0 ;

  // submodule stage3_f_reset_rsps
  assign stage3_f_reset_rsps$ENQ = CAN_FIRE_RL_stage3_rl_reset ;
  assign stage3_f_reset_rsps$DEQ = MUX_rg_state$write_1__SEL_2 ;
  assign stage3_f_reset_rsps$CLR = 1'b0 ;

  // submodule stageD_f_reset_reqs
  assign stageD_f_reset_reqs$ENQ = CAN_FIRE_RL_rl_reset_start ;
  assign stageD_f_reset_reqs$DEQ = CAN_FIRE_RL_stageD_rl_reset ;
  assign stageD_f_reset_reqs$CLR = 1'b0 ;

  // submodule stageD_f_reset_rsps
  assign stageD_f_reset_rsps$ENQ = CAN_FIRE_RL_stageD_rl_reset ;
  assign stageD_f_reset_rsps$DEQ = MUX_rg_state$write_1__SEL_2 ;
  assign stageD_f_reset_rsps$CLR = 1'b0 ;

  // submodule stageF_branch_predictor
  assign stageF_branch_predictor$bp_train_cf_info =
	     (stage1_rg_full &&
	      NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d2408 &&
	      stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d348) ?
	       { CASE_stage1_rg_stage_input_BITS_187_TO_181_0b1_ETC__q36,
		 stage1_rg_stage_input[437:374],
		 stage1_rg_stage_input[187:181] != 7'b1100011 ||
		 IF_stage1_rg_stage_input_46_BITS_148_TO_146_94_ETC___d447,
		 alu_outputs___1_trace_data_pc__h33214,
		 alu_outputs_cf_info_taken_PC__h17792 } :
	       195'h6AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA ;
  assign stageF_branch_predictor$bp_train_instr = d_instr__h27420 ;
  assign stageF_branch_predictor$bp_train_is_i32_not_i16 =
	     NOT_imem_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_rg__ETC___d2159 ||
	     imem_rg_pc[1:0] == 2'b0 &&
	     imem_rg_pc_BITS_63_TO_2_4_EQ_near_mem_imem_pc__ETC___d17 &&
	     near_mem$imem_instr[1:0] == 2'b11 ;
  assign stageF_branch_predictor$bp_train_pc = imem_rg_pc ;
  always@(MUX_imem_rg_cache_addr$write_1__SEL_1 or
	  MUX_imem_rg_cache_addr$write_1__SEL_2 or
	  stageF_branch_predictor$predict_rsp or
	  MUX_rg_state$write_1__SEL_7 or rg_next_pc)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_imem_rg_cache_addr$write_1__SEL_1:
	  stageF_branch_predictor$predict_req_pc = 64'd4096;
      MUX_imem_rg_cache_addr$write_1__SEL_2:
	  stageF_branch_predictor$predict_req_pc =
	      stageF_branch_predictor$predict_rsp;
      MUX_rg_state$write_1__SEL_7:
	  stageF_branch_predictor$predict_req_pc = rg_next_pc;
      default: stageF_branch_predictor$predict_req_pc =
		   64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign stageF_branch_predictor$predict_rsp_instr = d_instr__h27420 ;
  assign stageF_branch_predictor$predict_rsp_is_i32_not_i16 =
	     NOT_imem_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_rg__ETC___d2159 ||
	     imem_rg_pc[1:0] == 2'b0 &&
	     imem_rg_pc_BITS_63_TO_2_4_EQ_near_mem_imem_pc__ETC___d17 &&
	     near_mem$imem_instr[1:0] == 2'b11 ;
  assign stageF_branch_predictor$EN_reset = 1'b0 ;
  assign stageF_branch_predictor$EN_predict_req =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     WILL_FIRE_RL_rl_pipe &&
	     IF_csr_regfile_csr_mip_read__380_EQ_rg_prev_mi_ETC___d2949 &&
	     NOT_csr_regfile_csr_mip_read__380_EQ_rg_prev_m_ETC___d2968 ||
	     WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_WFI_resume ;
  assign stageF_branch_predictor$EN_bp_train =
	     WILL_FIRE_RL_rl_pipe &&
	     IF_csr_regfile_csr_mip_read__380_EQ_rg_prev_mi_ETC___d2949 ;

  // submodule stageF_f_reset_reqs
  assign stageF_f_reset_reqs$ENQ = CAN_FIRE_RL_rl_reset_start ;
  assign stageF_f_reset_reqs$DEQ = CAN_FIRE_RL_stageF_rl_reset ;
  assign stageF_f_reset_reqs$CLR = 1'b0 ;

  // submodule stageF_f_reset_rsps
  assign stageF_f_reset_rsps$ENQ = CAN_FIRE_RL_stageF_rl_reset ;
  assign stageF_f_reset_rsps$DEQ = MUX_rg_state$write_1__SEL_2 ;
  assign stageF_f_reset_rsps$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_IF_stage1_rg_stage_input_46_BITS_187_TO_181_ETC___d1744 =
	     next_pc__h10025 == stage1_rg_stage_input[251:188] ;
  assign IF_NOT_csr_regfile_read_mstatus__9_BITS_14_TO__ETC___d2664 =
	     (NOT_csr_regfile_read_mstatus__9_BITS_14_TO_13__ETC___d899 &&
	      stage1_rg_stage_input_46_BITS_135_TO_134_14_EQ_ETC___d1001) ?
	       (((stage1_rg_stage_input[140:134] != 7'h61 ||
		  stage1_rg_stage_input[170:166] != 5'd0) &&
		 (stage1_rg_stage_input[140:134] != 7'h61 ||
		  stage1_rg_stage_input[170:166] != 5'b00001) &&
		 (stage1_rg_stage_input[140:134] != 7'h61 ||
		  stage1_rg_stage_input[170:166] != 5'b00010) &&
		 (stage1_rg_stage_input[140:134] != 7'h61 ||
		  stage1_rg_stage_input[170:166] != 5'b00011) &&
		 stage1_rg_stage_input[140:134] != 7'h71 &&
		 stage1_rg_stage_input[140:134] != 7'h51 &&
		 (stage1_rg_stage_input[140:134] != 7'h60 ||
		  stage1_rg_stage_input[170:166] != 5'b00010) &&
		 (stage1_rg_stage_input[140:134] != 7'h60 ||
		  stage1_rg_stage_input[170:166] != 5'b00011) &&
		 (stage1_rg_stage_input[140:134] != 7'h60 ||
		  stage1_rg_stage_input[170:166] != 5'd0) &&
		 (stage1_rg_stage_input[140:134] != 7'h60 ||
		  stage1_rg_stage_input[170:166] != 5'b00001) &&
		 stage1_rg_stage_input[140:134] != 7'h70 &&
		 stage1_rg_stage_input[140:134] != 7'h50) ?
		  5'd8 :
		  5'd7) :
	       5'd14 ;
  assign IF_NOT_imem_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem__ETC___d2176 =
	     NOT_imem_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_rg__ETC___d2173 ?
	       { 16'b0,
		 imem_rg_pc_BITS_63_TO_2_4_EQ_near_mem_imem_pc__ETC___d17 ?
		   near_mem$imem_instr[31:16] :
		   imem_rg_cache_b16 } :
	       near_mem$imem_instr ;
  assign IF_NOT_stage1_rg_full_45_028_OR_NOT_stage1_rg__ETC___d2376 =
	     IF_IF_stage1_rg_stage_input_46_BITS_187_TO_181_ETC___d1744 ||
	     !stageF_rg_full ||
	     near_mem$imem_valid &&
	     near_mem_imem_exc__1_OR_NOT_imem_rg_pc_BITS_1__ETC___d2206 ;
  assign IF_NOT_stage1_rg_full_45_028_OR_NOT_stage1_rg__ETC___d2454 =
	     !IF_IF_stage1_rg_stage_input_46_BITS_187_TO_181_ETC___d1744 &&
	     stageF_rg_full &&
	     (!near_mem$imem_valid ||
	      NOT_near_mem_imem_exc__1_2_AND_imem_rg_pc_BITS_ETC___d2199) ;
  assign IF_NOT_stage1_rg_full_45_028_OR_NOT_stage1_rg__ETC___d2854 =
	     IF_NOT_stage1_rg_full_45_028_OR_NOT_stage1_rg__ETC___d2376 &&
	     NOT_stage1_rg_stage_input_46_BITS_187_TO_181_9_ETC___d464 &&
	     stage1_rg_stage_input[187:181] != 7'b1100011 &&
	     stage1_rg_stage_input[187:181] != 7'b1101111 &&
	     stage1_rg_stage_input[187:181] != 7'b1100111 &&
	     stage1_rg_stage_input[187:181] != 7'b0010011 &&
	     stage1_rg_stage_input[187:181] != 7'b0110011 &&
	     stage1_rg_stage_input[187:181] != 7'b0011011 &&
	     stage1_rg_stage_input[187:181] != 7'b0111011 &&
	     stage1_rg_stage_input[187:181] != 7'b0110111 &&
	     stage1_rg_stage_input[187:181] != 7'b0010111 &&
	     stage1_rg_stage_input[187:181] != 7'b0000011 &&
	     stage1_rg_stage_input[187:181] != 7'b0100011 &&
	     stage1_rg_stage_input[187:181] != 7'b0101111 &&
	     stage1_rg_stage_input[187:181] != 7'b0000111 &&
	     stage1_rg_stage_input[187:181] != 7'b0100111 ;
  assign IF_NOT_stage2_rg_full_14_71_OR_stage2_rg_stage_ETC___d357 =
	     x_out_fbypass_rd__h9616 == stage1_rg_stage_input[175:171] ;
  assign IF_NOT_stage2_rg_full_14_71_OR_stage2_rg_stage_ETC___d358 =
	     x_out_fbypass_rd__h9616 == stage1_rg_stage_input[170:166] ;
  assign IF_NOT_stage2_rg_full_14_71_OR_stage2_rg_stage_ETC___d361 =
	     x_out_fbypass_rd__h9616 == stage1_rg_stage_input[165:161] ;
  assign IF_csr_regfile_csr_mip_read__380_EQ_rg_prev_mi_ETC___d2415 =
	     csr_regfile_csr_mip_read__380_EQ_rg_prev_mip_3_ETC___d2411 ?
	       stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d348 &&
	       !IF_IF_stage1_rg_stage_input_46_BITS_187_TO_181_ETC___d1744 &&
	       stageF_rg_full &&
	       (!near_mem$imem_valid ||
		NOT_near_mem_imem_exc__1_2_AND_imem_rg_pc_BITS_ETC___d2199) :
	       stage1_rg_full ;
  assign IF_csr_regfile_csr_mip_read__380_EQ_rg_prev_mi_ETC___d2418 =
	     IF_csr_regfile_csr_mip_read__380_EQ_rg_prev_mi_ETC___d2415 &&
	     stageD_rg_full ||
	     !stageF_rg_full ||
	     !near_mem$imem_valid ||
	     NOT_near_mem_imem_exc__1_2_AND_imem_rg_pc_BITS_ETC___d2199 ;
  assign IF_csr_regfile_csr_mip_read__380_EQ_rg_prev_mi_ETC___d2431 =
	     IF_csr_regfile_csr_mip_read__380_EQ_rg_prev_mi_ETC___d2418 ||
	     csr_regfile_csr_mip_read__380_EQ_rg_prev_mip_3_ETC___d2425 ||
	     (imem_rg_pc[1:0] == 2'b0 || near_mem$imem_exc ||
	      !imem_rg_pc_BITS_63_TO_2_4_EQ_near_mem_imem_pc__ETC___d17 ||
	      near_mem$imem_instr[17:16] != 2'b11) &&
	     stageF_branch_predictor$RDY_predict_req ;
  assign IF_csr_regfile_csr_mip_read__380_EQ_rg_prev_mi_ETC___d2902 =
	     csr_regfile_csr_mip_read__380_EQ_rg_prev_mip_3_ETC___d2411 ?
	       !stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d348 ||
	       IF_IF_stage1_rg_stage_input_46_BITS_187_TO_181_ETC___d1744 ||
	       !stageF_rg_full ||
	       near_mem$imem_valid &&
	       near_mem_imem_exc__1_OR_NOT_imem_rg_pc_BITS_1__ETC___d2206 :
	       !stage1_rg_full ;
  assign IF_csr_regfile_csr_mip_read__380_EQ_rg_prev_mi_ETC___d2949 =
	     (IF_csr_regfile_csr_mip_read__380_EQ_rg_prev_mi_ETC___d2902 ||
	      !stageD_rg_full) &&
	     stageF_rg_full &&
	     near_mem$imem_valid &&
	     near_mem_imem_exc__1_OR_NOT_imem_rg_pc_BITS_1__ETC___d2206 ;
  assign IF_csr_regfile_csr_mip_read__380_EQ_rg_prev_mi_ETC___d3003 =
	     csr_regfile_csr_mip_read__380_EQ_rg_prev_mip_3_ETC___d2411 ?
	       stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d348 &&
	       IF_NOT_stage1_rg_full_45_028_OR_NOT_stage1_rg__ETC___d2454 :
	       stage1_rg_full ;
  assign IF_csr_regfile_read_csr_rg_trap_instr_091_BITS_ETC___d3178 =
	     csr_regfile$read_csr[63:0] | rs1_val__h45825 ;
  assign IF_csr_regfile_read_misa__6_BIT_2_759_AND_stag_ETC___d2017 =
	     (csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b0 &&
	      stageD_rg_data[79:77] == 3'b001) ?
	       instr__h26845 :
	       ((csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b0 &&
		 stageD_rg_data[79:77] == 3'b101) ?
		  instr__h26996 :
		  32'h0) ;
  assign IF_csr_regfile_read_misa__6_BIT_2_759_AND_stag_ETC___d2018 =
	     (csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b10 &&
	      stageD_rg_data[79:77] == 3'b101) ?
	       instr__h26646 :
	       IF_csr_regfile_read_misa__6_BIT_2_759_AND_stag_ETC___d2017 ;
  assign IF_csr_regfile_read_misa__6_BIT_2_759_AND_stag_ETC___d2019 =
	     (csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b10 &&
	      stageD_rg_data[79:77] == 3'b001 &&
	      csr_regfile$read_misa[3]) ?
	       instr__h26481 :
	       IF_csr_regfile_read_misa__6_BIT_2_759_AND_stag_ETC___d2018 ;
  assign IF_csr_regfile_read_misa__6_BIT_2_759_AND_stag_ETC___d2020 =
	     (csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b10 &&
	      stageD_rg_data[79:77] == 3'b011 &&
	      csr_regfile$read_misa[5]) ?
	       instr__h25681 :
	       IF_csr_regfile_read_misa__6_BIT_2_759_AND_stag_ETC___d2019 ;
  assign IF_csr_regfile_read_misa__6_BIT_2_759_AND_stag_ETC___d2021 =
	     (csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b0 &&
	      stageD_rg_data[79:77] == 3'b111) ?
	       instr__h25476 :
	       IF_csr_regfile_read_misa__6_BIT_2_759_AND_stag_ETC___d2020 ;
  assign IF_csr_regfile_read_misa__6_BIT_2_759_AND_stag_ETC___d2022 =
	     (csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b0 &&
	      stageD_rg_data[79:77] == 3'b011) ?
	       instr__h25325 :
	       IF_csr_regfile_read_misa__6_BIT_2_759_AND_stag_ETC___d2021 ;
  assign IF_csr_regfile_read_misa__6_BIT_2_759_AND_stag_ETC___d2023 =
	     (csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b10 &&
	      stageD_rg_data[79:77] == 3'b111) ?
	       instr__h25126 :
	       IF_csr_regfile_read_misa__6_BIT_2_759_AND_stag_ETC___d2022 ;
  assign IF_csr_regfile_read_misa__6_BIT_2_759_AND_stag_ETC___d2025 =
	     (csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b10 &&
	      stageD_rg_data[79:76] == 4'b1001 &&
	      stageD_rg_data[75:71] == 5'd0 &&
	      stageD_rg_data[70:66] == 5'd0) ?
	       instr__h24878 :
	       ((csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b10 &&
		 stageD_rg_data[75:71] != 5'd0 &&
		 stageD_rg_data[79:77] == 3'b011) ?
		  instr__h24973 :
		  IF_csr_regfile_read_misa__6_BIT_2_759_AND_stag_ETC___d2023) ;
  assign IF_csr_regfile_read_misa__6_BIT_2_759_AND_stag_ETC___d2027 =
	     (csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b01 &&
	      stageD_rg_data[79:74] == 6'b100111 &&
	      stageD_rg_data[70:69] == 2'b01) ?
	       instr__h24586 :
	       ((csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b01 &&
		 stageD_rg_data[79:74] == 6'b100111 &&
		 stageD_rg_data[70:69] == 2'b0) ?
		  instr__h24722 :
		  IF_csr_regfile_read_misa__6_BIT_2_759_AND_stag_ETC___d2025) ;
  assign IF_csr_regfile_read_misa__6_BIT_2_759_AND_stag_ETC___d2029 =
	     (csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b01 &&
	      stageD_rg_data[79:74] == 6'b100011 &&
	      stageD_rg_data[70:69] == 2'b01) ?
	       instr__h24316 :
	       ((csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b01 &&
		 stageD_rg_data[79:74] == 6'b100011 &&
		 stageD_rg_data[70:69] == 2'b0) ?
		  instr__h24450 :
		  IF_csr_regfile_read_misa__6_BIT_2_759_AND_stag_ETC___d2027) ;
  assign IF_csr_regfile_read_misa__6_BIT_2_759_AND_stag_ETC___d2031 =
	     (csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b01 &&
	      stageD_rg_data[79:74] == 6'b100011 &&
	      stageD_rg_data[70:69] == 2'b11) ?
	       instr__h24048 :
	       ((csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b01 &&
		 stageD_rg_data[79:74] == 6'b100011 &&
		 stageD_rg_data[70:69] == 2'b10) ?
		  instr__h24182 :
		  IF_csr_regfile_read_misa__6_BIT_2_759_AND_stag_ETC___d2029) ;
  assign IF_csr_regfile_read_misa__6_BIT_2_759_AND_stag_ETC___d2032 =
	     (csr_regfile_read_misa__6_BIT_2_759_AND_stageD__ETC___d1840 &&
	      stageD_rg_data[70:66] != 5'd0) ?
	       instr__h23954 :
	       IF_csr_regfile_read_misa__6_BIT_2_759_AND_stag_ETC___d2031 ;
  assign IF_csr_regfile_read_misa__6_BIT_2_759_AND_stag_ETC___d2033 =
	     (csr_regfile_read_misa__6_BIT_2_759_AND_stageD__ETC___d1834 &&
	      stageD_rg_data[70:66] != 5'd0) ?
	       instr__h23836 :
	       IF_csr_regfile_read_misa__6_BIT_2_759_AND_stag_ETC___d2032 ;
  assign IF_csr_regfile_read_misa__6_BIT_2_759_AND_stag_ETC___d2035 =
	     (csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b01 &&
	      stageD_rg_data[79:77] == 3'b100 &&
	      stageD_rg_data[75:74] == 2'b01 &&
	      imm6__h21949 != 6'd0) ?
	       instr__h23541 :
	       ((csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b01 &&
		 stageD_rg_data[79:77] == 3'b100 &&
		 stageD_rg_data[75:74] == 2'b10) ?
		  instr__h23658 :
		  IF_csr_regfile_read_misa__6_BIT_2_759_AND_stag_ETC___d2033) ;
  assign IF_csr_regfile_read_misa__6_BIT_2_759_AND_stag_ETC___d2036 =
	     (csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b01 &&
	      stageD_rg_data[79:77] == 3'b100 &&
	      stageD_rg_data[75:74] == 2'b0 &&
	      imm6__h21949 != 6'd0) ?
	       instr__h23352 :
	       IF_csr_regfile_read_misa__6_BIT_2_759_AND_stag_ETC___d2035 ;
  assign IF_csr_regfile_read_misa__6_BIT_2_759_AND_stag_ETC___d2037 =
	     (csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b10 &&
	      stageD_rg_data[79:77] == 3'b0 &&
	      stageD_rg_data[75:71] != 5'd0 &&
	      imm6__h21949 != 6'd0) ?
	       instr__h23163 :
	       IF_csr_regfile_read_misa__6_BIT_2_759_AND_stag_ETC___d2036 ;
  assign IF_csr_regfile_read_misa__6_BIT_2_759_AND_stag_ETC___d2039 =
	     (csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b01 &&
	      stageD_rg_data[79:77] == 3'b011 &&
	      stageD_rg_data[75:71] == 5'd2 &&
	      nzimm10__h22618 != 10'd0) ?
	       instr__h22822 :
	       ((csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b0 &&
		 stageD_rg_data[79:77] == 3'b0 &&
		 nzimm10__h22833 != 10'd0) ?
		  instr__h22994 :
		  IF_csr_regfile_read_misa__6_BIT_2_759_AND_stag_ETC___d2037) ;
  assign IF_csr_regfile_read_misa__6_BIT_2_759_AND_stag_ETC___d2041 =
	     (csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b01 &&
	      stageD_rg_data[79:77] == 3'b0 &&
	      stageD_rg_data[75:71] != 5'd0 &&
	      imm6__h21949 != 6'd0 ||
	      csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b01 &&
	      stageD_rg_data[79:77] == 3'b0 &&
	      stageD_rg_data[75:71] == 5'd0 &&
	      imm6__h21949 == 6'd0) ?
	       instr__h22340 :
	       ((csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b01 &&
		 stageD_rg_data[79:77] == 3'b001 &&
		 stageD_rg_data[75:71] != 5'd0) ?
		  instr__h22567 :
		  IF_csr_regfile_read_misa__6_BIT_2_759_AND_stag_ETC___d2039) ;
  assign IF_csr_regfile_read_misa__6_BIT_2_759_AND_stag_ETC___d2042 =
	     (csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b01 &&
	      stageD_rg_data[79:77] == 3'b011 &&
	      stageD_rg_data[75:71] != 5'd0 &&
	      stageD_rg_data[75:71] != 5'd2 &&
	      imm6__h21949 != 6'd0) ?
	       instr__h22211 :
	       IF_csr_regfile_read_misa__6_BIT_2_759_AND_stag_ETC___d2041 ;
  assign IF_csr_regfile_read_misa__6_BIT_2_759_AND_stag_ETC___d2044 =
	     (csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b01 &&
	      stageD_rg_data[79:77] == 3'b111) ?
	       instr__h21689 :
	       ((csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b01 &&
		 stageD_rg_data[79:77] == 3'b010 &&
		 stageD_rg_data[75:71] != 5'd0) ?
		  instr__h22027 :
		  IF_csr_regfile_read_misa__6_BIT_2_759_AND_stag_ETC___d2042) ;
  assign IF_csr_regfile_read_misa__6_BIT_2_759_AND_stag_ETC___d2045 =
	     (csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b01 &&
	      stageD_rg_data[79:77] == 3'b110) ?
	       instr__h21372 :
	       IF_csr_regfile_read_misa__6_BIT_2_759_AND_stag_ETC___d2044 ;
  assign IF_csr_regfile_read_misa__6_BIT_2_759_AND_stag_ETC___d2046 =
	     (csr_regfile_read_misa__6_BIT_2_759_AND_stageD__ETC___d1840 &&
	      stageD_rg_data[70:66] == 5'd0) ?
	       instr__h21307 :
	       IF_csr_regfile_read_misa__6_BIT_2_759_AND_stag_ETC___d2045 ;
  assign IF_csr_regfile_read_misa__6_BIT_2_759_AND_stag_ETC___d2047 =
	     (csr_regfile_read_misa__6_BIT_2_759_AND_stageD__ETC___d1834 &&
	      stageD_rg_data[70:66] == 5'd0) ?
	       instr__h21191 :
	       IF_csr_regfile_read_misa__6_BIT_2_759_AND_stag_ETC___d2046 ;
  assign IF_csr_regfile_read_misa__6_BIT_2_759_AND_stag_ETC___d2048 =
	     (csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b01 &&
	      stageD_rg_data[79:77] == 3'b101) ?
	       instr__h20738 :
	       IF_csr_regfile_read_misa__6_BIT_2_759_AND_stag_ETC___d2047 ;
  assign IF_csr_regfile_read_misa__6_BIT_2_759_AND_stag_ETC___d2049 =
	     (csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b0 &&
	      stageD_rg_data[79:77] == 3'b110) ?
	       instr__h20509 :
	       IF_csr_regfile_read_misa__6_BIT_2_759_AND_stag_ETC___d2048 ;
  assign IF_csr_regfile_read_misa__6_BIT_2_759_AND_stag_ETC___d2050 =
	     (csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b0 &&
	      stageD_rg_data[79:77] == 3'b010) ?
	       instr__h20314 :
	       IF_csr_regfile_read_misa__6_BIT_2_759_AND_stag_ETC___d2049 ;
  assign IF_csr_regfile_read_misa__6_BIT_2_759_AND_stag_ETC___d2051 =
	     (csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b10 &&
	      stageD_rg_data[79:77] == 3'b110) ?
	       instr__h20122 :
	       IF_csr_regfile_read_misa__6_BIT_2_759_AND_stag_ETC___d2050 ;
  assign IF_csr_regfilemav_csr_write_BIT_64_THEN_2_ELSE_0__q1 =
	     csr_regfile$mav_csr_write[64] ? 64'd2 : 64'd0 ;
  assign IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_rg_p_ETC___d2177 =
	     (imem_rg_pc[1:0] == 2'b0 &&
	      imem_rg_pc_BITS_63_TO_2_4_EQ_near_mem_imem_pc__ETC___d17 &&
	      near_mem$imem_instr[1:0] != 2'b11) ?
	       instr_out___1__h27444 :
	       IF_NOT_imem_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem__ETC___d2176 ;
  assign IF_stage1_rg_full_45_THEN_stage1_rg_stage_inpu_ETC___d3225 =
	     stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d348 &&
	     (NOT_stage1_rg_stage_input_46_BIT_368_91_29_AND_ETC___d3212 ||
	      !stage1_rg_stage_input[368] &&
	      stage1_rg_stage_input_46_BITS_187_TO_181_92_EQ_ETC___d3220) ;
  assign IF_stage1_rg_stage_input_46_BITS_148_TO_146_94_ETC___d3043 =
	     (stage1_rg_stage_input[148:146] == 3'd0) ?
	       NOT_stage1_rg_stage_input_46_BITS_180_TO_176_0_ETC___d1221 &&
	       (stage1_rg_stage_input[180:176] != 5'd0 ||
		stage1_rg_stage_input[175:171] != 5'd0 ||
		stage1_rg_stage_input[123:112] == 12'b0 ||
		stage1_rg_stage_input[123:112] == 12'b000000000001 ||
		(rg_cur_priv != 2'b11 ||
		 stage1_rg_stage_input[123:112] != 12'b001100000010) &&
		NOT_rg_cur_priv_8_EQ_0b11_111_143_AND_NOT_rg_c_ETC___d3037) :
	       stage1_rg_stage_input[148:146] != 3'b001 &&
	       stage1_rg_stage_input[148:146] != 3'b101 &&
	       stage1_rg_stage_input[148:146] != 3'b010 &&
	       stage1_rg_stage_input[148:146] != 3'b110 &&
	       stage1_rg_stage_input[148:146] != 3'b011 &&
	       stage1_rg_stage_input[148:146] != 3'b111 ;
  assign IF_stage1_rg_stage_input_46_BITS_175_TO_171_50_ETC___d1312 =
	     rs1_val_bypassed__h5399 +
	     { {52{stage1_rg_stage_input_BITS_123_TO_112__q17[11]}},
	       stage1_rg_stage_input_BITS_123_TO_112__q17 } ;
  assign IF_stage1_rg_stage_input_46_BITS_175_TO_171_50_ETC___d436 =
	     rs1_val_bypassed__h5399 == rs2_val__h10533 ;
  assign IF_stage1_rg_stage_input_46_BITS_175_TO_171_50_ETC___d438 =
	     (rs1_val_bypassed__h5399 ^ 64'h8000000000000000) <
	     (rs2_val__h10533 ^ 64'h8000000000000000) ;
  assign IF_stage1_rg_stage_input_46_BITS_175_TO_171_50_ETC___d440 =
	     rs1_val_bypassed__h5399 < rs2_val__h10533 ;
  assign IF_stage1_rg_stage_input_46_BITS_175_TO_171_50_ETC__q18 =
	     IF_stage1_rg_stage_input_46_BITS_175_TO_171_50_ETC___d1312[31:0] ;
  assign IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d1017 =
	     (stage1_rg_stage_input[187:181] == 7'b1100011) ?
	       (stage1_rg_stage_input[148:146] == 3'd0 ||
		stage1_rg_stage_input[148:146] == 3'b001 ||
		stage1_rg_stage_input[148:146] == 3'b100 ||
		stage1_rg_stage_input[148:146] == 3'b101 ||
		stage1_rg_stage_input[148:146] == 3'b110 ||
		stage1_rg_stage_input[148:146] == 3'b111) &&
	       IF_stage1_rg_stage_input_46_BITS_148_TO_146_94_ETC___d815 :
	       stage1_rg_stage_input[187:181] != 7'b1101111 &&
	       stage1_rg_stage_input[187:181] != 7'b1100111 &&
	       stage1_rg_stage_input_46_BITS_187_TO_181_92_EQ_ETC___d1014 ;
  assign IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d1021 =
	     (stage1_rg_stage_input[187:181] == 7'b1100011) ?
	       (stage1_rg_stage_input[148:146] == 3'd0 ||
		stage1_rg_stage_input[148:146] == 3'b001 ||
		stage1_rg_stage_input[148:146] == 3'b100 ||
		stage1_rg_stage_input[148:146] == 3'b101 ||
		stage1_rg_stage_input[148:146] == 3'b110 ||
		stage1_rg_stage_input[148:146] == 3'b111) &&
	       IF_stage1_rg_stage_input_46_BITS_148_TO_146_94_ETC___d447 :
	       stage1_rg_stage_input[187:181] == 7'b1101111 ||
	       stage1_rg_stage_input[187:181] == 7'b1100111 &&
	       stage1_rg_stage_input[148:146] == 3'd0 ;
  assign IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d1602 =
	     ((stage1_rg_stage_input[187:181] == 7'b0010011 ||
	       stage1_rg_stage_input[187:181] == 7'b0110011) &&
	      (stage1_rg_stage_input[148:146] == 3'b001 ||
	       stage1_rg_stage_input[148:146] == 3'b101)) ?
	       _theResult____h10734 :
	       IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d1601 ;
  assign IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d1603 =
	     (stage1_rg_stage_input[187:181] == 7'b0110011 &&
	      stage1_rg_stage_input[140:134] == 7'b0000001 ||
	      stage1_rg_stage_input_46_BITS_187_TO_181_92_EQ_ETC___d840) ?
	       rs1_val_bypassed__h5399 :
	       IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d1602 ;
  assign IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d1613 =
	     (stage1_rg_stage_input[187:181] == 7'b0110011 &&
	      stage1_rg_stage_input[140:134] == 7'b0000001 ||
	      stage1_rg_stage_input_46_BITS_187_TO_181_92_EQ_ETC___d840) ?
	       rs2_val__h10533 :
	       CASE_stage1_rg_stage_input_BITS_187_TO_181_0b1_ETC__q23 ;
  assign IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d2661 =
	     (stage1_rg_stage_input[187:181] == 7'b0000111) ? 5'd10 : 5'd9 ;
  assign IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d2662 =
	     (stage1_rg_stage_input[187:181] == 7'b0100111) ? 5'd12 : 5'd11 ;
  assign IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d2673 =
	     (stage1_rg_stage_input[187:181] == 7'b1101111 ||
	      stage1_rg_stage_input[187:181] == 7'b1100111 ||
	      stage1_rg_stage_input_46_BITS_187_TO_181_92_EQ_ETC___d1461) ?
	       5'd6 :
	       CASE_stage1_rg_stage_input_BITS_187_TO_181_0b1_ETC__q25 ;
  assign IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d2674 =
	     (stage1_rg_stage_input[187:181] == 7'b1100011) ?
	       5'd5 :
	       IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d2673 ;
  assign IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d2679 =
	     stage1_rg_stage_input_46_BITS_187_TO_181_92_EQ_ETC___d1461 ?
	       alu_outputs___1_trace_data_pc__h33214 :
	       CASE_stage1_rg_stage_input_BITS_187_TO_181_0b1_ETC__q27 ;
  assign IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d2688 =
	     (stage1_rg_stage_input[187:181] == 7'b1100011 ||
	      stage1_rg_stage_input[187:181] == 7'b1101111 ||
	      stage1_rg_stage_input[187:181] == 7'b1100111 ||
	      stage1_rg_stage_input_46_BITS_187_TO_181_92_EQ_ETC___d1461) ?
	       stage1_rg_stage_input[369] :
	       CASE_stage1_rg_stage_input_BITS_187_TO_181_0b1_ETC__q28 ;
  assign IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d2722 =
	     ((stage1_rg_stage_input[187:181] == 7'b0010011 ||
	       stage1_rg_stage_input[187:181] == 7'b0110011) &&
	      (stage1_rg_stage_input[148:146] == 3'b001 ||
	       stage1_rg_stage_input[148:146] == 3'b101)) ?
	       _theResult____h10734 :
	       IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d2721 ;
  assign IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d809 =
	     (stage1_rg_stage_input[187:181] == 7'b1100011) ?
	       stage1_rg_stage_input[148:146] != 3'd0 &&
	       stage1_rg_stage_input[148:146] != 3'b001 &&
	       stage1_rg_stage_input[148:146] != 3'b100 &&
	       stage1_rg_stage_input[148:146] != 3'b101 &&
	       stage1_rg_stage_input[148:146] != 3'b110 &&
	       stage1_rg_stage_input[148:146] != 3'b111 ||
	       IF_stage1_rg_stage_input_46_BITS_148_TO_146_94_ETC___d447 :
	       stage1_rg_stage_input[187:181] == 7'b1101111 ||
	       stage1_rg_stage_input[187:181] == 7'b1100111 ||
	       NOT_stage1_rg_stage_input_46_BITS_187_TO_181_9_ETC___d806 ;
  assign IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d821 =
	     (stage1_rg_stage_input[187:181] == 7'b1100011) ?
	       stage1_rg_stage_input[148:146] != 3'd0 &&
	       stage1_rg_stage_input[148:146] != 3'b001 &&
	       stage1_rg_stage_input[148:146] != 3'b100 &&
	       stage1_rg_stage_input[148:146] != 3'b101 &&
	       stage1_rg_stage_input[148:146] != 3'b110 &&
	       stage1_rg_stage_input[148:146] != 3'b111 ||
	       IF_stage1_rg_stage_input_46_BITS_148_TO_146_94_ETC___d815 :
	       stage1_rg_stage_input[187:181] != 7'b1101111 &&
	       (stage1_rg_stage_input[187:181] != 7'b1100111 ||
		stage1_rg_stage_input[148:146] != 3'd0) ;
  assign IF_stage1_rg_stage_input_46_BITS_35_TO_34_75_E_ETC___d853 =
	     (stage1_rg_stage_input[14:12] == 3'b0 ||
	      stage1_rg_stage_input[14:12] == 3'b100 ||
	      stage1_rg_stage_input[14:12] == 3'b110 ||
	      stage1_rg_stage_input[14:12] == 3'b111 ||
	      stage1_rg_stage_input[14:12] == 3'b010 ||
	      stage1_rg_stage_input[14:12] == 3'b011) &&
	     ((stage1_rg_stage_input[35:34] == 2'd1) ?
		(stage1_rg_stage_input[31:25] == 7'd0 ||
		 stage1_rg_stage_input[31:25] == 7'b0100000) &&
		(stage1_rg_stage_input[31:25] != 7'b0100000 ||
		 stage1_rg_stage_input[14:12] == 3'd0) :
		stage1_rg_stage_input[35:34] == 2'd2) ;
  assign IF_stage1_rg_stage_input_46_BITS_371_TO_370_47_ETC___d2759 =
	     { stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d348 ?
		 alu_outputs_trace_data_word2__h33265 :
		 alu_outputs_trace_data_word2__h33265,
	       stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d348 ?
		 alu_outputs_trace_data_word3__h33266 :
		 alu_outputs_trace_data_word3__h33266,
	       CASE_stage1_rg_stage_input_BITS_187_TO_181_0b1_ETC__q30,
	       alu_outputs___1_trace_data_word5__h33046 } ;
  assign IF_stage1_rg_stage_input_46_BITS_371_TO_370_47_ETC___d2760 =
	     { stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d348 ?
		 ((stage1_rg_stage_input[187:181] == 7'b1101111 ||
		   stage1_rg_stage_input[187:181] == 7'b1100111 ||
		   stage1_rg_stage_input_46_BITS_187_TO_181_92_EQ_ETC___d1461) ?
		    stage1_rg_stage_input[180:176] :
		    IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d2706) :
		 alu_outputs_trace_data_rd__h33263,
	       stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d348 ?
		 alu_outputs_trace_data_word1__h33264 :
		 alu_outputs_trace_data_word1__h33264,
	       IF_stage1_rg_stage_input_46_BITS_371_TO_370_47_ETC___d2759 } ;
  assign IF_stage1_rg_stage_input_46_BITS_371_TO_370_47_ETC___d2761 =
	     { IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d2688,
	       alu_outputs_trace_data_instr__h33262,
	       IF_stage1_rg_stage_input_46_BITS_371_TO_370_47_ETC___d2760 } ;
  assign IF_stage1_rg_stage_input_46_BITS_371_TO_370_47_ETC___d2769 =
	     { stage1_rg_stage_input[299:268],
	       CASE_stage1_rg_stage_input_BITS_187_TO_181_0b1_ETC__q33,
	       data_to_stage2_rd__h10334,
	       data_to_stage2_addr__h10335,
	       x_out_data_to_stage2_val1__h10354,
	       data_to_stage2_val2__h10337,
	       alu_outputs___1_fval1__h13053,
	       alu_outputs___1_fval2__h11906,
	       alu_outputs___1_fval3__h13055,
	       stage1_rg_stage_input[187:181] != 7'b1100011 &&
	       stage1_rg_stage_input[187:181] != 7'b1101111 &&
	       stage1_rg_stage_input[187:181] != 7'b1100111 &&
	       stage1_rg_stage_input[187:181] != 7'b0010011 &&
	       stage1_rg_stage_input[187:181] != 7'b0110011 &&
	       stage1_rg_stage_input[187:181] != 7'b0011011 &&
	       stage1_rg_stage_input[187:181] != 7'b0111011 &&
	       stage1_rg_stage_input[187:181] != 7'b0110111 &&
	       stage1_rg_stage_input[187:181] != 7'b0010111 &&
	       stage1_rg_stage_input[187:181] != 7'b0000011 &&
	       stage1_rg_stage_input[187:181] != 7'b0100011 &&
	       stage1_rg_stage_input[187:181] != 7'b0001111 &&
	       stage1_rg_stage_input[187:181] != 7'b1110011 &&
	       stage1_rg_stage_input[187:181] != 7'b0101111 &&
	       (stage1_rg_stage_input[187:181] == 7'b0000111 ||
		stage1_rg_stage_input[187:181] != 7'b0100111 &&
		NOT_csr_regfile_read_mstatus__9_BITS_14_TO_13__ETC___d2616),
	       stage1_rg_stage_input[187:181] == 7'b0100111,
	       NOT_csr_regfile_read_mstatus__9_BITS_14_TO_13__ETC___d2659,
	       rm__h10518,
	       IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d2674,
	       alu_outputs_trace_data_pc__h33260,
	       IF_stage1_rg_stage_input_46_BITS_371_TO_370_47_ETC___d2761 } ;
  assign IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d351 =
	     x_out_bypass_rd__h9422 == stage1_rg_stage_input[175:171] ;
  assign IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d353 =
	     x_out_bypass_rd__h9422 == stage1_rg_stage_input[170:166] ;
  assign IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_0_ETC___d2513 =
	     { IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_0_ETC___d2500,
	       stage2_rg_stage2[255:128],
	       CASE_stage2_rg_stage2_BITS_824_TO_822_0_stage2_ETC__q31 } ;
  assign IF_stage2_rg_stage2_15_BIT_432_07_THEN_csr_reg_ETC___d2504 =
	     stage2_rg_stage2[432] ?
	       { csr_regfile$mv_update_mstatus_fs,
		 output_stage2___1_data_to_stage3_frd_val__h8330 } :
	       stage2_rg_stage2[127:0] ;
  assign NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56 =
	     cur_verbosity__h3724 > 4'd1 ;
  assign NOT_IF_stage1_rg_stage_input_46_BITS_35_TO_34__ETC___d515 =
	     stage1_rg_stage_input[14:12] != 3'b0 &&
	     stage1_rg_stage_input[14:12] != 3'b100 &&
	     stage1_rg_stage_input[14:12] != 3'b110 &&
	     stage1_rg_stage_input[14:12] != 3'b111 &&
	     stage1_rg_stage_input[14:12] != 3'b010 &&
	     stage1_rg_stage_input[14:12] != 3'b011 ||
	     ((stage1_rg_stage_input[35:34] == 2'd1) ?
		stage1_rg_stage_input[31:25] != 7'd0 &&
		stage1_rg_stage_input[31:25] != 7'b0100000 ||
		stage1_rg_stage_input[31:25] == 7'b0100000 &&
		stage1_rg_stage_input[14:12] != 3'd0 :
		stage1_rg_stage_input[35:34] != 2'd2) ;
  assign NOT_csr_regfile_csr_mip_read__380_EQ_rg_prev_m_ETC___d2964 =
	     !csr_regfile_csr_mip_read__380_EQ_rg_prev_mip_381___d2382 ||
	     csr_regfile_interrupt_pending_rg_cur_priv_8_39_ETC___d2959 ||
	     stage2_rg_stage2[824:822] != 3'd0 &&
	     IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d2961 &&
	     stage2_rg_full ;
  assign NOT_csr_regfile_csr_mip_read__380_EQ_rg_prev_m_ETC___d2968 =
	     NOT_csr_regfile_csr_mip_read__380_EQ_rg_prev_m_ETC___d2964 ||
	     !stage1_rg_full ||
	     stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d2399 ||
	     !stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d348 ||
	     IF_IF_stage1_rg_stage_input_46_BITS_187_TO_181_ETC___d1744 ;
  assign NOT_csr_regfile_csr_mip_read__380_EQ_rg_prev_m_ETC___d3010 =
	     !csr_regfile_csr_mip_read__380_EQ_rg_prev_mip_381___d2382 ||
	     (csr_regfile$interrupt_pending[4] || csr_regfile$nmi_pending) &&
	     NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d382 &&
	     NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d389 &&
	     (IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d1017 ||
	      IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d1021) ;
  assign NOT_csr_regfile_csr_mip_read__380_EQ_rg_prev_m_ETC___d3015 =
	     NOT_csr_regfile_csr_mip_read__380_EQ_rg_prev_m_ETC___d3010 ||
	     stage2_rg_stage2[824:822] != 3'd0 &&
	     IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d2961 &&
	     stage2_rg_full ||
	     !stage1_rg_full ||
	     stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d2399 ||
	     !stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d348 ||
	     IF_IF_stage1_rg_stage_input_46_BITS_187_TO_181_ETC___d1744 ;
  assign NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d2402 =
	     !csr_regfile$interrupt_pending[4] && !csr_regfile$nmi_pending ||
	     (stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d2399 ||
	      !stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d348) &&
	     (!stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d348 ||
	      stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1024) ;
  assign NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d2448 =
	     !csr_regfile$interrupt_pending[4] && !csr_regfile$nmi_pending ||
	     (!stage1_rg_full || stage1_rg_stage_input[368] ||
	      IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d809 &&
	      IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d821 ||
	      !stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d348) &&
	     (!stage1_rg_full ||
	      NOT_stage1_rg_stage_input_46_BITS_371_TO_370_4_ETC___d2440) ;
  assign NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d3028 =
	     !csr_regfile$interrupt_pending[4] && !csr_regfile$nmi_pending ||
	     !stage1_rg_stage_input[368] &&
	     (IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d1017 ||
	      IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d1021) ;
  assign NOT_csr_regfile_read_csr_minstret__0_EQ_rg_ins_ETC___d2537 =
	     csr_regfile$read_csr_minstret != rg_instret_reported ;
  assign NOT_csr_regfile_read_mstatus__9_BITS_14_TO_13__ETC___d2616 =
	     NOT_csr_regfile_read_mstatus__9_BITS_14_TO_13__ETC___d899 &&
	     stage1_rg_stage_input_46_BITS_135_TO_134_14_EQ_ETC___d2599 &&
	     (stage1_rg_stage_input[140:134] != 7'h61 ||
	      stage1_rg_stage_input[170:166] != 5'd0) &&
	     (stage1_rg_stage_input[140:134] != 7'h61 ||
	      stage1_rg_stage_input[170:166] != 5'b00001) &&
	     (stage1_rg_stage_input[140:134] != 7'h61 ||
	      stage1_rg_stage_input[170:166] != 5'b00010) &&
	     (stage1_rg_stage_input[140:134] != 7'h61 ||
	      stage1_rg_stage_input[170:166] != 5'b00011) &&
	     stage1_rg_stage_input[140:134] != 7'h71 &&
	     stage1_rg_stage_input[140:134] != 7'h51 &&
	     (stage1_rg_stage_input[140:134] != 7'h60 ||
	      stage1_rg_stage_input[170:166] != 5'b00010) &&
	     (stage1_rg_stage_input[140:134] != 7'h60 ||
	      stage1_rg_stage_input[170:166] != 5'b00011) &&
	     (stage1_rg_stage_input[140:134] != 7'h60 ||
	      stage1_rg_stage_input[170:166] != 5'd0) &&
	     (stage1_rg_stage_input[140:134] != 7'h60 ||
	      stage1_rg_stage_input[170:166] != 5'b00001) &&
	     stage1_rg_stage_input[140:134] != 7'h70 &&
	     stage1_rg_stage_input[140:134] != 7'h50 ;
  assign NOT_csr_regfile_read_mstatus__9_BITS_14_TO_13__ETC___d2659 =
	     NOT_csr_regfile_read_mstatus__9_BITS_14_TO_13__ETC___d899 &&
	     (_0_OR_stage1_rg_stage_input_46_BITS_140_TO_134__ETC___d2639 ||
	      stage1_rg_stage_input[140:134] == 7'h61 &&
	      (stage1_rg_stage_input[170:166] == 5'b00010 ||
	       stage1_rg_stage_input[170:166] == 5'b00011) ||
	      stage1_rg_stage_input[140:134] == 7'h71 &&
	      stage1_rg_stage_input[170:166] == 5'd0 &&
	      rm__h10518 == 3'b0 ||
	      stage1_rg_stage_input[140:134] == 7'h69 &&
	      stage1_rg_stage_input[170:166] == 5'b00010 ||
	      stage1_rg_stage_input[140:134] == 7'h69 &&
	      stage1_rg_stage_input[170:166] == 5'b00011 ||
	      stage1_rg_stage_input[140:134] == 7'h79 &&
	      stage1_rg_stage_input[170:166] == 5'd0 &&
	      rm__h10518 == 3'b0) &&
	     stage1_rg_stage_input[187:181] == 7'b1010011 &&
	     (stage1_rg_stage_input[140:134] == 7'h69 &&
	      (stage1_rg_stage_input[170:166] == 5'd0 ||
	       stage1_rg_stage_input[170:166] == 5'b00001 ||
	       stage1_rg_stage_input[170:166] == 5'b00010 ||
	       stage1_rg_stage_input[170:166] == 5'b00011) ||
	      stage1_rg_stage_input[140:134] == 7'h79 ||
	      stage1_rg_stage_input[140:134] == 7'h68 &&
	      (stage1_rg_stage_input[170:166] == 5'd0 ||
	       stage1_rg_stage_input[170:166] == 5'b00001 ||
	       stage1_rg_stage_input[170:166] == 5'b00010 ||
	       stage1_rg_stage_input[170:166] == 5'b00011) ||
	      stage1_rg_stage_input[140:134] == 7'h78) ;
  assign NOT_csr_regfile_read_mstatus__9_BITS_14_TO_13__ETC___d899 =
	     csr_regfile$read_mstatus[14:13] != 2'h0 &&
	     ((stage1_rg_stage_input[148:146] == 3'b111) ?
		csr_regfile$read_frm != 3'b101 &&
		csr_regfile$read_frm != 3'b110 &&
		csr_regfile$read_frm != 3'b111 :
		stage1_rg_stage_input[148:146] != 3'b101 &&
		stage1_rg_stage_input[148:146] != 3'b110) ;
  assign NOT_imem_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_rg__ETC___d2159 =
	     imem_rg_pc[1:0] != 2'b0 &&
	     imem_rg_pc_BITS_63_TO_2_4_EQ_imem_rg_cache_add_ETC___d2151 &&
	     near_mem_imem_pc__5_EQ_imem_rg_pc_PLUS_2_153___d2154 &&
	     imem_rg_cache_b16[1:0] == 2'b11 ;
  assign NOT_imem_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_rg__ETC___d2173 =
	     imem_rg_pc[1:0] != 2'b0 &&
	     (imem_rg_pc_BITS_63_TO_2_4_EQ_near_mem_imem_pc__ETC___d17 &&
	      near_mem$imem_instr[17:16] != 2'b11 ||
	      imem_rg_pc_BITS_63_TO_2_4_EQ_imem_rg_cache_add_ETC___d2151 &&
	      imem_rg_cache_b16[1:0] != 2'b11) ;
  assign NOT_near_mem_imem_exc__1_2_AND_imem_rg_pc_BITS_ETC___d2192 =
	     !near_mem$imem_exc &&
	     (imem_rg_pc[1:0] == 2'b0 ||
	      !imem_rg_pc_BITS_63_TO_2_4_EQ_imem_rg_cache_add_ETC___d2151 ||
	      !near_mem_imem_pc__5_EQ_imem_rg_pc_PLUS_2_153___d2154 ||
	      imem_rg_cache_b16[1:0] != 2'b11) &&
	     (imem_rg_pc[1:0] != 2'b0 ||
	      !imem_rg_pc_BITS_63_TO_2_4_EQ_near_mem_imem_pc__ETC___d17 ||
	      near_mem$imem_instr[1:0] != 2'b11) ;
  assign NOT_near_mem_imem_exc__1_2_AND_imem_rg_pc_BITS_ETC___d2199 =
	     NOT_near_mem_imem_exc__1_2_AND_imem_rg_pc_BITS_ETC___d2192 &&
	     imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_rg_p_ETC___d2196 &&
	     (imem_rg_pc[1:0] != 2'b0 ||
	      !imem_rg_pc_BITS_63_TO_2_4_EQ_near_mem_imem_pc__ETC___d17 ||
	      near_mem$imem_instr[1:0] == 2'b11) ;
  assign NOT_rg_cur_priv_8_EQ_0b11_111_143_AND_NOT_rg_c_ETC___d1156 =
	     (rg_cur_priv != 2'b11 &&
	      (rg_cur_priv != 2'b01 || csr_regfile$read_mstatus[20]) ||
	      stage1_rg_stage_input[140:134] != 7'b0001001) &&
	     stage1_rg_stage_input_46_BITS_180_TO_176_079_E_ETC___d1155 ;
  assign NOT_rg_cur_priv_8_EQ_0b11_111_143_AND_NOT_rg_c_ETC___d1178 =
	     (rg_cur_priv != 2'b11 &&
	      (rg_cur_priv != 2'b01 || csr_regfile$read_mstatus[20]) ||
	      stage1_rg_stage_input[140:134] != 7'b0001001) &&
	     stage1_rg_stage_input[180:176] == 5'd0 &&
	     stage1_rg_stage_input[175:171] == 5'd0 &&
	     rg_cur_priv_8_EQ_0b11_111_OR_rg_cur_priv_8_EQ__ETC___d1176 ;
  assign NOT_rg_cur_priv_8_EQ_0b11_111_143_AND_NOT_rg_c_ETC___d1253 =
	     rg_cur_priv != 2'b11 &&
	     (rg_cur_priv != 2'b01 || csr_regfile$read_mstatus[21]) &&
	     (rg_cur_priv != 2'b0 || !csr_regfile$read_misa[13]) ||
	     stage1_rg_stage_input[123:112] != 12'b000100000101 ;
  assign NOT_rg_cur_priv_8_EQ_0b11_111_143_AND_NOT_rg_c_ETC___d1732 =
	     (rg_cur_priv != 2'b11 &&
	      (rg_cur_priv != 2'b01 || csr_regfile$read_mstatus[20]) ||
	      stage1_rg_stage_input[140:134] != 7'b0001001) &&
	     stage1_rg_stage_input[180:176] == 5'd0 &&
	     stage1_rg_stage_input[175:171] == 5'd0 &&
	     stage1_rg_stage_input[123:112] == 12'b000000000001 ;
  assign NOT_rg_cur_priv_8_EQ_0b11_111_143_AND_NOT_rg_c_ETC___d3037 =
	     (rg_cur_priv != 2'b11 &&
	      (rg_cur_priv != 2'b01 || csr_regfile$read_mstatus[22]) ||
	      stage1_rg_stage_input[123:112] != 12'b000100000010) &&
	     NOT_rg_cur_priv_8_EQ_0b11_111_143_AND_NOT_rg_c_ETC___d1253 ;
  assign NOT_rg_next_pc_195_BITS_1_TO_0_196_EQ_0b0_197__ETC___d3203 =
	     rg_next_pc[1:0] != 2'b0 && near_mem$imem_valid &&
	     !near_mem$imem_exc &&
	     addr_of_b32__h56103 == near_mem$imem_pc ;
  assign NOT_rg_run_on_reset_337_338_OR_imem_rg_pc_BITS_ETC___d2345 =
	     !rg_run_on_reset ||
	     (imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_near_mem__ETC___d2341 ||
	      near_mem$imem_instr[17:16] != 2'b11) &&
	     stageF_branch_predictor$RDY_predict_req ;
  assign NOT_set_verbosity_verbosity_EQ_cfg_verbosity_r_ETC___d3311 =
	     set_verbosity_verbosity != cfg_verbosity ;
  assign NOT_stage1_rg_stage_input_46_BITS_135_TO_134_1_ETC___d793 =
	     (stage1_rg_stage_input[135:134] != 2'b0 &&
	      stage1_rg_stage_input[135:134] != 2'b01 ||
	      stage1_rg_stage_input[187:181] != 7'b1000011 &&
	      stage1_rg_stage_input[187:181] != 7'b1000111 &&
	      stage1_rg_stage_input[187:181] != 7'b1001111 &&
	      stage1_rg_stage_input[187:181] != 7'b1001011) &&
	     (stage1_rg_stage_input[187:181] != 7'b1010011 ||
	      stage1_rg_stage_input[140:134] != 7'h0 &&
	      stage1_rg_stage_input[140:134] != 7'h04 &&
	      stage1_rg_stage_input[140:134] != 7'h08 &&
	      stage1_rg_stage_input[140:134] != 7'h0C &&
	      (stage1_rg_stage_input[140:134] != 7'h2C ||
	       stage1_rg_stage_input[170:166] != 5'd0) &&
	      (stage1_rg_stage_input[140:134] != 7'h10 ||
	       rm__h10518 != 3'b0) &&
	      (stage1_rg_stage_input[140:134] != 7'h10 ||
	       rm__h10518 != 3'b001) &&
	      (stage1_rg_stage_input[140:134] != 7'h10 ||
	       rm__h10518 != 3'b010) &&
	      (stage1_rg_stage_input[140:134] != 7'h14 ||
	       rm__h10518 != 3'b0) &&
	      (stage1_rg_stage_input[140:134] != 7'h14 ||
	       rm__h10518 != 3'b001) &&
	      (stage1_rg_stage_input[140:134] != 7'h60 ||
	       stage1_rg_stage_input[170:166] != 5'd0) &&
	      (stage1_rg_stage_input[140:134] != 7'h60 ||
	       stage1_rg_stage_input[170:166] != 5'b00001) &&
	      (stage1_rg_stage_input[140:134] != 7'h70 ||
	       stage1_rg_stage_input[170:166] != 5'd0 ||
	       rm__h10518 != 3'b0) &&
	      (stage1_rg_stage_input[140:134] != 7'h50 ||
	       rm__h10518 != 3'b010) &&
	      (stage1_rg_stage_input[140:134] != 7'h50 ||
	       rm__h10518 != 3'b001) &&
	      (stage1_rg_stage_input[140:134] != 7'h50 ||
	       rm__h10518 != 3'b0) &&
	      (stage1_rg_stage_input[140:134] != 7'h70 ||
	       stage1_rg_stage_input[170:166] != 5'd0 ||
	       rm__h10518 != 3'b001) &&
	      (stage1_rg_stage_input[140:134] != 7'h68 ||
	       stage1_rg_stage_input[170:166] != 5'd0) &&
	      (stage1_rg_stage_input[140:134] != 7'h68 ||
	       stage1_rg_stage_input[170:166] != 5'b00001) &&
	      (stage1_rg_stage_input[140:134] != 7'h78 ||
	       stage1_rg_stage_input[170:166] != 5'd0 ||
	       rm__h10518 != 3'b0)) &&
	     (stage1_rg_stage_input[187:181] != 7'b1010011 ||
	      (stage1_rg_stage_input[140:134] != 7'h60 ||
	       stage1_rg_stage_input[170:166] != 5'b00010 &&
	       stage1_rg_stage_input[170:166] != 5'b00011) &&
	      (stage1_rg_stage_input[140:134] != 7'h68 ||
	       stage1_rg_stage_input[170:166] != 5'b00010) &&
	      (stage1_rg_stage_input[140:134] != 7'h68 ||
	       stage1_rg_stage_input[170:166] != 5'b00011)) &&
	     (stage1_rg_stage_input[187:181] != 7'b1010011 ||
	      stage1_rg_stage_input[140:134] != 7'b0000001 &&
	      stage1_rg_stage_input[140:134] != 7'h05 &&
	      stage1_rg_stage_input[140:134] != 7'b0001001 &&
	      stage1_rg_stage_input[140:134] != 7'h0D &&
	      (stage1_rg_stage_input[140:134] != 7'h2D ||
	       stage1_rg_stage_input[170:166] != 5'd0) &&
	      (stage1_rg_stage_input[140:134] != 7'h11 ||
	       rm__h10518 != 3'b0) &&
	      (stage1_rg_stage_input[140:134] != 7'h11 ||
	       rm__h10518 != 3'b001) &&
	      (stage1_rg_stage_input[140:134] != 7'h11 ||
	       rm__h10518 != 3'b010) &&
	      (stage1_rg_stage_input[140:134] != 7'h15 ||
	       rm__h10518 != 3'b0) &&
	      (stage1_rg_stage_input[140:134] != 7'h15 ||
	       rm__h10518 != 3'b001) &&
	      (stage1_rg_stage_input[140:134] != 7'h20 ||
	       stage1_rg_stage_input[170:166] != 5'b00001) &&
	      (stage1_rg_stage_input[140:134] != 7'h21 ||
	       stage1_rg_stage_input[170:166] != 5'd0) &&
	      (stage1_rg_stage_input[140:134] != 7'h51 ||
	       rm__h10518 != 3'b010) &&
	      (stage1_rg_stage_input[140:134] != 7'h51 ||
	       rm__h10518 != 3'b001) &&
	      (stage1_rg_stage_input[140:134] != 7'h51 ||
	       rm__h10518 != 3'b0) &&
	      (stage1_rg_stage_input[140:134] != 7'h71 ||
	       stage1_rg_stage_input[170:166] != 5'd0 ||
	       rm__h10518 != 3'b001) &&
	      (stage1_rg_stage_input[140:134] != 7'h61 ||
	       stage1_rg_stage_input[170:166] != 5'd0) &&
	      (stage1_rg_stage_input[140:134] != 7'h61 ||
	       stage1_rg_stage_input[170:166] != 5'b00001) &&
	      (stage1_rg_stage_input[140:134] != 7'h69 ||
	       stage1_rg_stage_input[170:166] != 5'd0) &&
	      (stage1_rg_stage_input[140:134] != 7'h69 ||
	       stage1_rg_stage_input[170:166] != 5'b00001)) &&
	     (stage1_rg_stage_input[187:181] != 7'b1010011 ||
	      (stage1_rg_stage_input[140:134] != 7'h61 ||
	       stage1_rg_stage_input[170:166] != 5'b00010 &&
	       stage1_rg_stage_input[170:166] != 5'b00011) &&
	      (stage1_rg_stage_input[140:134] != 7'h71 ||
	       stage1_rg_stage_input[170:166] != 5'd0 ||
	       rm__h10518 != 3'b0) &&
	      (stage1_rg_stage_input[140:134] != 7'h69 ||
	       stage1_rg_stage_input[170:166] != 5'b00010) &&
	      (stage1_rg_stage_input[140:134] != 7'h69 ||
	       stage1_rg_stage_input[170:166] != 5'b00011) &&
	      (stage1_rg_stage_input[140:134] != 7'h79 ||
	       stage1_rg_stage_input[170:166] != 5'd0 ||
	       rm__h10518 != 3'b0)) ;
  assign NOT_stage1_rg_stage_input_46_BITS_145_TO_141_6_ETC___d599 =
	     (stage1_rg_stage_input[145:141] != 5'b00010 ||
	      stage1_rg_stage_input[170:166] != 5'd0) &&
	     stage1_rg_stage_input[145:141] != 5'b00011 &&
	     stage1_rg_stage_input[145:141] != 5'b0 &&
	     stage1_rg_stage_input[145:141] != 5'b00001 &&
	     stage1_rg_stage_input[145:141] != 5'b01100 &&
	     stage1_rg_stage_input[145:141] != 5'b01000 &&
	     stage1_rg_stage_input[145:141] != 5'b00100 &&
	     stage1_rg_stage_input[145:141] != 5'b10000 &&
	     stage1_rg_stage_input[145:141] != 5'b11000 &&
	     stage1_rg_stage_input[145:141] != 5'b10100 &&
	     stage1_rg_stage_input[145:141] != 5'b11100 ||
	     stage1_rg_stage_input[148:146] != 3'b010 &&
	     stage1_rg_stage_input[148:146] != 3'b011 ;
  assign NOT_stage1_rg_stage_input_46_BITS_148_TO_146_9_ETC___d1209 =
	     stage1_rg_stage_input[148:146] != 3'd0 ||
	     stage1_rg_stage_input[180:176] != 5'd0 ||
	     stage1_rg_stage_input[175:171] != 5'd0 ||
	     stage1_rg_stage_input[299:296] != 4'b0 &&
	     stage1_rg_stage_input[299:296] != 4'b1000 ;
  assign NOT_stage1_rg_stage_input_46_BITS_148_TO_146_9_ETC___d1216 =
	     stage1_rg_stage_input[148:146] != 3'b001 ||
	     stage1_rg_stage_input[180:176] != 5'd0 ||
	     stage1_rg_stage_input[175:171] != 5'd0 ||
	     stage1_rg_stage_input[123:112] != 12'b0 ;
  assign NOT_stage1_rg_stage_input_46_BITS_180_TO_176_0_ETC___d1221 =
	     stage1_rg_stage_input[180:176] != 5'd0 ||
	     rg_cur_priv != 2'b11 &&
	     (rg_cur_priv != 2'b01 || csr_regfile$read_mstatus[20]) ||
	     stage1_rg_stage_input[140:134] != 7'b0001001 ;
  assign NOT_stage1_rg_stage_input_46_BITS_187_TO_181_9_ETC___d1435 =
	     stage1_rg_stage_input[187:181] != 7'b1101111 &&
	     stage1_rg_stage_input[187:181] != 7'b1100111 &&
	     (stage1_rg_stage_input[187:181] == 7'b0110011 &&
	      stage1_rg_stage_input[140:134] == 7'b0000001 ||
	      stage1_rg_stage_input_46_BITS_187_TO_181_92_EQ_ETC___d1398) ;
  assign NOT_stage1_rg_stage_input_46_BITS_187_TO_181_9_ETC___d3053 =
	     (stage1_rg_stage_input[187:181] != 7'b0110011 ||
	      stage1_rg_stage_input[140:134] != 7'b0000001) &&
	     NOT_stage1_rg_stage_input_46_BITS_187_TO_181_9_ETC___d464 &&
	     (((stage1_rg_stage_input[187:181] == 7'b0010011 ||
		stage1_rg_stage_input[187:181] == 7'b0110011) &&
	       (stage1_rg_stage_input[148:146] == 3'b001 ||
		stage1_rg_stage_input[148:146] == 3'b101)) ?
		stage1_rg_stage_input[299] ||
		stage1_rg_stage_input[297:294] != 4'b0 :
		IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d3051) ;
  assign NOT_stage1_rg_stage_input_46_BITS_187_TO_181_9_ETC___d464 =
	     stage1_rg_stage_input[187:181] != 7'b0111011 ||
	     stage1_rg_stage_input[140:134] != 7'b0000001 ||
	     stage1_rg_stage_input[148:146] == 3'b001 ||
	     stage1_rg_stage_input[148:146] == 3'b010 ||
	     stage1_rg_stage_input[148:146] == 3'b011 ;
  assign NOT_stage1_rg_stage_input_46_BITS_187_TO_181_9_ETC___d806 =
	     (stage1_rg_stage_input[187:181] != 7'b0110011 ||
	      stage1_rg_stage_input[140:134] != 7'b0000001) &&
	     NOT_stage1_rg_stage_input_46_BITS_187_TO_181_9_ETC___d464 &&
	     (((stage1_rg_stage_input[187:181] == 7'b0010011 ||
		stage1_rg_stage_input[187:181] == 7'b0110011) &&
	       (stage1_rg_stage_input[148:146] == 3'b001 ||
		stage1_rg_stage_input[148:146] == 3'b101)) ?
		stage1_rg_stage_input[299] ||
		stage1_rg_stage_input[297:294] != 4'b0 :
		IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d804) ;
  assign NOT_stage1_rg_stage_input_46_BITS_371_TO_370_4_ETC___d1026 =
	     (!stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d348 ||
	      NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d382 &&
	      NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d389) &&
	     (!stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d348 ||
	      stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1024) ;
  assign NOT_stage1_rg_stage_input_46_BITS_371_TO_370_4_ETC___d1282 =
	     (!stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d348 ||
	      NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d382 &&
	      NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d389) &&
	     (!stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d348 ||
	      stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1024) &&
	     stage1_rg_stage_input[187:181] != 7'b1100011 &&
	     stage1_rg_stage_input[187:181] != 7'b1101111 &&
	     stage1_rg_stage_input[187:181] != 7'b1100111 ;
  assign NOT_stage1_rg_stage_input_46_BITS_371_TO_370_4_ETC___d1290 =
	     (!stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d348 ||
	      NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d382 &&
	      NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d389) &&
	     (!stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d348 ||
	      stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1024) &&
	     stage1_rg_stage_input[187:181] == 7'b1100011 ;
  assign NOT_stage1_rg_stage_input_46_BITS_371_TO_370_4_ETC___d1295 =
	     (!stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d348 ||
	      NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d382 &&
	      NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d389) &&
	     (!stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d348 ||
	      stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1024) &&
	     (stage1_rg_stage_input[187:181] == 7'b1101111 ||
	      stage1_rg_stage_input[187:181] == 7'b1100111) ;
  assign NOT_stage1_rg_stage_input_46_BITS_371_TO_370_4_ETC___d1301 =
	     (!stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d348 ||
	      NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d382 &&
	      NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d389) &&
	     (!stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d348 ||
	      stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1024) &&
	     stage1_rg_stage_input[187:181] == 7'b1101111 ;
  assign NOT_stage1_rg_stage_input_46_BITS_371_TO_370_4_ETC___d1351 =
	     !stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d348 ||
	     NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d1037 &&
	     (stage1_rg_stage_input[187:181] == 7'b1100011 ||
	      stage1_rg_stage_input[187:181] == 7'b1101111 ||
	      stage1_rg_stage_input_46_BITS_187_TO_181_92_EQ_ETC___d1347) ;
  assign NOT_stage1_rg_stage_input_46_BITS_371_TO_370_4_ETC___d1353 =
	     (!stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d348 ||
	      NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d382 &&
	      NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d389) &&
	     (!stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d348 ||
	      stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1024) &&
	     NOT_stage1_rg_stage_input_46_BITS_371_TO_370_4_ETC___d1351 ;
  assign NOT_stage1_rg_stage_input_46_BITS_371_TO_370_4_ETC___d1747 =
	     (!stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d348 ||
	      NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d382 &&
	      NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d389) &&
	     !IF_IF_stage1_rg_stage_input_46_BITS_187_TO_181_ETC___d1744 ;
  assign NOT_stage1_rg_stage_input_46_BITS_371_TO_370_4_ETC___d1751 =
	     (!stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d348 ||
	      NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d382 &&
	      NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d389) &&
	     IF_IF_stage1_rg_stage_input_46_BITS_187_TO_181_ETC___d1744 ;
  assign NOT_stage1_rg_stage_input_46_BITS_371_TO_370_4_ETC___d2372 =
	     !stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d348 ||
	     IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d1017 ||
	     IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d1021 ||
	     stage1_rg_stage_input[368] ||
	     IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d809 &&
	     IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d821 ;
  assign NOT_stage1_rg_stage_input_46_BITS_371_TO_370_4_ETC___d2440 =
	     !stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d348 ||
	     !stage1_rg_stage_input[368] &&
	     (IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d1017 ||
	      IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d1021) ;
  assign NOT_stage1_rg_stage_input_46_BIT_368_91_29_AND_ETC___d1056 =
	     !stage1_rg_stage_input[368] &&
	     stage1_rg_stage_input[187:181] == 7'b1110011 &&
	     (stage1_rg_stage_input[148:146] == 3'b001 ||
	      stage1_rg_stage_input[148:146] == 3'b101) ;
  assign NOT_stage1_rg_stage_input_46_BIT_368_91_29_AND_ETC___d1071 =
	     !stage1_rg_stage_input[368] &&
	     stage1_rg_stage_input[187:181] == 7'b1110011 &&
	     (stage1_rg_stage_input[148:146] == 3'b010 ||
	      stage1_rg_stage_input[148:146] == 3'b110 ||
	      stage1_rg_stage_input[148:146] == 3'b011 ||
	      stage1_rg_stage_input[148:146] == 3'b111) ;
  assign NOT_stage1_rg_stage_input_46_BIT_368_91_29_AND_ETC___d1120 =
	     !stage1_rg_stage_input[368] &&
	     stage1_rg_stage_input[187:181] == 7'b1110011 &&
	     stage1_rg_stage_input[148:146] == 3'd0 &&
	     stage1_rg_stage_input_46_BITS_180_TO_176_079_E_ETC___d1117 ;
  assign NOT_stage1_rg_stage_input_46_BIT_368_91_29_AND_ETC___d1181 =
	     !stage1_rg_stage_input[368] &&
	     stage1_rg_stage_input[187:181] == 7'b1110011 &&
	     stage1_rg_stage_input[148:146] == 3'd0 &&
	     NOT_rg_cur_priv_8_EQ_0b11_111_143_AND_NOT_rg_c_ETC___d1178 ;
  assign NOT_stage1_rg_stage_input_46_BIT_368_91_29_AND_ETC___d3212 =
	     !stage1_rg_stage_input[368] &&
	     stage1_rg_stage_input[187:181] == 7'b1110011 &&
	     stage1_rg_stage_input[148:146] == 3'd0 &&
	     stage1_rg_stage_input[140:134] != 7'b0001001 &&
	     stage1_rg_stage_input[180:176] == 5'd0 &&
	     stage1_rg_stage_input[175:171] == 5'd0 &&
	     rg_cur_priv == 2'b11 &&
	     stage1_rg_stage_input[123:112] == 12'b001100000010 ;
  assign NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d1037 =
	     (!stage2_rg_full || stage2_rg_stage2[824:822] == 3'd0 ||
	      IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d299 ||
	      !IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d351) &&
	     (!stage2_rg_full || stage2_rg_stage2[824:822] == 3'd0 ||
	      IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d299 ||
	      !IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d353) &&
	     (!stage2_rg_full || stage2_rg_stage2[824:822] == 3'd0 ||
	      IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d336 ||
	      !IF_NOT_stage2_rg_full_14_71_OR_stage2_rg_stage_ETC___d357) &&
	     (!stage2_rg_full || stage2_rg_stage2[824:822] == 3'd0 ||
	      IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d336 ||
	      !IF_NOT_stage2_rg_full_14_71_OR_stage2_rg_stage_ETC___d358) &&
	     (!stage2_rg_full || stage2_rg_stage2[824:822] == 3'd0 ||
	      IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d336 ||
	      !IF_NOT_stage2_rg_full_14_71_OR_stage2_rg_stage_ETC___d361) ;
  assign NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d1271 =
	     NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d382 &&
	     NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d389 &&
	     stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1024 &&
	     stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d348 &&
	     stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1268 ;
  assign NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d1394 =
	     NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d382 &&
	     NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d389 &&
	     stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1024 &&
	     stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d1360 &&
	     stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1391 ;
  assign NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d2408 =
	     NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d382 &&
	     NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d389 &&
	     !stage1_rg_stage_input[368] &&
	     (IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d1017 ||
	      IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d1021) ;
  assign NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d382 =
	     !stage2_rg_full || stage2_rg_stage2[824:822] == 3'd0 ||
	     IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d299 ||
	     !IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d351 &&
	     !IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d353 ;
  assign NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d389 =
	     !stage2_rg_full || stage2_rg_stage2[824:822] == 3'd0 ||
	     IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d336 ||
	     !IF_NOT_stage2_rg_full_14_71_OR_stage2_rg_stage_ETC___d357 &&
	     !IF_NOT_stage2_rg_full_14_71_OR_stage2_rg_stage_ETC___d358 &&
	     !IF_NOT_stage2_rg_full_14_71_OR_stage2_rg_stage_ETC___d361 ;
  assign NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d824 =
	     NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d382 &&
	     NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d389 &&
	     (stage1_rg_stage_input[368] ||
	      IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d809 &&
	      IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d821) ;
  assign NOT_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ__ETC___d148 =
	     stage2_rg_stage2[824:822] != 3'd0 &&
	     CASE_stage2_rg_stage2_BITS_824_TO_822_1_NOT_ne_ETC__q5 ;
  assign NOT_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ__ETC___d156 =
	     (stage2_rg_stage2[824:822] == 3'd1 ||
	      stage2_rg_stage2[824:822] == 3'd4 ||
	      stage2_rg_stage2[824:822] == 3'd2) &&
	     near_mem$dmem_valid &&
	     near_mem$dmem_exc ;
  assign NOT_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ__ETC___d177 =
	     (stage2_rg_stage2[824:822] != 3'd1 &&
	      stage2_rg_stage2[824:822] != 3'd4 &&
	      stage2_rg_stage2[824:822] != 3'd2 ||
	      !near_mem$dmem_valid ||
	      !near_mem$dmem_exc) &&
	     stage2_rg_stage2[824:822] != 3'd0 &&
	     IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d175 ;
  assign NOT_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ__ETC___d289 =
	     stage2_rg_stage2[824:822] != 3'd2 &&
	     ((stage2_rg_stage2[824:822] == 3'd3) ?
		!stage2_mbox$valid :
		!stage2_rg_stage2[432] && !stage2_fbox$valid) ;
  assign NOT_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ__ETC___d417 =
	     stage2_rg_stage2[824:822] != 3'd2 &&
	     ((stage2_rg_stage2[824:822] == 3'd3) ?
		stage2_mbox$valid :
		!stage2_rg_stage2[432] && stage2_fbox$valid) ;
  assign NOT_stageF_branch_predictor_predict_rsp_NOT_im_ETC___d2982 =
	     stageF_branch_predictor$predict_rsp[1:0] != 2'b0 &&
	     near_mem$imem_valid &&
	     !near_mem$imem_exc &&
	     addr_of_b32__h41599 == near_mem$imem_pc ;
  assign SEXT_stageD_rg_data_754_BIT_76_771_CONCAT_stag_ETC___d1824 =
	     { {9{offset__h20685[11]}}, offset__h20685 } ;
  assign SEXT_stageD_rg_data_754_BIT_76_771_CONCAT_stag_ETC___d1849 =
	     { {4{offset__h21316[8]}}, offset__h21316 } ;
  assign _0_OR_stage1_rg_stage_input_46_BITS_140_TO_134__ETC___d2639 =
	     stage1_rg_stage_input_46_BITS_140_TO_134_53_EQ_ETC___d941 ||
	     (stage1_rg_stage_input[140:134] == 7'h60 ||
	      stage1_rg_stage_input[140:134] == 7'h68) &&
	     (stage1_rg_stage_input[170:166] == 5'b00010 ||
	      stage1_rg_stage_input[170:166] == 5'b00011) ||
	     stage1_rg_stage_input_46_BITS_140_TO_134_53_EQ_ETC___d985 ||
	     stage1_rg_stage_input[140:134] == 7'h69 &&
	     stage1_rg_stage_input[170:166] == 5'b00001 ;
  assign _theResult_____2_snd__h18586 =
	     (stage1_rg_stage_input[35:34] == 2'd2) ?
	       rs2_val_local___1__h18588 :
	       rs2_val__h10533 ;
  assign _theResult____h10734 =
	     (stage1_rg_stage_input[148:146] == 3'b001) ?
	       rd_val__h18428 :
	       (stage1_rg_stage_input[298] ?
		  rd_val__h18501 :
		  rd_val__h18479) ;
  assign _theResult____h43704 =
	     (delta_CPI_instrs__h43703 == 64'd0) ?
	       delta_CPI_instrs___1__h43748 :
	       delta_CPI_instrs__h43703 ;
  assign _theResult____h5683 = x_out_data_to_stage1_instr__h19725 ;
  assign _theResult___fst__h14034 =
	     (stage1_rg_stage_input[148:146] == 3'b001 &&
	      !stage1_rg_stage_input[299] &&
	      stage1_rg_stage_input[297:293] == 5'b0 &&
	      !stage1_rg_stage_input[298]) ?
	       rd_val___1__h18773 :
	       _theResult___fst__h14041 ;
  assign _theResult___fst__h14041 =
	     stage1_rg_stage_input[298] ?
	       rd_val___1__h18834 :
	       rd_val___1__h18805 ;
  assign _theResult___fst__h14140 =
	     { {32{rs1_val_bypassed399_BITS_31_TO_0_SRL_rs2_val05_ETC__q10[31]}},
	       rs1_val_bypassed399_BITS_31_TO_0_SRL_rs2_val05_ETC__q10 } ;
  assign _theResult___fst_rd_val__h9388 =
	     (stage2_rg_stage2[821:817] == 5'd0) ?
	       stage2_rg_stage2[752:689] :
	       near_mem$dmem_word64 ;
  assign _theResult___fst_rd_val__h9391 =
	     (!near_mem$dmem_valid || !near_mem$dmem_exc) ?
	       _theResult___fst_rd_val__h9388 :
	       stage2_rg_stage2[752:689] ;
  assign _theResult___fst_rd_val__h9402 =
	     stage2_rg_stage2[432] ?
	       stage2_rg_stage2[752:689] :
	       stage2_fbox$word_fst ;
  assign _theResult___snd_rd_val__h9589 =
	     stage2_rg_stage2[432] ?
	       output_stage2___1_data_to_stage3_frd_val__h8330 :
	       stage2_rg_stage2[624:561] ;
  assign _theResult___snd_rd_val__h9592 =
	     (!near_mem$dmem_valid || !near_mem$dmem_exc) ?
	       _theResult___snd_rd_val__h9589 :
	       stage2_rg_stage2[624:561] ;
  assign _theResult___snd_rd_val__h9598 =
	     stage2_rg_stage2[432] ?
	       stage2_fbox$word_fst :
	       stage2_rg_stage2[624:561] ;
  assign addr_of_b32___1__h41727 = addr_of_b32__h41599 + 64'd4 ;
  assign addr_of_b32___1__h56231 = addr_of_b32__h56103 + 64'd4 ;
  assign addr_of_b32__h41599 =
	     { stageF_branch_predictor$predict_rsp[63:2], 2'd0 } ;
  assign addr_of_b32__h56103 = { rg_next_pc[63:2], 2'd0 } ;
  assign alu_outputs___1_addr__h10560 =
	     IF_stage1_rg_stage_input_46_BITS_148_TO_146_94_ETC___d447 ?
	       branch_target__h10537 :
	       alu_outputs___1_trace_data_pc__h33214 ;
  assign alu_outputs___1_addr__h11902 =
	     rs1_val_bypassed__h5399 +
	     { {52{stage1_rg_stage_input_BITS_111_TO_100__q8[11]}},
	       stage1_rg_stage_input_BITS_111_TO_100__q8 } ;
  assign alu_outputs___1_exc_code__h12188 =
	     (stage1_rg_stage_input[148:146] == 3'd0) ?
	       (stage1_rg_stage_input_46_BITS_180_TO_176_079_E_ETC___d1117 ?
		  4'd2 :
		  ((stage1_rg_stage_input[180:176] == 5'd0 &&
		    stage1_rg_stage_input[175:171] == 5'd0) ?
		     CASE_stage1_rg_stage_input_BITS_123_TO_112_0b0_ETC__q16 :
		     4'd2)) :
	       4'd2 ;
  assign alu_outputs___1_fval1__h13053 = x_out_data_to_stage2_fval1__h10356 ;
  assign alu_outputs___1_fval2__h11906 =
	     (stage2_rg_full && stage2_rg_stage2[824:822] != 3'd0 &&
	      IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d1637 &&
	      IF_NOT_stage2_rg_full_14_71_OR_stage2_rg_stage_ETC___d358) ?
	       x_out_fbypass_rd_val__h9617 :
	       rd_val__h9959 ;
  assign alu_outputs___1_fval3__h13055 = x_out_data_to_stage2_fval3__h10358 ;
  assign alu_outputs___1_trace_data_instr__h32893 =
	     stage1_rg_stage_input[369] ?
	       stage1_rg_stage_input[299:268] :
	       result___1__h34904 ;
  assign alu_outputs___1_trace_data_instr__h33216 =
	     alu_outputs___1_trace_data_instr__h32893 ;
  assign alu_outputs___1_trace_data_pc__h32891 =
	     x_out_cf_info_fallthru_PC__h17799 ;
  assign alu_outputs___1_trace_data_pc__h33214 =
	     x_out_cf_info_fallthru_PC__h17799 ;
  assign alu_outputs___1_trace_data_word1__h33042 =
	     { 61'd0, stage1_rg_stage_input[148:146] } ;
  assign alu_outputs___1_trace_data_word2__h33043 = rs2_val__h10533 ;
  assign alu_outputs___1_trace_data_word2__h33219 =
	     { 59'd0, csr_regfile$read_fflags } ;
  assign alu_outputs___1_trace_data_word5__h33046 =
	     alu_outputs___1_fval2__h11906 ;
  assign alu_outputs___1_val1__h11707 =
	     (stage1_rg_stage_input[14:12] == 3'b0 &&
	      (stage1_rg_stage_input[35:34] != 2'd1 ||
	       !stage1_rg_stage_input_BITS_31_TO_0__q26[30])) ?
	       rd_val___1__h18575 :
	       ((stage1_rg_stage_input[14:12] == 3'b0 &&
		 stage1_rg_stage_input[35:34] == 2'd1 &&
		 stage1_rg_stage_input_BITS_31_TO_0__q26[30]) ?
		  rd_val___1__h18705 :
		  IF_IF_stage1_rg_stage_input_46_BITS_35_TO_34_7_ETC___d1544) ;
  assign alu_outputs___1_val1__h12192 =
	     stage1_rg_stage_input[148] ?
	       { 59'd0, stage1_rg_stage_input[175:171] } :
	       rs1_val_bypassed__h5399 ;
  assign alu_outputs___1_val1__h12222 =
	     { 57'd0, stage1_rg_stage_input[140:134] } ;
  assign alu_outputs_cf_info_taken_PC__h17792 =
	     x_out_cf_info_taken_PC__h17800 ;
  assign alu_outputs_trace_data_instr__h33262 =
	     (stage1_rg_stage_input[187:181] == 7'b1100011 ||
	      stage1_rg_stage_input[187:181] == 7'b1101111 ||
	      stage1_rg_stage_input[187:181] == 7'b1100111 ||
	      stage1_rg_stage_input_46_BITS_187_TO_181_92_EQ_ETC___d1461) ?
	       alu_outputs___1_trace_data_instr__h33216 :
	       CASE_stage1_rg_stage_input_BITS_187_TO_181_0b1_ETC__q21 ;
  assign alu_outputs_trace_data_rd__h33263 =
	     (stage1_rg_stage_input[187:181] == 7'b1101111 ||
	      stage1_rg_stage_input[187:181] == 7'b1100111 ||
	      stage1_rg_stage_input_46_BITS_187_TO_181_92_EQ_ETC___d1461) ?
	       stage1_rg_stage_input[180:176] :
	       IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d2706 ;
  assign branch_target__h10537 =
	     stage1_rg_stage_input[437:374] +
	     { {51{stage1_rg_stage_input_BITS_99_TO_87__q2[12]}},
	       stage1_rg_stage_input_BITS_99_TO_87__q2 } ;
  assign cpi__h43706 = x__h43705 / 64'd10 ;
  assign cpifrac__h43707 = x__h43705 % 64'd10 ;
  assign csr_regfile_csr_mip_read__380_EQ_rg_prev_mip_381___d2382 =
	     csr_regfile$csr_mip_read == rg_prev_mip ;
  assign csr_regfile_csr_mip_read__380_EQ_rg_prev_mip_3_ETC___d2407 =
	     csr_regfile_csr_mip_read__380_EQ_rg_prev_mip_381___d2382 &&
	     NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d2402 &&
	     (stage2_rg_stage2[824:822] == 3'd0 ||
	      IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d2404 ||
	      !stage2_rg_full) ;
  assign csr_regfile_csr_mip_read__380_EQ_rg_prev_mip_3_ETC___d2411 =
	     csr_regfile_csr_mip_read__380_EQ_rg_prev_mip_3_ETC___d2407 &&
	     stage1_rg_full &&
	     (!stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d348 ||
	      NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d2408) ;
  assign csr_regfile_csr_mip_read__380_EQ_rg_prev_mip_3_ETC___d2420 =
	     csr_regfile_csr_mip_read__380_EQ_rg_prev_mip_381___d2382 &&
	     (!csr_regfile$interrupt_pending[4] && !csr_regfile$nmi_pending ||
	      stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d2399) ;
  assign csr_regfile_csr_mip_read__380_EQ_rg_prev_mip_3_ETC___d2425 =
	     csr_regfile_csr_mip_read__380_EQ_rg_prev_mip_3_ETC___d2420 &&
	     (stage2_rg_stage2[824:822] == 3'd0 ||
	      IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d2404 ||
	      !stage2_rg_full) &&
	     stage1_rg_full &&
	     NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d2408 &&
	     stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d348 &&
	     !IF_IF_stage1_rg_stage_input_46_BITS_187_TO_181_ETC___d1744 ;
  assign csr_regfile_csr_mip_read__380_EQ_rg_prev_mip_3_ETC___d2453 =
	     csr_regfile_csr_mip_read__380_EQ_rg_prev_mip_381___d2382 &&
	     NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d2448 ||
	     (!stage1_rg_full ||
	      stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d2450) &&
	     (!stage1_rg_full ||
	      NOT_stage1_rg_stage_input_46_BITS_371_TO_370_4_ETC___d2440) ;
  assign csr_regfile_csr_mip_read__380_EQ_rg_prev_mip_3_ETC___d2551 =
	     csr_regfile_csr_mip_read__380_EQ_rg_prev_mip_381___d2382 &&
	     (!csr_regfile$interrupt_pending[4] && !csr_regfile$nmi_pending ||
	      stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d2399 &&
	      stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1024) ;
  assign csr_regfile_csr_mip_read__380_EQ_rg_prev_mip_3_ETC___d2552 =
	     csr_regfile_csr_mip_read__380_EQ_rg_prev_mip_3_ETC___d2551 &&
	     (stage2_rg_stage2[824:822] == 3'd0 ||
	      IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d2404 ||
	      !stage2_rg_full) ;
  assign csr_regfile_csr_mip_read__380_EQ_rg_prev_mip_3_ETC___d2555 =
	     csr_regfile_csr_mip_read__380_EQ_rg_prev_mip_3_ETC___d2552 &&
	     stage1_rg_full &&
	     NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d2408 &&
	     stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d348 &&
	     IF_NOT_stage1_rg_full_45_028_OR_NOT_stage1_rg__ETC___d2376 ;
  assign csr_regfile_csr_mip_read__380_EQ_rg_prev_mip_3_ETC___d2802 =
	     csr_regfile_csr_mip_read__380_EQ_rg_prev_mip_3_ETC___d2552 &&
	     stage1_rg_full &&
	     NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d2408 &&
	     stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d348 &&
	     IF_NOT_stage1_rg_full_45_028_OR_NOT_stage1_rg__ETC___d2376 &&
	     stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d348 &&
	     (stage1_rg_stage_input[187:181] == 7'b0000011 ||
	      stage1_rg_stage_input[187:181] == 7'b0000111 ||
	      stage1_rg_stage_input[187:181] == 7'b0100011 ||
	      stage1_rg_stage_input[187:181] == 7'b0100111 ||
	      stage1_rg_stage_input[187:181] == 7'b0101111) ;
  assign csr_regfile_csr_mip_read__380_EQ_rg_prev_mip_3_ETC___d2839 =
	     csr_regfile_csr_mip_read__380_EQ_rg_prev_mip_3_ETC___d2552 &&
	     stage1_rg_full &&
	     NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d2408 &&
	     stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d348 &&
	     IF_NOT_stage1_rg_full_45_028_OR_NOT_stage1_rg__ETC___d2376 &&
	     stage1_rg_stage_input[187:181] != 7'b0000011 &&
	     stage1_rg_stage_input[187:181] != 7'b0000111 &&
	     stage1_rg_stage_input[187:181] != 7'b0100011 &&
	     stage1_rg_stage_input[187:181] != 7'b0100111 &&
	     stage1_rg_stage_input[187:181] != 7'b0101111 &&
	     stage1_rg_stage_input[187:181] != 7'b1100011 &&
	     stage1_rg_stage_input[187:181] != 7'b1101111 &&
	     stage1_rg_stage_input[187:181] != 7'b1100111 &&
	     (stage1_rg_stage_input[187:181] == 7'b0110011 &&
	      stage1_rg_stage_input[140:134] == 7'b0000001 ||
	      stage1_rg_stage_input_46_BITS_187_TO_181_92_EQ_ETC___d840) ;
  assign csr_regfile_csr_mip_read__380_EQ_rg_prev_mip_3_ETC___d2856 =
	     csr_regfile_csr_mip_read__380_EQ_rg_prev_mip_3_ETC___d2552 &&
	     stage1_rg_full &&
	     NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d2408 &&
	     stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d348 &&
	     IF_NOT_stage1_rg_full_45_028_OR_NOT_stage1_rg__ETC___d2854 ;
  assign csr_regfile_csr_mip_read__380_EQ_rg_prev_mip_3_ETC___d2866 =
	     csr_regfile_csr_mip_read__380_EQ_rg_prev_mip_3_ETC___d2552 &&
	     stage1_rg_full &&
	     NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d2408 &&
	     stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d348 &&
	     IF_NOT_stage1_rg_full_45_028_OR_NOT_stage1_rg__ETC___d2376 &&
	     NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56 ;
  assign csr_regfile_csr_mip_read__380_EQ_rg_prev_mip_3_ETC___d2870 =
	     csr_regfile_csr_mip_read__380_EQ_rg_prev_mip_3_ETC___d2552 &&
	     stage1_rg_full &&
	     NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d2408 &&
	     stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d348 &&
	     IF_NOT_stage1_rg_full_45_028_OR_NOT_stage1_rg__ETC___d2376 &&
	     NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56 &&
	     NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d1037 &&
	     (stage1_rg_stage_input[187:181] == 7'b1100011 ||
	      stage1_rg_stage_input[187:181] == 7'b1101111 ||
	      stage1_rg_stage_input_46_BITS_187_TO_181_92_EQ_ETC___d1347) ;
  assign csr_regfile_csr_mip_read__380_EQ_rg_prev_mip_3_ETC___d2875 =
	     csr_regfile_csr_mip_read__380_EQ_rg_prev_mip_3_ETC___d2552 &&
	     stage1_rg_full &&
	     NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d2408 &&
	     stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d348 &&
	     IF_NOT_stage1_rg_full_45_028_OR_NOT_stage1_rg__ETC___d2376 &&
	     NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56 &&
	     stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d2871 ;
  assign csr_regfile_csr_mip_read__380_EQ_rg_prev_mip_3_ETC___d2885 =
	     csr_regfile_csr_mip_read__380_EQ_rg_prev_mip_3_ETC___d2552 &&
	     stage1_rg_full &&
	     NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d2408 &&
	     stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d348 &&
	     IF_NOT_stage1_rg_full_45_028_OR_NOT_stage1_rg__ETC___d2376 &&
	     NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56 &&
	     stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1400 &&
	     stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1408 &&
	     stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1423 ;
  assign csr_regfile_csr_mip_read__380_EQ_rg_prev_mip_3_ETC___d2890 =
	     csr_regfile_csr_mip_read__380_EQ_rg_prev_mip_3_ETC___d2552 &&
	     stage1_rg_full &&
	     NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d2408 &&
	     stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d348 &&
	     IF_NOT_stage1_rg_full_45_028_OR_NOT_stage1_rg__ETC___d2376 &&
	     NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56 &&
	     stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d2886 ;
  assign csr_regfile_csr_mip_read__380_EQ_rg_prev_mip_3_ETC___d2895 =
	     csr_regfile_csr_mip_read__380_EQ_rg_prev_mip_3_ETC___d2552 &&
	     stage1_rg_full &&
	     NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d2408 &&
	     stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d348 &&
	     IF_NOT_stage1_rg_full_45_028_OR_NOT_stage1_rg__ETC___d2376 &&
	     NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56 &&
	     stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d2891 ;
  assign csr_regfile_csr_mip_read__380_EQ_rg_prev_mip_3_ETC___d2898 =
	     csr_regfile_csr_mip_read__380_EQ_rg_prev_mip_3_ETC___d2552 &&
	     stage1_rg_full &&
	     NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d2408 &&
	     stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d348 &&
	     IF_NOT_stage1_rg_full_45_028_OR_NOT_stage1_rg__ETC___d2376 &&
	     !IF_IF_stage1_rg_stage_input_46_BITS_187_TO_181_ETC___d1744 ;
  assign csr_regfile_csr_mip_read__380_EQ_rg_prev_mip_3_ETC___d3112 =
	     csr_regfile_csr_mip_read__380_EQ_rg_prev_mip_381___d2382 &&
	     (!csr_regfile$interrupt_pending[4] && !csr_regfile$nmi_pending ||
	      IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d1017 ||
	      IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d1021) ;
  assign csr_regfile_csr_trap_actions_075_BITS_129_TO_2_ETC___d3087 =
	     { csr_regfile$csr_trap_actions[129:2],
	       rg_trap_info[131:68],
	       rg_trap_interrupt ?
		 128'h0000000000000000AAAAAAAAAAAAAAAA :
		 { rg_trap_info[63:0], rg_trap_trace_data[63:0] } } ;
  assign csr_regfile_interrupt_pending_rg_cur_priv_8_39_ETC___d2959 =
	     (csr_regfile$interrupt_pending[4] || csr_regfile$nmi_pending) &&
	     NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d382 &&
	     NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d389 &&
	     (IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d1017 ||
	      IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d1021) ;
  assign csr_regfile_read_csr_mcycle__7_MINUS_rg_start__ETC___d3094 =
	     delta_CPI_cycles__h43702 * 64'd10 ;
  assign csr_regfile_read_csr_minstret__0_BITS_19_TO_0__ETC___d2542 =
	     csr_regfile$read_csr_minstret[19:0] == 20'd0 &&
	     (NOT_csr_regfile_read_csr_minstret__0_EQ_rg_ins_ETC___d2537 ||
	      stage2_rg_stage2[920:857] != rg_pc_reported) ;
  assign csr_regfile_read_csr_minstret__0_BITS_19_TO_0__ETC___d3107 =
	     csr_regfile$read_csr_minstret[19:0] == 20'd0 &&
	     (NOT_csr_regfile_read_csr_minstret__0_EQ_rg_ins_ETC___d2537 ||
	      rg_trap_info[131:68] != rg_pc_reported) ;
  assign csr_regfile_read_csr_minstret__0_BITS_19_TO_0__ETC___d3156 =
	     csr_regfile$read_csr_minstret[19:0] == 20'd0 &&
	     (NOT_csr_regfile_read_csr_minstret__0_EQ_rg_ins_ETC___d2537 ||
	      rg_csr_pc != rg_pc_reported) ;
  assign csr_regfile_read_csr_minstret__0_BITS_19_TO_0__ETC___d3242 =
	     csr_regfile$read_csr_minstret[19:0] == 20'd0 &&
	     (NOT_csr_regfile_read_csr_minstret__0_EQ_rg_ins_ETC___d2537 ||
	      stage1_rg_stage_input[437:374] != rg_pc_reported) ;
  assign csr_regfile_read_misa__6_BIT_2_759_AND_stageD__ETC___d1834 =
	     csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b10 &&
	     stageD_rg_data[79:76] == 4'b1000 &&
	     stageD_rg_data[75:71] != 5'd0 ;
  assign csr_regfile_read_misa__6_BIT_2_759_AND_stageD__ETC___d1840 =
	     csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b10 &&
	     stageD_rg_data[79:76] == 4'b1001 &&
	     stageD_rg_data[75:71] != 5'd0 ;
  assign csr_regfile_read_mstatus__9_BITS_14_TO_13_1_EQ_ETC___d613 =
	     csr_regfile$read_mstatus[14:13] == 2'h0 ||
	     ((stage1_rg_stage_input[148:146] == 3'b111) ?
		csr_regfile$read_frm == 3'b101 ||
		csr_regfile$read_frm == 3'b110 ||
		csr_regfile$read_frm == 3'b111 :
		stage1_rg_stage_input[148:146] == 3'b101 ||
		stage1_rg_stage_input[148:146] == 3'b110) ;
  assign cur_verbosity__h3724 =
	     (csr_regfile$read_csr_minstret < cfg_logdelay) ?
	       4'd0 :
	       cfg_verbosity ;
  assign d_instr__h27420 =
	     NOT_imem_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_rg__ETC___d2159 ?
	       instr_out___1__h27422 :
	       IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_rg_p_ETC___d2177 ;
  assign data_to_stage2_addr__h10335 = x_out_data_to_stage2_addr__h10353 ;
  assign data_to_stage2_rd__h10334 =
	     (stage1_rg_stage_input[187:181] == 7'b1100011) ?
	       5'd0 :
	       ((stage1_rg_stage_input[187:181] == 7'b1101111 ||
		 stage1_rg_stage_input[187:181] == 7'b1100111 ||
		 stage1_rg_stage_input_46_BITS_187_TO_181_92_EQ_ETC___d1461) ?
		  stage1_rg_stage_input[180:176] :
		  CASE_stage1_rg_stage_input_BITS_187_TO_181_0b1_ETC__q22) ;
  assign data_to_stage2_val2__h10337 = x_out_data_to_stage2_val2__h10355 ;
  assign decoded_instr_funct10__h39631 =
	     { _theResult____h5683[31:25], _theResult____h5683[14:12] } ;
  assign decoded_instr_imm12_S__h39633 =
	     { _theResult____h5683[31:25], _theResult____h5683[11:7] } ;
  assign decoded_instr_imm13_B__h39634 =
	     { _theResult____h5683[31],
	       _theResult____h5683[7],
	       _theResult____h5683[30:25],
	       _theResult____h5683[11:8],
	       1'b0 } ;
  assign decoded_instr_imm13_J__h39636 =
	     { _theResult____h5683[31],
	       _theResult____h5683[19:12],
	       _theResult____h5683[20],
	       _theResult____h5683[30:21],
	       1'b0 } ;
  assign delta_CPI_cycles__h43702 =
	     csr_regfile$read_csr_mcycle - rg_start_CPI_cycles ;
  assign delta_CPI_instrs___1__h43748 = delta_CPI_instrs__h43703 + 64'd1 ;
  assign delta_CPI_instrs__h43703 =
	     csr_regfile$read_csr_minstret - rg_start_CPI_instrs ;
  assign f_reset_reqs_i_notEmpty__307_AND_stageF_f_rese_ETC___d2319 =
	     f_reset_reqs$EMPTY_N && stageF_f_reset_reqs$FULL_N &&
	     stageD_f_reset_reqs$FULL_N &&
	     stage1_f_reset_reqs$FULL_N &&
	     stage2_f_reset_reqs$FULL_N &&
	     stage3_f_reset_reqs$FULL_N &&
	     f_trace_data$FULL_N ;
  assign fall_through_pc__h10024 =
	     stage1_rg_stage_input[437:374] +
	     (stage1_rg_stage_input[369] ? 64'd4 : 64'd2) ;
  assign fpr_regfile_RDY_server_reset_request_put__304__ETC___d2322 =
	     fpr_regfile$RDY_server_reset_request_put &&
	     near_mem$RDY_server_reset_request_put &&
	     csr_regfile$RDY_server_reset_request_put &&
	     f_reset_reqs_i_notEmpty__307_AND_stageF_f_rese_ETC___d2319 ;
  assign imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_rg_p_ETC___d2196 =
	     imem_rg_pc[1:0] == 2'b0 ||
	     (!imem_rg_pc_BITS_63_TO_2_4_EQ_near_mem_imem_pc__ETC___d17 ||
	      near_mem$imem_instr[17:16] == 2'b11) &&
	     (!imem_rg_pc_BITS_63_TO_2_4_EQ_imem_rg_cache_add_ETC___d2151 ||
	      imem_rg_cache_b16[1:0] == 2'b11) ;
  assign imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_near_mem__ETC___d2341 =
	     imem_rg_pc[1:0] == 2'b0 || !near_mem$imem_valid ||
	     near_mem$imem_exc ||
	     !imem_rg_pc_BITS_63_TO_2_4_EQ_near_mem_imem_pc__ETC___d17 ;
  assign imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_near_mem__ETC___d3251 =
	     (imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_near_mem__ETC___d2341 ||
	      near_mem$imem_instr[17:16] != 2'b11) &&
	     stageF_branch_predictor$RDY_predict_req &&
	     near_mem$RDY_server_fence_i_response_get &&
	     f_trace_data$FULL_N ;
  assign imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_near_mem__ETC___d3261 =
	     (imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_near_mem__ETC___d2341 ||
	      near_mem$imem_instr[17:16] != 2'b11) &&
	     stageF_branch_predictor$RDY_predict_req &&
	     near_mem$RDY_server_fence_response_get &&
	     f_trace_data$FULL_N ;
  assign imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_near_mem__ETC___d3271 =
	     (imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_near_mem__ETC___d2341 ||
	      near_mem$imem_instr[17:16] != 2'b11) &&
	     stageF_branch_predictor$RDY_predict_req &&
	     near_mem$RDY_sfence_vma_server_response_get &&
	     f_trace_data$FULL_N ;
  assign imem_rg_pc_BITS_63_TO_2_4_EQ_imem_rg_cache_add_ETC___d2151 =
	     imem_rg_pc[63:2] == imem_rg_cache_addr[63:2] ;
  assign imem_rg_pc_BITS_63_TO_2_4_EQ_near_mem_imem_pc__ETC___d17 =
	     imem_rg_pc[63:2] == near_mem$imem_pc[63:2] ;
  assign imm12__h19978 = { 4'd0, offset__h19850 } ;
  assign imm12__h20315 = { 5'd0, offset__h20257 } ;
  assign imm12__h21951 = { {6{imm6__h21949[5]}}, imm6__h21949 } ;
  assign imm12__h22620 = { {2{nzimm10__h22618[9]}}, nzimm10__h22618 } ;
  assign imm12__h22835 = { 2'd0, nzimm10__h22833 } ;
  assign imm12__h23031 = { 6'b0, imm6__h21949 } ;
  assign imm12__h23368 = { 6'b010000, imm6__h21949 } ;
  assign imm12__h24974 = { 3'd0, offset__h24888 } ;
  assign imm12__h25326 = { 4'd0, offset__h25260 } ;
  assign imm20__h22079 = { {14{imm6__h21949[5]}}, imm6__h21949 } ;
  assign imm6__h21949 = { stageD_rg_data[76], stageD_rg_data[70:66] } ;
  assign instr___1__h19800 =
	     (csr_regfile$read_misa[2] && stageD_rg_data[65:64] == 2'b10 &&
	      stageD_rg_data[75:71] != 5'd0 &&
	      stageD_rg_data[79:77] == 3'b010) ?
	       instr__h19977 :
	       IF_csr_regfile_read_misa__6_BIT_2_759_AND_stag_ETC___d2051 ;
  assign instr__h19977 =
	     { imm12__h19978, 8'd18, stageD_rg_data[75:71], 7'b0000011 } ;
  assign instr__h20122 =
	     { 4'd0,
	       stageD_rg_data[72:71],
	       stageD_rg_data[76],
	       stageD_rg_data[70:66],
	       8'd18,
	       offset_BITS_4_TO_0___h20246,
	       7'b0100011 } ;
  assign instr__h20314 =
	     { imm12__h20315, rs1__h20316, 3'b010, rd__h20317, 7'b0000011 } ;
  assign instr__h20509 =
	     { 5'd0,
	       stageD_rg_data[69],
	       stageD_rg_data[76],
	       rd__h20317,
	       rs1__h20316,
	       3'b010,
	       offset_BITS_4_TO_0___h20677,
	       7'b0100011 } ;
  assign instr__h20738 =
	     { SEXT_stageD_rg_data_754_BIT_76_771_CONCAT_stag_ETC___d1824[20],
	       SEXT_stageD_rg_data_754_BIT_76_771_CONCAT_stag_ETC___d1824[10:1],
	       SEXT_stageD_rg_data_754_BIT_76_771_CONCAT_stag_ETC___d1824[11],
	       SEXT_stageD_rg_data_754_BIT_76_771_CONCAT_stag_ETC___d1824[19:12],
	       12'd111 } ;
  assign instr__h21191 = { 12'd0, stageD_rg_data[75:71], 15'd103 } ;
  assign instr__h21307 = { 12'd0, stageD_rg_data[75:71], 15'd231 } ;
  assign instr__h21372 =
	     { SEXT_stageD_rg_data_754_BIT_76_771_CONCAT_stag_ETC___d1849[12],
	       SEXT_stageD_rg_data_754_BIT_76_771_CONCAT_stag_ETC___d1849[10:5],
	       5'd0,
	       rs1__h20316,
	       3'b0,
	       SEXT_stageD_rg_data_754_BIT_76_771_CONCAT_stag_ETC___d1849[4:1],
	       SEXT_stageD_rg_data_754_BIT_76_771_CONCAT_stag_ETC___d1849[11],
	       7'b1100011 } ;
  assign instr__h21689 =
	     { SEXT_stageD_rg_data_754_BIT_76_771_CONCAT_stag_ETC___d1849[12],
	       SEXT_stageD_rg_data_754_BIT_76_771_CONCAT_stag_ETC___d1849[10:5],
	       5'd0,
	       rs1__h20316,
	       3'b001,
	       SEXT_stageD_rg_data_754_BIT_76_771_CONCAT_stag_ETC___d1849[4:1],
	       SEXT_stageD_rg_data_754_BIT_76_771_CONCAT_stag_ETC___d1849[11],
	       7'b1100011 } ;
  assign instr__h22027 =
	     { imm12__h21951, 8'd0, stageD_rg_data[75:71], 7'b0010011 } ;
  assign instr__h22211 =
	     { imm20__h22079, stageD_rg_data[75:71], 7'b0110111 } ;
  assign instr__h22340 =
	     { imm12__h21951,
	       stageD_rg_data[75:71],
	       3'b0,
	       stageD_rg_data[75:71],
	       7'b0010011 } ;
  assign instr__h22567 =
	     { imm12__h21951,
	       stageD_rg_data[75:71],
	       3'b0,
	       stageD_rg_data[75:71],
	       7'b0011011 } ;
  assign instr__h22822 =
	     { imm12__h22620,
	       stageD_rg_data[75:71],
	       3'b0,
	       stageD_rg_data[75:71],
	       7'b0010011 } ;
  assign instr__h22994 = { imm12__h22835, 8'd16, rd__h20317, 7'b0010011 } ;
  assign instr__h23163 =
	     { imm12__h23031,
	       stageD_rg_data[75:71],
	       3'b001,
	       stageD_rg_data[75:71],
	       7'b0010011 } ;
  assign instr__h23352 =
	     { imm12__h23031, rs1__h20316, 3'b101, rs1__h20316, 7'b0010011 } ;
  assign instr__h23541 =
	     { imm12__h23368, rs1__h20316, 3'b101, rs1__h20316, 7'b0010011 } ;
  assign instr__h23658 =
	     { imm12__h21951, rs1__h20316, 3'b111, rs1__h20316, 7'b0010011 } ;
  assign instr__h23836 =
	     { 7'b0,
	       stageD_rg_data[70:66],
	       8'd0,
	       stageD_rg_data[75:71],
	       7'b0110011 } ;
  assign instr__h23954 =
	     { 7'b0,
	       stageD_rg_data[70:66],
	       stageD_rg_data[75:71],
	       3'b0,
	       stageD_rg_data[75:71],
	       7'b0110011 } ;
  assign instr__h24048 =
	     { 7'b0,
	       rd__h20317,
	       rs1__h20316,
	       3'b111,
	       rs1__h20316,
	       7'b0110011 } ;
  assign instr__h24182 =
	     { 7'b0,
	       rd__h20317,
	       rs1__h20316,
	       3'b110,
	       rs1__h20316,
	       7'b0110011 } ;
  assign instr__h24316 =
	     { 7'b0,
	       rd__h20317,
	       rs1__h20316,
	       3'b100,
	       rs1__h20316,
	       7'b0110011 } ;
  assign instr__h24450 =
	     { 7'b0100000,
	       rd__h20317,
	       rs1__h20316,
	       3'b0,
	       rs1__h20316,
	       7'b0110011 } ;
  assign instr__h24586 =
	     { 7'b0,
	       rd__h20317,
	       rs1__h20316,
	       3'b0,
	       rs1__h20316,
	       7'b0111011 } ;
  assign instr__h24722 =
	     { 7'b0100000,
	       rd__h20317,
	       rs1__h20316,
	       3'b0,
	       rs1__h20316,
	       7'b0111011 } ;
  assign instr__h24878 =
	     { 12'b000000000001,
	       stageD_rg_data[75:71],
	       3'b0,
	       stageD_rg_data[75:71],
	       7'b1110011 } ;
  assign instr__h24973 =
	     { imm12__h24974, 8'd19, stageD_rg_data[75:71], 7'b0000011 } ;
  assign instr__h25126 =
	     { 3'd0,
	       stageD_rg_data[73:71],
	       stageD_rg_data[76],
	       stageD_rg_data[70:66],
	       8'd19,
	       offset_BITS_4_TO_0___h25601,
	       7'b0100011 } ;
  assign instr__h25325 =
	     { imm12__h25326, rs1__h20316, 3'b011, rd__h20317, 7'b0000011 } ;
  assign instr__h25476 =
	     { 4'd0,
	       stageD_rg_data[70:69],
	       stageD_rg_data[76],
	       rd__h20317,
	       rs1__h20316,
	       3'b011,
	       offset_BITS_4_TO_0___h25601,
	       7'b0100011 } ;
  assign instr__h25681 =
	     { imm12__h19978, 8'd18, stageD_rg_data[75:71], 7'b0000111 } ;
  assign instr__h26481 =
	     { imm12__h24974, 8'd19, stageD_rg_data[75:71], 7'b0000111 } ;
  assign instr__h26646 =
	     { 3'd0,
	       stageD_rg_data[73:71],
	       stageD_rg_data[76],
	       stageD_rg_data[70:66],
	       8'd19,
	       offset_BITS_4_TO_0___h25601,
	       7'b0100111 } ;
  assign instr__h26845 =
	     { imm12__h25326, rs1__h20316, 3'b011, rd__h20317, 7'b0000111 } ;
  assign instr__h26996 =
	     { 4'd0,
	       stageD_rg_data[70:69],
	       stageD_rg_data[76],
	       rd__h20317,
	       rs1__h20316,
	       3'b011,
	       offset_BITS_4_TO_0___h25601,
	       7'b0100111 } ;
  assign instr_out___1__h27422 =
	     { near_mem$imem_instr[15:0], imem_rg_cache_b16 } ;
  assign instr_out___1__h27444 = { 16'b0, near_mem$imem_instr[15:0] } ;
  assign near_mem_imem_exc__1_OR_NOT_imem_rg_pc_BITS_1__ETC___d2204 =
	     near_mem$imem_exc ||
	     NOT_imem_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_rg__ETC___d2159 ||
	     imem_rg_pc[1:0] == 2'b0 &&
	     imem_rg_pc_BITS_63_TO_2_4_EQ_near_mem_imem_pc__ETC___d17 &&
	     near_mem$imem_instr[1:0] == 2'b11 ;
  assign near_mem_imem_exc__1_OR_NOT_imem_rg_pc_BITS_1__ETC___d2206 =
	     near_mem_imem_exc__1_OR_NOT_imem_rg_pc_BITS_1__ETC___d2204 ||
	     NOT_imem_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_rg__ETC___d2173 ||
	     imem_rg_pc[1:0] == 2'b0 &&
	     imem_rg_pc_BITS_63_TO_2_4_EQ_near_mem_imem_pc__ETC___d17 &&
	     near_mem$imem_instr[1:0] != 2'b11 ;
  assign near_mem_imem_pc__5_EQ_imem_rg_pc_PLUS_2_153___d2154 =
	     near_mem$imem_pc == imem_rg_pc + 64'd2 ;
  assign near_mem_imem_valid_AND_near_mem_imem_exc__1_A_ETC___d2301 =
	     near_mem$imem_valid && near_mem$imem_exc &&
	     near_mem$imem_exc_code != 4'd0 &&
	     near_mem$imem_exc_code != 4'd1 &&
	     near_mem$imem_exc_code != 4'd2 &&
	     near_mem$imem_exc_code != 4'd3 &&
	     near_mem$imem_exc_code != 4'd4 &&
	     near_mem$imem_exc_code != 4'd5 &&
	     near_mem$imem_exc_code != 4'd6 &&
	     near_mem$imem_exc_code != 4'd7 &&
	     near_mem$imem_exc_code != 4'd8 &&
	     near_mem$imem_exc_code != 4'd9 &&
	     near_mem$imem_exc_code != 4'd11 &&
	     near_mem$imem_exc_code != 4'd12 &&
	     near_mem$imem_exc_code != 4'd13 &&
	     near_mem$imem_exc_code != 4'd15 ;
  assign new_epoch__h29156 = rg_epoch + 2'd1 ;
  assign next_pc___1__h15461 = stage1_rg_stage_input[437:374] + 64'd2 ;
  assign next_pc__h10025 = x_out_next_pc__h10042 ;
  assign next_pc__h10575 =
	     stage1_rg_stage_input[437:374] +
	     { {43{stage1_rg_stage_input_BITS_66_TO_46__q3[20]}},
	       stage1_rg_stage_input_BITS_66_TO_46__q3 } ;
  assign next_pc__h10613 =
	     { IF_stage1_rg_stage_input_46_BITS_175_TO_171_50_ETC___d1312[63:1],
	       1'd0 } ;
  assign next_pc__h15457 = stage1_rg_stage_input[437:374] + 64'd4 ;
  assign nzimm10__h22618 =
	     { stageD_rg_data[76],
	       stageD_rg_data[68:67],
	       stageD_rg_data[69],
	       stageD_rg_data[66],
	       stageD_rg_data[70],
	       4'b0 } ;
  assign nzimm10__h22833 =
	     { stageD_rg_data[74:71],
	       stageD_rg_data[76:75],
	       stageD_rg_data[69],
	       stageD_rg_data[70],
	       2'b0 } ;
  assign offset_BITS_4_TO_0___h20246 = { stageD_rg_data[75:73], 2'b0 } ;
  assign offset_BITS_4_TO_0___h20677 =
	     { stageD_rg_data[75:74], stageD_rg_data[70], 2'b0 } ;
  assign offset_BITS_4_TO_0___h25601 = { stageD_rg_data[75:74], 3'b0 } ;
  assign offset__h19850 =
	     { stageD_rg_data[67:66],
	       stageD_rg_data[76],
	       stageD_rg_data[70:68],
	       2'b0 } ;
  assign offset__h20257 =
	     { stageD_rg_data[69],
	       stageD_rg_data[76:74],
	       stageD_rg_data[70],
	       2'b0 } ;
  assign offset__h20685 =
	     { stageD_rg_data[76],
	       stageD_rg_data[72],
	       stageD_rg_data[74:73],
	       stageD_rg_data[70],
	       stageD_rg_data[71],
	       stageD_rg_data[66],
	       stageD_rg_data[75],
	       stageD_rg_data[69:67],
	       1'b0 } ;
  assign offset__h21316 =
	     { stageD_rg_data[76],
	       stageD_rg_data[70:69],
	       stageD_rg_data[66],
	       stageD_rg_data[75:74],
	       stageD_rg_data[68:67],
	       1'b0 } ;
  assign offset__h24888 =
	     { stageD_rg_data[68:66],
	       stageD_rg_data[76],
	       stageD_rg_data[70:69],
	       3'b0 } ;
  assign offset__h25260 =
	     { stageD_rg_data[70:69], stageD_rg_data[76:74], 3'b0 } ;
  assign output_stage2___1_data_to_stage3_frd_val__h8330 =
	     stage2_rg_stage2[432] ?
	       ((stage2_rg_stage2[839:837] == 3'b010) ?
		  { 32'hFFFFFFFF, near_mem$dmem_word64[31:0] } :
		  near_mem$dmem_word64) :
	       stage2_rg_stage2[624:561] ;
  assign output_stage2___1_data_to_stage3_trace_data_word1__h31396 =
	     stage2_rg_stage2[432] ?
	       stage2_rg_stage2[319:256] :
	       near_mem$dmem_word64 ;
  assign output_stage2___1_data_to_stage3_trace_data_word1__h31417 =
	     stage2_rg_stage2[432] ?
	       stage2_rg_stage2[319:256] :
	       stage2_fbox$word_fst ;
  assign output_stage2___1_data_to_stage3_trace_data_word5__h31421 =
	     stage2_rg_stage2[432] ?
	       stage2_fbox$word_fst :
	       stage2_rg_stage2[63:0] ;
  assign rd__h20317 = { 2'b01, stageD_rg_data[68:66] } ;
  assign rd_val___1__h18575 =
	     rs1_val_bypassed__h5399 + _theResult_____2_snd__h18586 ;
  assign rd_val___1__h18705 =
	     rs1_val_bypassed__h5399 - _theResult_____2_snd__h18586 ;
  assign rd_val___1__h18708 =
	     ((rs1_val_bypassed__h5399 ^ 64'h8000000000000000) <
	      (_theResult_____2_snd__h18586 ^ 64'h8000000000000000)) ?
	       64'd1 :
	       64'd0 ;
  assign rd_val___1__h18714 =
	     (rs1_val_bypassed__h5399 < _theResult_____2_snd__h18586) ?
	       64'd1 :
	       64'd0 ;
  assign rd_val___1__h18720 =
	     rs1_val_bypassed__h5399 ^ _theResult_____2_snd__h18586 ;
  assign rd_val___1__h18723 =
	     rs1_val_bypassed__h5399 | _theResult_____2_snd__h18586 ;
  assign rd_val___1__h18726 =
	     rs1_val_bypassed__h5399 & _theResult_____2_snd__h18586 ;
  assign rd_val___1__h18742 =
	     { {32{IF_stage1_rg_stage_input_46_BITS_175_TO_171_50_ETC__q18[31]}},
	       IF_stage1_rg_stage_input_46_BITS_175_TO_171_50_ETC__q18 } ;
  assign rd_val___1__h18773 = { {32{x__h18776[31]}}, x__h18776 } ;
  assign rd_val___1__h18805 = { {32{x__h18808[31]}}, x__h18808 } ;
  assign rd_val___1__h18834 = { {32{tmp__h18833[31]}}, tmp__h18833 } ;
  assign rd_val___1__h18886 =
	     { {32{rs1_val_bypassed399_BITS_31_TO_0_PLUS_rs2_val0_ETC__q11[31]}},
	       rs1_val_bypassed399_BITS_31_TO_0_PLUS_rs2_val0_ETC__q11 } ;
  assign rd_val___1__h18934 =
	     { {32{rs1_val_bypassed399_BITS_31_TO_0_MINUS_rs2_val_ETC__q12[31]}},
	       rs1_val_bypassed399_BITS_31_TO_0_MINUS_rs2_val_ETC__q12 } ;
  assign rd_val___1__h18940 = { {32{x__h18943[31]}}, x__h18943 } ;
  assign rd_val___1__h18985 = { {32{x__h18988[31]}}, x__h18988 } ;
  assign rd_val__h11729 =
	     (stage1_rg_stage_input[148:146] == 3'd0) ?
	       rd_val___1__h18742 :
	       _theResult___fst__h14034 ;
  assign rd_val__h11785 = { {32{v32__h11783[31]}}, v32__h11783 } ;
  assign rd_val__h11809 = stage1_rg_stage_input[437:374] + rd_val__h11785 ;
  assign rd_val__h18428 = rs1_val_bypassed__h5399 << shamt__h10730 ;
  assign rd_val__h18479 = rs1_val_bypassed__h5399 >> shamt__h10730 ;
  assign rd_val__h18501 =
	     rs1_val_bypassed__h5399 >> shamt__h10730 |
	     ~(64'hFFFFFFFFFFFFFFFF >> shamt__h10730) &
	     {64{rs1_val_bypassed__h5399[63]}} ;
  assign rd_val__h9862 =
	     (!stage3_rg_stage3[496] && stage3_rg_full &&
	      stage3_rg_stage3[567] &&
	      stage3_rg_stage3_00_BITS_566_TO_562_09_EQ_stag_ETC___d422) ?
	       stage3_rg_stage3[561:498] :
	       gpr_regfile$read_rs1 ;
  assign rd_val__h9895 =
	     (!stage3_rg_stage3[496] && stage3_rg_full &&
	      stage3_rg_stage3[567] &&
	      stage3_rg_stage3_00_BITS_566_TO_562_09_EQ_stag_ETC___d430) ?
	       stage3_rg_stage3[561:498] :
	       gpr_regfile$read_rs2 ;
  assign rd_val__h9928 =
	     (stage3_rg_stage3[496] && stage3_rg_full &&
	      stage3_rg_stage3[567] &&
	      stage3_rg_stage3_00_BITS_566_TO_562_09_EQ_stag_ETC___d422) ?
	       stage3_rg_stage3[490:427] :
	       fpr_regfile$read_rs1 ;
  assign rd_val__h9959 =
	     (stage3_rg_stage3[496] && stage3_rg_full &&
	      stage3_rg_stage3[567] &&
	      stage3_rg_stage3_00_BITS_566_TO_562_09_EQ_stag_ETC___d430) ?
	       stage3_rg_stage3[490:427] :
	       fpr_regfile$read_rs2 ;
  assign rd_val__h9993 =
	     (stage3_rg_stage3[496] && stage3_rg_full &&
	      stage3_rg_stage3[567] &&
	      stage3_rg_stage3[566:562] == stage1_rg_stage_input[165:161]) ?
	       stage3_rg_stage3[490:427] :
	       fpr_regfile$read_rs3 ;
  assign result___1__h34904 = { 16'd0, stage1_rg_stage_input[267:252] } ;
  assign rg_cur_priv_8_EQ_0b11_111_OR_rg_cur_priv_8_EQ__ETC___d1176 =
	     (rg_cur_priv == 2'b11 ||
	      rg_cur_priv == 2'b01 && !csr_regfile$read_mstatus[21] ||
	      rg_cur_priv == 2'b0 && csr_regfile$read_misa[13]) &&
	     stage1_rg_stage_input[123:112] == 12'b000100000101 ;
  assign rg_cur_priv_8_EQ_0b11_111_OR_rg_cur_priv_8_EQ__ETC___d1241 =
	     (rg_cur_priv == 2'b11 ||
	      rg_cur_priv == 2'b01 && !csr_regfile$read_mstatus[20]) &&
	     stage1_rg_stage_input[140:134] == 7'b0001001 ||
	     stage1_rg_stage_input[180:176] != 5'd0 ||
	     stage1_rg_stage_input[175:171] != 5'd0 ||
	     rg_cur_priv != 2'b11 &&
	     (rg_cur_priv != 2'b01 || csr_regfile$read_mstatus[22]) ||
	     stage1_rg_stage_input[123:112] != 12'b000100000010 ;
  assign rg_cur_priv_8_EQ_0b11_111_OR_rg_cur_priv_8_EQ__ETC___d1255 =
	     (rg_cur_priv == 2'b11 ||
	      rg_cur_priv == 2'b01 && !csr_regfile$read_mstatus[20]) &&
	     stage1_rg_stage_input[140:134] == 7'b0001001 ||
	     stage1_rg_stage_input[180:176] != 5'd0 ||
	     stage1_rg_stage_input[175:171] != 5'd0 ||
	     NOT_rg_cur_priv_8_EQ_0b11_111_143_AND_NOT_rg_c_ETC___d1253 ;
  assign rg_cur_priv_8_EQ_0b11_111_OR_rg_cur_priv_8_EQ__ETC___d1722 =
	     (rg_cur_priv == 2'b11 ||
	      rg_cur_priv == 2'b01 && !csr_regfile$read_mstatus[20]) &&
	     stage1_rg_stage_input[140:134] == 7'b0001001 ||
	     stage1_rg_stage_input[180:176] != 5'd0 ||
	     stage1_rg_stage_input[175:171] != 5'd0 ||
	     stage1_rg_stage_input[123:112] != 12'b0 &&
	     stage1_rg_stage_input[123:112] != 12'b000000000001 ;
  assign rg_state_7_EQ_12_4_AND_csr_regfile_wfi_resume__ETC___d3289 =
	     rg_state == 4'd12 && csr_regfile$wfi_resume &&
	     (!stageF_rg_full ||
	      near_mem$imem_valid &&
	      near_mem_imem_exc__1_OR_NOT_imem_rg_pc_BITS_1__ETC___d2206) ;
  assign rg_state_7_EQ_3_370_AND_csr_regfile_csr_mip_re_ETC___d3031 =
	     rg_state == 4'd3 &&
	     csr_regfile_csr_mip_read__380_EQ_rg_prev_mip_381___d2382 &&
	     NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d3028 &&
	     !stage3_rg_full ;
  assign rg_state_7_EQ_3_370_AND_csr_regfile_csr_mip_re_ETC___d3058 =
	     rg_state_7_EQ_3_370_AND_csr_regfile_csr_mip_re_ETC___d3031 &&
	     !stage2_rg_full &&
	     stage1_rg_full &&
	     stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d2450 &&
	     (stage1_rg_stage_input[368] ||
	      ((stage1_rg_stage_input[187:181] == 7'b1100011) ?
		 stage1_rg_stage_input[148:146] != 3'd0 &&
		 stage1_rg_stage_input[148:146] != 3'b001 &&
		 stage1_rg_stage_input[148:146] != 3'b100 &&
		 stage1_rg_stage_input[148:146] != 3'b101 &&
		 stage1_rg_stage_input[148:146] != 3'b110 &&
		 stage1_rg_stage_input[148:146] != 3'b111 :
		 stage1_rg_stage_input[187:181] != 7'b1101111 &&
		 ((stage1_rg_stage_input[187:181] == 7'b1100111) ?
		    stage1_rg_stage_input[148:146] != 3'd0 :
		    NOT_stage1_rg_stage_input_46_BITS_187_TO_181_9_ETC___d3053))) ;
  assign rg_state_7_EQ_3_370_AND_csr_regfile_csr_mip_re_ETC___d3115 =
	     rg_state == 4'd3 &&
	     csr_regfile_csr_mip_read__380_EQ_rg_prev_mip_3_ETC___d3112 &&
	     !stage3_rg_full &&
	     !stage2_rg_full ;
  assign rg_state_7_EQ_3_370_AND_csr_regfile_csr_mip_re_ETC___d3226 =
	     rg_state_7_EQ_3_370_AND_csr_regfile_csr_mip_re_ETC___d3031 &&
	     !stage2_rg_full &&
	     stage1_rg_full &&
	     stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d2450 &&
	     IF_stage1_rg_full_45_THEN_stage1_rg_stage_inpu_ETC___d3225 ;
  assign rg_state_7_EQ_3_370_AND_csr_regfile_csr_mip_re_ETC___d3227 =
	     rg_state_7_EQ_3_370_AND_csr_regfile_csr_mip_re_ETC___d3226 &&
	     (!stageF_rg_full ||
	      near_mem$imem_valid &&
	      near_mem_imem_exc__1_OR_NOT_imem_rg_pc_BITS_1__ETC___d2206) ;
  assign rg_state_7_EQ_3_370_AND_csr_regfile_csr_mip_re_ETC___d3245 =
	     rg_state_7_EQ_3_370_AND_csr_regfile_csr_mip_re_ETC___d3115 &&
	     stage1_rg_full &&
	     stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d2450 &&
	     !stage1_rg_stage_input[368] &&
	     stage1_rg_stage_input[187:181] == 7'b0001111 &&
	     stage1_rg_stage_input_46_BITS_148_TO_146_94_EQ_ETC___d1101 ;
  assign rg_state_7_EQ_3_370_AND_csr_regfile_csr_mip_re_ETC___d3246 =
	     rg_state_7_EQ_3_370_AND_csr_regfile_csr_mip_re_ETC___d3245 &&
	     (!stageF_rg_full ||
	      near_mem$imem_valid &&
	      near_mem_imem_exc__1_OR_NOT_imem_rg_pc_BITS_1__ETC___d2206) ;
  assign rg_state_7_EQ_3_370_AND_csr_regfile_csr_mip_re_ETC___d3255 =
	     rg_state_7_EQ_3_370_AND_csr_regfile_csr_mip_re_ETC___d3115 &&
	     stage1_rg_full &&
	     stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d2450 &&
	     !stage1_rg_stage_input[368] &&
	     stage1_rg_stage_input[187:181] == 7'b0001111 &&
	     stage1_rg_stage_input_46_BITS_148_TO_146_94_EQ_ETC___d1087 ;
  assign rg_state_7_EQ_3_370_AND_csr_regfile_csr_mip_re_ETC___d3256 =
	     rg_state_7_EQ_3_370_AND_csr_regfile_csr_mip_re_ETC___d3255 &&
	     (!stageF_rg_full ||
	      near_mem$imem_valid &&
	      near_mem_imem_exc__1_OR_NOT_imem_rg_pc_BITS_1__ETC___d2206) ;
  assign rg_state_7_EQ_3_370_AND_csr_regfile_csr_mip_re_ETC___d3266 =
	     rg_state_7_EQ_3_370_AND_csr_regfile_csr_mip_re_ETC___d3115 &&
	     stage1_rg_full &&
	     stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d2450 &&
	     NOT_stage1_rg_stage_input_46_BIT_368_91_29_AND_ETC___d1120 &&
	     (!stageF_rg_full ||
	      near_mem$imem_valid &&
	      near_mem_imem_exc__1_OR_NOT_imem_rg_pc_BITS_1__ETC___d2206) ;
  assign rg_state_7_EQ_3_370_AND_csr_regfile_csr_mip_re_ETC___d3275 =
	     rg_state_7_EQ_3_370_AND_csr_regfile_csr_mip_re_ETC___d3115 &&
	     stage1_rg_full &&
	     stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d2450 &&
	     NOT_stage1_rg_stage_input_46_BIT_368_91_29_AND_ETC___d1181 &&
	     (!stageF_rg_full ||
	      near_mem$imem_valid &&
	      near_mem_imem_exc__1_OR_NOT_imem_rg_pc_BITS_1__ETC___d2206) ;
  assign rg_state_7_EQ_3_370_AND_stage1_rg_full_45_AND__ETC___d2385 =
	     rg_state == 4'd3 && stage1_rg_full &&
	     NOT_stage1_rg_stage_input_46_BITS_371_TO_370_4_ETC___d2372 &&
	     IF_NOT_stage1_rg_full_45_028_OR_NOT_stage1_rg__ETC___d2376 &&
	     !stage2_rg_full &&
	     !stage3_rg_full &&
	     !csr_regfile_csr_mip_read__380_EQ_rg_prev_mip_381___d2382 ;
  assign rg_state_7_EQ_3_370_AND_stage3_rg_full_8_OR_st_ETC___d2444 =
	     rg_state == 4'd3 &&
	     (stage3_rg_full || stage2_rg_full || stage1_rg_full ||
	      stageD_rg_full ||
	      stageF_rg_full) &&
	     stage3_rg_full_8_OR_NOT_stage2_rg_full_14_71_O_ETC___d2443 ;
  assign rg_state_7_EQ_4_065_AND_NOT_stageF_rg_full_181_ETC___d3066 =
	     rg_state == 4'd4 &&
	     (!stageF_rg_full ||
	      near_mem$imem_valid &&
	      near_mem_imem_exc__1_OR_NOT_imem_rg_pc_BITS_1__ETC___d2206) ;
  assign rg_state_7_EQ_5_293_AND_NOT_stageF_rg_full_181_ETC___d3294 =
	     rg_state == 4'd5 &&
	     (!stageF_rg_full ||
	      near_mem$imem_valid &&
	      near_mem_imem_exc__1_OR_NOT_imem_rg_pc_BITS_1__ETC___d2206) ;
  assign rg_state_7_EQ_8_192_AND_NOT_stageF_rg_full_181_ETC___d3193 =
	     rg_state == 4'd8 &&
	     (!stageF_rg_full ||
	      near_mem$imem_valid &&
	      near_mem_imem_exc__1_OR_NOT_imem_rg_pc_BITS_1__ETC___d2206) ;
  assign rg_trap_info_068_BITS_131_TO_68_069_EQ_csr_reg_ETC___d3090 =
	     rg_trap_info[131:68] == csr_regfile$csr_trap_actions[193:130] ;
  assign rm__h10518 =
	     (stage1_rg_stage_input[148:146] == 3'b111) ?
	       csr_regfile$read_frm :
	       stage1_rg_stage_input[148:146] ;
  assign rs1__h20316 = { 2'b01, stageD_rg_data[73:71] } ;
  assign rs1_val__h44544 =
	     (rg_trap_instr[14:12] == 3'b001) ?
	       rg_csr_val1 :
	       { 59'd0, rg_trap_instr[19:15] } ;
  assign rs1_val_bypassed399_BITS_31_TO_0_MINUS_rs2_val_ETC__q12 =
	     rs1_val_bypassed__h5399[31:0] - rs2_val__h10533[31:0] ;
  assign rs1_val_bypassed399_BITS_31_TO_0_PLUS_rs2_val0_ETC__q11 =
	     rs1_val_bypassed__h5399[31:0] + rs2_val__h10533[31:0] ;
  assign rs1_val_bypassed399_BITS_31_TO_0_SRL_rs2_val05_ETC__q10 =
	     rs1_val_bypassed__h5399[31:0] >> rs2_val__h10533[4:0] |
	     ~(32'hFFFFFFFF >> rs2_val__h10533[4:0]) &
	     {32{rs1_val_bypassed399_BITS_31_TO_0__q9[31]}} ;
  assign rs1_val_bypassed399_BITS_31_TO_0__q9 =
	     rs1_val_bypassed__h5399[31:0] ;
  assign rs1_val_bypassed__h5399 =
	     (stage1_rg_stage_input[175:171] == 5'd0) ? 64'd0 : val__h9864 ;
  assign rs2_val__h10533 =
	     (stage1_rg_stage_input[170:166] == 5'd0) ? 64'd0 : val__h9897 ;
  assign rs2_val_local___1__h18588 =
	     { {52{stage1_rg_stage_input_BITS_31_TO_20__q4[11]}},
	       stage1_rg_stage_input_BITS_31_TO_20__q4 } ;
  assign shamt__h10730 =
	     (stage1_rg_stage_input[187:181] == 7'b0010011) ?
	       stage1_rg_stage_input[117:112] :
	       rs2_val__h10533[5:0] ;
  assign stage1_rg_full_45_AND_NOT_stage1_rg_stage_inpu_ETC___d3302 =
	     stage1_rg_full &&
	     NOT_stage1_rg_stage_input_46_BITS_371_TO_370_4_ETC___d2372 &&
	     !stage2_rg_full &&
	     !stage3_rg_full &&
	     csr_regfile_csr_mip_read__380_EQ_rg_prev_mip_381___d2382 &&
	     (NOT_stage1_rg_stage_input_46_BITS_371_TO_370_4_ETC___d2440 &&
	      stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d348 ||
	      stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d2450) ;
  assign stage1_rg_full_45_AND_NOT_stage2_rg_full_14_71_ETC___d1042 =
	     stage1_rg_full &&
	     NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d382 &&
	     NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d389 &&
	     stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d348 &&
	     NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d1037 &&
	     !stage1_rg_stage_input[368] &&
	     IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d1017 ;
  assign stage1_rg_full_45_AND_NOT_stage2_rg_full_14_71_ETC___d1050 =
	     stage1_rg_full &&
	     NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d382 &&
	     NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d389 &&
	     stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d348 &&
	     stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1047 ;
  assign stage1_rg_full_45_AND_NOT_stage2_rg_full_14_71_ETC___d1376 =
	     stage1_rg_full &&
	     NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d382 &&
	     NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d389 &&
	     stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1024 &&
	     stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d1360 &&
	     NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d1037 &&
	     (stage1_rg_stage_input[187:181] == 7'b0000011 ||
	      stage1_rg_stage_input[187:181] == 7'b0000111) ;
  assign stage1_rg_full_45_AND_NOT_stage2_rg_full_14_71_ETC___d1433 =
	     stage1_rg_full &&
	     NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d382 &&
	     NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d389 &&
	     stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1024 &&
	     stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d1360 &&
	     NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d1037 &&
	     stage1_rg_stage_input[187:181] == 7'b0101111 ;
  assign stage1_rg_full_45_AND_NOT_stage2_rg_full_14_71_ETC___d1459 =
	     stage1_rg_full &&
	     NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d382 &&
	     NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d389 &&
	     stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1024 &&
	     stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d1438 &&
	     stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1408 &&
	     stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1418 &&
	     stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1453 ;
  assign stage1_rg_full_45_AND_stage1_rg_stage_input_46_ETC___d377 =
	     stage1_rg_full &&
	     stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d348 &&
	     (stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d355 ||
	      stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d363) ;
  assign stage1_rg_stage_input_46_BITS_135_TO_134_14_EQ_ETC___d1001 =
	     (stage1_rg_stage_input[135:134] == 2'b0 ||
	      stage1_rg_stage_input[135:134] == 2'b01) &&
	     (stage1_rg_stage_input[187:181] == 7'b1000011 ||
	      stage1_rg_stage_input[187:181] == 7'b1000111 ||
	      stage1_rg_stage_input[187:181] == 7'b1001111 ||
	      stage1_rg_stage_input[187:181] == 7'b1001011) ||
	     stage1_rg_stage_input[187:181] == 7'b1010011 &&
	     stage1_rg_stage_input_46_BITS_140_TO_134_53_EQ_ETC___d941 ||
	     stage1_rg_stage_input[187:181] == 7'b1010011 &&
	     (stage1_rg_stage_input[140:134] == 7'h60 ||
	      stage1_rg_stage_input[140:134] == 7'h68) &&
	     (stage1_rg_stage_input[170:166] == 5'b00010 ||
	      stage1_rg_stage_input[170:166] == 5'b00011) ||
	     stage1_rg_stage_input[187:181] == 7'b1010011 &&
	     (stage1_rg_stage_input_46_BITS_140_TO_134_53_EQ_ETC___d985 ||
	      stage1_rg_stage_input[140:134] == 7'h69 &&
	      stage1_rg_stage_input[170:166] == 5'b00001) ||
	     stage1_rg_stage_input[187:181] == 7'b1010011 &&
	     (stage1_rg_stage_input[140:134] == 7'h61 &&
	      (stage1_rg_stage_input[170:166] == 5'b00010 ||
	       stage1_rg_stage_input[170:166] == 5'b00011) ||
	      stage1_rg_stage_input[140:134] == 7'h71 &&
	      stage1_rg_stage_input[170:166] == 5'd0 &&
	      rm__h10518 == 3'b0 ||
	      stage1_rg_stage_input[140:134] == 7'h69 &&
	      stage1_rg_stage_input[170:166] == 5'b00010 ||
	      stage1_rg_stage_input[140:134] == 7'h69 &&
	      stage1_rg_stage_input[170:166] == 5'b00011 ||
	      stage1_rg_stage_input[140:134] == 7'h79 &&
	      stage1_rg_stage_input[170:166] == 5'd0 &&
	      rm__h10518 == 3'b0) ;
  assign stage1_rg_stage_input_46_BITS_135_TO_134_14_EQ_ETC___d2599 =
	     (stage1_rg_stage_input[135:134] == 2'b0 ||
	      stage1_rg_stage_input[135:134] == 2'b01) &&
	     (stage1_rg_stage_input[187:181] == 7'b1000011 ||
	      stage1_rg_stage_input[187:181] == 7'b1000111 ||
	      stage1_rg_stage_input[187:181] == 7'b1001111 ||
	      stage1_rg_stage_input[187:181] == 7'b1001011) ||
	     stage1_rg_stage_input[187:181] == 7'b1010011 &&
	     stage1_rg_stage_input_46_BITS_140_TO_134_53_EQ_ETC___d2578 ||
	     stage1_rg_stage_input[187:181] == 7'b1010011 &&
	     stage1_rg_stage_input[140:134] == 7'h68 &&
	     (stage1_rg_stage_input[170:166] == 5'b00010 ||
	      stage1_rg_stage_input[170:166] == 5'b00011) ||
	     stage1_rg_stage_input[187:181] == 7'b1010011 &&
	     (stage1_rg_stage_input_46_BITS_140_TO_134_53_EQ_ETC___d968 ||
	      stage1_rg_stage_input[140:134] == 7'h21 &&
	      stage1_rg_stage_input[170:166] == 5'd0 ||
	      stage1_rg_stage_input[140:134] == 7'h69 &&
	      stage1_rg_stage_input[170:166] == 5'd0 ||
	      stage1_rg_stage_input[140:134] == 7'h69 &&
	      stage1_rg_stage_input[170:166] == 5'b00001) ||
	     stage1_rg_stage_input[187:181] == 7'b1010011 &&
	     (stage1_rg_stage_input[140:134] == 7'h69 &&
	      (stage1_rg_stage_input[170:166] == 5'b00010 ||
	       stage1_rg_stage_input[170:166] == 5'b00011) ||
	      stage1_rg_stage_input[140:134] == 7'h79 &&
	      stage1_rg_stage_input[170:166] == 5'd0 &&
	      rm__h10518 == 3'b0) ;
  assign stage1_rg_stage_input_46_BITS_140_TO_134_53_EQ_ETC___d2578 =
	     stage1_rg_stage_input_46_BITS_140_TO_134_53_EQ_ETC___d917 ||
	     stage1_rg_stage_input[140:134] == 7'h14 &&
	     rm__h10518 == 3'b001 ||
	     stage1_rg_stage_input[140:134] == 7'h68 &&
	     stage1_rg_stage_input[170:166] == 5'd0 ||
	     stage1_rg_stage_input[140:134] == 7'h68 &&
	     stage1_rg_stage_input[170:166] == 5'b00001 ||
	     stage1_rg_stage_input[140:134] == 7'h78 &&
	     stage1_rg_stage_input[170:166] == 5'd0 &&
	     rm__h10518 == 3'b0 ;
  assign stage1_rg_stage_input_46_BITS_140_TO_134_53_EQ_ETC___d917 =
	     stage1_rg_stage_input[140:134] == 7'h0 ||
	     stage1_rg_stage_input[140:134] == 7'h04 ||
	     stage1_rg_stage_input[140:134] == 7'h08 ||
	     stage1_rg_stage_input[140:134] == 7'h0C ||
	     stage1_rg_stage_input[140:134] == 7'h2C &&
	     stage1_rg_stage_input[170:166] == 5'd0 ||
	     stage1_rg_stage_input[140:134] == 7'h10 && rm__h10518 == 3'b0 ||
	     stage1_rg_stage_input[140:134] == 7'h10 &&
	     (rm__h10518 == 3'b001 || rm__h10518 == 3'b010) ||
	     stage1_rg_stage_input[140:134] == 7'h14 && rm__h10518 == 3'b0 ;
  assign stage1_rg_stage_input_46_BITS_140_TO_134_53_EQ_ETC___d926 =
	     stage1_rg_stage_input_46_BITS_140_TO_134_53_EQ_ETC___d917 ||
	     stage1_rg_stage_input[140:134] == 7'h14 &&
	     rm__h10518 == 3'b001 ||
	     stage1_rg_stage_input[140:134] == 7'h60 &&
	     stage1_rg_stage_input[170:166] == 5'd0 ||
	     stage1_rg_stage_input[140:134] == 7'h60 &&
	     stage1_rg_stage_input[170:166] == 5'b00001 ||
	     stage1_rg_stage_input[140:134] == 7'h70 &&
	     stage1_rg_stage_input[170:166] == 5'd0 &&
	     rm__h10518 == 3'b0 ;
  assign stage1_rg_stage_input_46_BITS_140_TO_134_53_EQ_ETC___d934 =
	     stage1_rg_stage_input_46_BITS_140_TO_134_53_EQ_ETC___d926 ||
	     stage1_rg_stage_input[140:134] == 7'h50 &&
	     (rm__h10518 == 3'b010 || rm__h10518 == 3'b001 ||
	      rm__h10518 == 3'b0) ||
	     stage1_rg_stage_input[140:134] == 7'h70 &&
	     stage1_rg_stage_input[170:166] == 5'd0 &&
	     rm__h10518 == 3'b001 ;
  assign stage1_rg_stage_input_46_BITS_140_TO_134_53_EQ_ETC___d941 =
	     stage1_rg_stage_input_46_BITS_140_TO_134_53_EQ_ETC___d934 ||
	     stage1_rg_stage_input[140:134] == 7'h68 &&
	     (stage1_rg_stage_input[170:166] == 5'd0 ||
	      stage1_rg_stage_input[170:166] == 5'b00001) ||
	     stage1_rg_stage_input[140:134] == 7'h78 &&
	     stage1_rg_stage_input[170:166] == 5'd0 &&
	     rm__h10518 == 3'b0 ;
  assign stage1_rg_stage_input_46_BITS_140_TO_134_53_EQ_ETC___d968 =
	     stage1_rg_stage_input[140:134] == 7'b0000001 ||
	     stage1_rg_stage_input[140:134] == 7'h05 ||
	     stage1_rg_stage_input[140:134] == 7'b0001001 ||
	     stage1_rg_stage_input[140:134] == 7'h0D ||
	     stage1_rg_stage_input[140:134] == 7'h2D &&
	     stage1_rg_stage_input[170:166] == 5'd0 ||
	     stage1_rg_stage_input[140:134] == 7'h11 && rm__h10518 == 3'b0 ||
	     stage1_rg_stage_input[140:134] == 7'h11 &&
	     (rm__h10518 == 3'b001 || rm__h10518 == 3'b010) ||
	     stage1_rg_stage_input[140:134] == 7'h15 && rm__h10518 == 3'b0 ||
	     stage1_rg_stage_input[140:134] == 7'h15 &&
	     rm__h10518 == 3'b001 ||
	     stage1_rg_stage_input[140:134] == 7'h20 &&
	     stage1_rg_stage_input[170:166] == 5'b00001 ;
  assign stage1_rg_stage_input_46_BITS_140_TO_134_53_EQ_ETC___d979 =
	     stage1_rg_stage_input_46_BITS_140_TO_134_53_EQ_ETC___d968 ||
	     stage1_rg_stage_input[140:134] == 7'h21 &&
	     stage1_rg_stage_input[170:166] == 5'd0 ||
	     stage1_rg_stage_input[140:134] == 7'h51 &&
	     rm__h10518 == 3'b010 ||
	     stage1_rg_stage_input[140:134] == 7'h51 &&
	     (rm__h10518 == 3'b001 || rm__h10518 == 3'b0) ||
	     stage1_rg_stage_input[140:134] == 7'h71 &&
	     stage1_rg_stage_input[170:166] == 5'd0 &&
	     rm__h10518 == 3'b001 ;
  assign stage1_rg_stage_input_46_BITS_140_TO_134_53_EQ_ETC___d985 =
	     stage1_rg_stage_input_46_BITS_140_TO_134_53_EQ_ETC___d979 ||
	     stage1_rg_stage_input[140:134] == 7'h61 &&
	     (stage1_rg_stage_input[170:166] == 5'd0 ||
	      stage1_rg_stage_input[170:166] == 5'b00001) ||
	     stage1_rg_stage_input[140:134] == 7'h69 &&
	     stage1_rg_stage_input[170:166] == 5'd0 ;
  assign stage1_rg_stage_input_46_BITS_148_TO_146_94_EQ_ETC___d1087 =
	     stage1_rg_stage_input[148:146] == 3'd0 &&
	     stage1_rg_stage_input[180:176] == 5'd0 &&
	     stage1_rg_stage_input[175:171] == 5'd0 &&
	     (stage1_rg_stage_input[299:296] == 4'b0 ||
	      stage1_rg_stage_input[299:296] == 4'b1000) ;
  assign stage1_rg_stage_input_46_BITS_148_TO_146_94_EQ_ETC___d1101 =
	     stage1_rg_stage_input[148:146] == 3'b001 &&
	     stage1_rg_stage_input[180:176] == 5'd0 &&
	     stage1_rg_stage_input[175:171] == 5'd0 &&
	     stage1_rg_stage_input[123:112] == 12'b0 ;
  assign stage1_rg_stage_input_46_BITS_180_TO_176_079_E_ETC___d1117 =
	     stage1_rg_stage_input[180:176] == 5'd0 &&
	     (rg_cur_priv == 2'b11 ||
	      rg_cur_priv == 2'b01 && !csr_regfile$read_mstatus[20]) &&
	     stage1_rg_stage_input[140:134] == 7'b0001001 ;
  assign stage1_rg_stage_input_46_BITS_180_TO_176_079_E_ETC___d1155 =
	     stage1_rg_stage_input[180:176] == 5'd0 &&
	     stage1_rg_stage_input[175:171] == 5'd0 &&
	     (rg_cur_priv == 2'b11 ||
	      rg_cur_priv == 2'b01 && !csr_regfile$read_mstatus[22]) &&
	     stage1_rg_stage_input[123:112] == 12'b000100000010 ;
  assign stage1_rg_stage_input_46_BITS_187_TO_181_92_EQ_ETC___d1014 =
	     stage1_rg_stage_input[187:181] == 7'b0110011 &&
	     stage1_rg_stage_input[140:134] == 7'b0000001 ||
	     stage1_rg_stage_input_46_BITS_187_TO_181_92_EQ_ETC___d840 ||
	     (((stage1_rg_stage_input[187:181] == 7'b0010011 ||
		stage1_rg_stage_input[187:181] == 7'b0110011) &&
	       (stage1_rg_stage_input[148:146] == 3'b001 ||
		stage1_rg_stage_input[148:146] == 3'b101)) ?
		!stage1_rg_stage_input[299] &&
		stage1_rg_stage_input[297:294] == 4'b0 :
		IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d1012) ;
  assign stage1_rg_stage_input_46_BITS_187_TO_181_92_EQ_ETC___d1347 =
	     stage1_rg_stage_input[187:181] == 7'b1100111 ||
	     (stage1_rg_stage_input[187:181] != 7'b0110011 ||
	      stage1_rg_stage_input[140:134] != 7'b0000001) &&
	     NOT_stage1_rg_stage_input_46_BITS_187_TO_181_9_ETC___d464 &&
	     ((stage1_rg_stage_input[187:181] == 7'b0010011 ||
	       stage1_rg_stage_input[187:181] == 7'b0110011) &&
	      (stage1_rg_stage_input[148:146] == 3'b001 ||
	       stage1_rg_stage_input[148:146] == 3'b101) ||
	      CASE_stage1_rg_stage_input_BITS_187_TO_181_0b1_ETC__q19) ;
  assign stage1_rg_stage_input_46_BITS_187_TO_181_92_EQ_ETC___d1398 =
	     stage1_rg_stage_input_46_BITS_187_TO_181_92_EQ_ETC___d840 ||
	     (stage1_rg_stage_input[187:181] != 7'b0010011 &&
	      stage1_rg_stage_input[187:181] != 7'b0110011 ||
	      stage1_rg_stage_input[148:146] != 3'b001 &&
	      stage1_rg_stage_input[148:146] != 3'b101) &&
	     IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d1358 ;
  assign stage1_rg_stage_input_46_BITS_187_TO_181_92_EQ_ETC___d1461 =
	     stage1_rg_stage_input[187:181] == 7'b0110011 &&
	     stage1_rg_stage_input[140:134] == 7'b0000001 ||
	     stage1_rg_stage_input_46_BITS_187_TO_181_92_EQ_ETC___d840 ||
	     (stage1_rg_stage_input[187:181] == 7'b0010011 ||
	      stage1_rg_stage_input[187:181] == 7'b0110011) &&
	     (stage1_rg_stage_input[148:146] == 3'b001 ||
	      stage1_rg_stage_input[148:146] == 3'b101) ;
  assign stage1_rg_stage_input_46_BITS_187_TO_181_92_EQ_ETC___d3220 =
	     stage1_rg_stage_input[187:181] == 7'b1110011 &&
	     stage1_rg_stage_input[148:146] == 3'd0 &&
	     (rg_cur_priv != 2'b11 &&
	      (rg_cur_priv != 2'b01 || csr_regfile$read_mstatus[20]) ||
	      stage1_rg_stage_input[140:134] != 7'b0001001) &&
	     stage1_rg_stage_input_46_BITS_180_TO_176_079_E_ETC___d1155 ;
  assign stage1_rg_stage_input_46_BITS_187_TO_181_92_EQ_ETC___d840 =
	     stage1_rg_stage_input[187:181] == 7'b0111011 &&
	     stage1_rg_stage_input[140:134] == 7'b0000001 &&
	     stage1_rg_stage_input[148:146] != 3'b001 &&
	     stage1_rg_stage_input[148:146] != 3'b010 &&
	     stage1_rg_stage_input[148:146] != 3'b011 ;
  assign stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d1360 =
	     stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d348 &&
	     (stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d355 ||
	      stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d363 ||
	      IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d1358) ;
  assign stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d1438 =
	     stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d348 &&
	     (stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d355 ||
	      stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d363 ||
	      stage1_rg_stage_input[187:181] != 7'b1100011 &&
	      NOT_stage1_rg_stage_input_46_BITS_187_TO_181_9_ETC___d1435) ;
  assign stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d1673 =
	     stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d348 &&
	     NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d824 &&
	     NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d1037 &&
	     !stage1_rg_stage_input[368] &&
	     IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d1017 ;
  assign stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d2450 =
	     stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d348 &&
	     (stage1_rg_stage_input[368] ||
	      IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d809 &&
	      IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d821) ;
  assign stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d2879 =
	     stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d348 &&
	     IF_NOT_stage1_rg_full_45_028_OR_NOT_stage1_rg__ETC___d2376 &&
	     NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56 &&
	     (stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d355 ||
	      stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d363 ||
	      IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d1358) &&
	     stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1391 ;
  assign stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d348 =
	     stage1_rg_stage_input[371:370] == rg_epoch ;
  assign stage1_rg_stage_input_46_BIT_368_91_OR_NOT_rg__ETC___d1148 =
	     stage1_rg_stage_input[368] ||
	     rg_cur_priv != 2'b11 &&
	     (rg_cur_priv != 2'b01 || csr_regfile$read_mstatus[20]) ||
	     stage1_rg_stage_input[140:134] != 7'b0001001 ;
  assign stage1_rg_stage_input_BITS_111_TO_100__q8 =
	     stage1_rg_stage_input[111:100] ;
  assign stage1_rg_stage_input_BITS_123_TO_112__q17 =
	     stage1_rg_stage_input[123:112] ;
  assign stage1_rg_stage_input_BITS_31_TO_0__q26 =
	     stage1_rg_stage_input[31:0] ;
  assign stage1_rg_stage_input_BITS_31_TO_20__q4 =
	     stage1_rg_stage_input[31:20] ;
  assign stage1_rg_stage_input_BITS_66_TO_46__q3 =
	     stage1_rg_stage_input[66:46] ;
  assign stage1_rg_stage_input_BITS_99_TO_87__q2 =
	     stage1_rg_stage_input[99:87] ;
  assign stage2_rg_full_14_AND_IF_stage2_rg_stage2_15_B_ETC___d2522 =
	     stage2_rg_full &&
	     IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d2404 &&
	     NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56 &&
	     stage2_rg_stage2[824:822] != 3'd0 &&
	     IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d175 ;
  assign stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1024 =
	     stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d355 ||
	     stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d363 ||
	     !stage1_rg_stage_input[368] &&
	     (IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d1017 ||
	      IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d1021) ;
  assign stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1047 =
	     (stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d355 ||
	      stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d363 ||
	      IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d809) &&
	     NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d1037 &&
	     !stage1_rg_stage_input[368] &&
	     IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d1021 ;
  assign stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1058 =
	     (stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d355 ||
	      stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d363 ||
	      stage1_rg_stage_input[368] ||
	      IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d821) &&
	     NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d1037 &&
	     NOT_stage1_rg_stage_input_46_BIT_368_91_29_AND_ETC___d1056 ;
  assign stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1059 =
	     (stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d355 ||
	      stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d363 ||
	      stage1_rg_stage_input[368] ||
	      IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d809) &&
	     stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1058 ;
  assign stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1061 =
	     (stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d355 ||
	      stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d363 ||
	      IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d1017 ||
	      IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d1021) &&
	     stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d348 &&
	     stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1059 ;
  assign stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1073 =
	     (stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d355 ||
	      stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d363 ||
	      stage1_rg_stage_input[368] ||
	      IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d821) &&
	     NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d1037 &&
	     NOT_stage1_rg_stage_input_46_BIT_368_91_29_AND_ETC___d1071 ;
  assign stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1074 =
	     (stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d355 ||
	      stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d363 ||
	      stage1_rg_stage_input[368] ||
	      IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d809) &&
	     stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1073 ;
  assign stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1076 =
	     (stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d355 ||
	      stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d363 ||
	      IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d1017 ||
	      IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d1021) &&
	     stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d348 &&
	     stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1074 ;
  assign stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1091 =
	     (stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d355 ||
	      stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d363 ||
	      stage1_rg_stage_input[368] ||
	      IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d821) &&
	     NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d1037 &&
	     !stage1_rg_stage_input[368] &&
	     stage1_rg_stage_input[187:181] == 7'b0001111 &&
	     stage1_rg_stage_input_46_BITS_148_TO_146_94_EQ_ETC___d1087 ;
  assign stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1092 =
	     (stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d355 ||
	      stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d363 ||
	      stage1_rg_stage_input[368] ||
	      IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d809) &&
	     stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1091 ;
  assign stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1094 =
	     (stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d355 ||
	      stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d363 ||
	      IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d1017 ||
	      IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d1021) &&
	     stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d348 &&
	     stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1092 ;
  assign stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1105 =
	     (stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d355 ||
	      stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d363 ||
	      stage1_rg_stage_input[368] ||
	      IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d821) &&
	     NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d1037 &&
	     !stage1_rg_stage_input[368] &&
	     stage1_rg_stage_input[187:181] == 7'b0001111 &&
	     stage1_rg_stage_input_46_BITS_148_TO_146_94_EQ_ETC___d1101 ;
  assign stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1106 =
	     (stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d355 ||
	      stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d363 ||
	      stage1_rg_stage_input[368] ||
	      IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d809) &&
	     stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1105 ;
  assign stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1108 =
	     (stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d355 ||
	      stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d363 ||
	      IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d1017 ||
	      IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d1021) &&
	     stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d348 &&
	     stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1106 ;
  assign stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1122 =
	     (stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d355 ||
	      stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d363 ||
	      stage1_rg_stage_input[368] ||
	      IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d821) &&
	     NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d1037 &&
	     NOT_stage1_rg_stage_input_46_BIT_368_91_29_AND_ETC___d1120 ;
  assign stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1123 =
	     (stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d355 ||
	      stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d363 ||
	      stage1_rg_stage_input[368] ||
	      IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d809) &&
	     stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1122 ;
  assign stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1125 =
	     (stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d355 ||
	      stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d363 ||
	      IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d1017 ||
	      IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d1021) &&
	     stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d348 &&
	     stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1123 ;
  assign stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1137 =
	     (stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d355 ||
	      stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d363 ||
	      stage1_rg_stage_input[368] ||
	      IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d821) &&
	     NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d1037 &&
	     !stage1_rg_stage_input[368] &&
	     stage1_rg_stage_input[187:181] == 7'b1110011 &&
	     stage1_rg_stage_input[148:146] == 3'd0 &&
	     stage1_rg_stage_input[140:134] != 7'b0001001 &&
	     stage1_rg_stage_input[180:176] == 5'd0 &&
	     stage1_rg_stage_input[175:171] == 5'd0 &&
	     rg_cur_priv == 2'b11 &&
	     stage1_rg_stage_input[123:112] == 12'b001100000010 ;
  assign stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1138 =
	     (stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d355 ||
	      stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d363 ||
	      stage1_rg_stage_input[368] ||
	      IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d809) &&
	     stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1137 ;
  assign stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1140 =
	     (stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d355 ||
	      stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d363 ||
	      IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d1017 ||
	      IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d1021) &&
	     stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d348 &&
	     stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1138 ;
  assign stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1161 =
	     (stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d355 ||
	      stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d363 ||
	      stage1_rg_stage_input_46_BIT_368_91_OR_NOT_rg__ETC___d1148) &&
	     NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d1037 &&
	     !stage1_rg_stage_input[368] &&
	     stage1_rg_stage_input[187:181] == 7'b1110011 &&
	     stage1_rg_stage_input[148:146] == 3'd0 &&
	     NOT_rg_cur_priv_8_EQ_0b11_111_143_AND_NOT_rg_c_ETC___d1156 ;
  assign stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1162 =
	     (stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d355 ||
	      stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d363 ||
	      stage1_rg_stage_input[368] ||
	      IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d821) &&
	     stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1161 ;
  assign stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1163 =
	     (stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d355 ||
	      stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d363 ||
	      stage1_rg_stage_input[368] ||
	      IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d809) &&
	     stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1162 ;
  assign stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1165 =
	     (stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d355 ||
	      stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d363 ||
	      IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d1017 ||
	      IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d1021) &&
	     stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d348 &&
	     stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1163 ;
  assign stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1183 =
	     (stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d355 ||
	      stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d363 ||
	      stage1_rg_stage_input_46_BIT_368_91_OR_NOT_rg__ETC___d1148) &&
	     NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d1037 &&
	     NOT_stage1_rg_stage_input_46_BIT_368_91_29_AND_ETC___d1181 ;
  assign stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1184 =
	     (stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d355 ||
	      stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d363 ||
	      stage1_rg_stage_input[368] ||
	      IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d821) &&
	     stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1183 ;
  assign stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1185 =
	     (stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d355 ||
	      stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d363 ||
	      stage1_rg_stage_input[368] ||
	      IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d809) &&
	     stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1184 ;
  assign stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1187 =
	     (stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d355 ||
	      stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d363 ||
	      IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d1017 ||
	      IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d1021) &&
	     stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d348 &&
	     stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1185 ;
  assign stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1260 =
	     (stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d355 ||
	      stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d363 ||
	      stage1_rg_stage_input[368] ||
	      stage1_rg_stage_input[187:181] != 7'b1110011 ||
	      stage1_rg_stage_input[148:146] != 3'd0 ||
	      rg_cur_priv_8_EQ_0b11_111_OR_rg_cur_priv_8_EQ__ETC___d1241) &&
	     (stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d355 ||
	      stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d363 ||
	      stage1_rg_stage_input[368] ||
	      stage1_rg_stage_input[187:181] != 7'b1110011 ||
	      stage1_rg_stage_input[148:146] != 3'd0 ||
	      rg_cur_priv_8_EQ_0b11_111_OR_rg_cur_priv_8_EQ__ETC___d1255) ;
  assign stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1261 =
	     (stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d355 ||
	      stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d363 ||
	      stage1_rg_stage_input[368] ||
	      stage1_rg_stage_input[187:181] != 7'b1110011 ||
	      stage1_rg_stage_input[148:146] != 3'd0 ||
	      stage1_rg_stage_input[140:134] == 7'b0001001 ||
	      stage1_rg_stage_input[180:176] != 5'd0 ||
	      stage1_rg_stage_input[175:171] != 5'd0 ||
	      rg_cur_priv != 2'b11 ||
	      stage1_rg_stage_input[123:112] != 12'b001100000010) &&
	     stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1260 ;
  assign stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1262 =
	     (stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d355 ||
	      stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d363 ||
	      stage1_rg_stage_input[368] ||
	      stage1_rg_stage_input[187:181] != 7'b1110011 ||
	      stage1_rg_stage_input[148:146] != 3'd0 ||
	      NOT_stage1_rg_stage_input_46_BITS_180_TO_176_0_ETC___d1221) &&
	     stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1261 ;
  assign stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1265 =
	     (stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d355 ||
	      stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d363 ||
	      stage1_rg_stage_input[368] ||
	      stage1_rg_stage_input[187:181] != 7'b1110011 ||
	      stage1_rg_stage_input[148:146] != 3'b010 &&
	      stage1_rg_stage_input[148:146] != 3'b110 &&
	      stage1_rg_stage_input[148:146] != 3'b011 &&
	      stage1_rg_stage_input[148:146] != 3'b111) &&
	     (stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d355 ||
	      stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d363 ||
	      stage1_rg_stage_input[368] ||
	      stage1_rg_stage_input[187:181] != 7'b0001111 ||
	      NOT_stage1_rg_stage_input_46_BITS_148_TO_146_9_ETC___d1209) &&
	     (stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d355 ||
	      stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d363 ||
	      stage1_rg_stage_input[368] ||
	      stage1_rg_stage_input[187:181] != 7'b0001111 ||
	      NOT_stage1_rg_stage_input_46_BITS_148_TO_146_9_ETC___d1216) &&
	     stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1262 ;
  assign stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1266 =
	     (stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d355 ||
	      stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d363 ||
	      stage1_rg_stage_input[368] ||
	      stage1_rg_stage_input[187:181] != 7'b1110011 ||
	      stage1_rg_stage_input[148:146] != 3'b001 &&
	      stage1_rg_stage_input[148:146] != 3'b101) &&
	     stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1265 ;
  assign stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1267 =
	     (stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d355 ||
	      stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d363 ||
	      stage1_rg_stage_input[368] ||
	      IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d821) &&
	     stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1266 ;
  assign stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1268 =
	     (stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d355 ||
	      stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d363 ||
	      stage1_rg_stage_input[368] ||
	      IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d809) &&
	     stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1267 ;
  assign stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1330 =
	     (stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d355 ||
	      stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d363 ||
	      IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d1017 ||
	      IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d1021) &&
	     stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d348 &&
	     NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d382 &&
	     NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d389 &&
	     !stage1_rg_stage_input[368] &&
	     stage1_rg_stage_input[187:181] == 7'b1100111 ;
  assign stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1391 =
	     NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d1037 &&
	     (stage1_rg_stage_input[187:181] == 7'b0100011 ||
	      stage1_rg_stage_input[187:181] == 7'b0100111) ;
  assign stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1400 =
	     stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d355 ||
	     stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d363 ||
	     stage1_rg_stage_input[187:181] == 7'b0110011 &&
	     stage1_rg_stage_input[140:134] == 7'b0000001 ||
	     stage1_rg_stage_input_46_BITS_187_TO_181_92_EQ_ETC___d1398 ;
  assign stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1408 =
	     stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d355 ||
	     stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d363 ||
	     stage1_rg_stage_input[187:181] != 7'b0000011 &&
	     stage1_rg_stage_input[187:181] != 7'b0000111 ;
  assign stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1418 =
	     stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d355 ||
	     stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d363 ||
	     stage1_rg_stage_input[187:181] != 7'b0100011 &&
	     stage1_rg_stage_input[187:181] != 7'b0100111 ;
  assign stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1423 =
	     stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1418 &&
	     NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d1037 &&
	     stage1_rg_stage_input[187:181] != 7'b1100011 &&
	     stage1_rg_stage_input[187:181] != 7'b1101111 &&
	     stage1_rg_stage_input[187:181] != 7'b1100111 &&
	     (stage1_rg_stage_input[187:181] == 7'b0110011 &&
	      stage1_rg_stage_input[140:134] == 7'b0000001 ||
	      stage1_rg_stage_input_46_BITS_187_TO_181_92_EQ_ETC___d840) ;
  assign stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1426 =
	     stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1024 &&
	     stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d348 &&
	     stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1400 &&
	     stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1408 &&
	     stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1423 ;
  assign stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1453 =
	     (stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d355 ||
	      stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d363 ||
	      stage1_rg_stage_input[187:181] == 7'b1100011 ||
	      stage1_rg_stage_input[187:181] == 7'b1101111 ||
	      stage1_rg_stage_input[187:181] == 7'b1100111 ||
	      (stage1_rg_stage_input[187:181] != 7'b0110011 ||
	       stage1_rg_stage_input[140:134] != 7'b0000001) &&
	      NOT_stage1_rg_stage_input_46_BITS_187_TO_181_9_ETC___d464) &&
	     (stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d355 ||
	      stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d363 ||
	      stage1_rg_stage_input[187:181] != 7'b0101111) ;
  assign stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d2399 =
	     stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d355 ||
	     stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d363 ||
	     stage1_rg_stage_input[368] ||
	     IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d809 &&
	     IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d821 ;
  assign stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d2871 =
	     (stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d355 ||
	      stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d363 ||
	      IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d1358) &&
	     NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d1037 &&
	     (stage1_rg_stage_input[187:181] == 7'b0000011 ||
	      stage1_rg_stage_input[187:181] == 7'b0000111) ;
  assign stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d2886 =
	     (stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d355 ||
	      stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d363 ||
	      IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d1358) &&
	     NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d1037 &&
	     stage1_rg_stage_input[187:181] == 7'b0101111 ;
  assign stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d2891 =
	     (stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d355 ||
	      stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d363 ||
	      stage1_rg_stage_input[187:181] != 7'b1100011 &&
	      NOT_stage1_rg_stage_input_46_BITS_187_TO_181_9_ETC___d1435) &&
	     stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1408 &&
	     stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1418 &&
	     stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1453 ;
  assign stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d355 =
	     stage2_rg_full && stage2_rg_stage2[824:822] != 3'd0 &&
	     IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d290 &&
	     (IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d351 ||
	      IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d353) ;
  assign stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d363 =
	     stage2_rg_full && stage2_rg_stage2[824:822] != 3'd0 &&
	     IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d329 &&
	     (IF_NOT_stage2_rg_full_14_71_OR_stage2_rg_stage_ETC___d357 ||
	      IF_NOT_stage2_rg_full_14_71_OR_stage2_rg_stage_ETC___d358 ||
	      IF_NOT_stage2_rg_full_14_71_OR_stage2_rg_stage_ETC___d361) ;
  assign stage2_rg_full_14_AND_stage2_rg_stage2_15_BITS_ETC___d170 =
	     stage2_rg_full &&
	     (stage2_rg_stage2[824:822] == 3'd0 ||
	      IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d152) &&
	     stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_0_17_ETC___d168 ;
  assign stage2_rg_full_14_AND_stage2_rg_stage2_15_BITS_ETC___d2519 =
	     stage2_rg_full &&
	     (stage2_rg_stage2[824:822] == 3'd0 ||
	      IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d2404) &&
	     NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56 ;
  assign stage2_rg_full_14_AND_stage2_rg_stage2_15_BITS_ETC___d2524 =
	     stage2_rg_full &&
	     (stage2_rg_stage2[824:822] == 3'd0 ||
	      IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d2404) &&
	     NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56 &&
	     (stage2_rg_stage2[824:822] == 3'd0 ||
	      IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d184) ;
  assign stage2_rg_full_14_AND_stage2_rg_stage2_15_BITS_ETC___d2526 =
	     stage2_rg_full &&
	     IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d2404 &&
	     NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56 &&
	     stage2_rg_stage2[824:822] != 3'd0 &&
	     stage2_rg_stage2[824:822] != 3'd1 &&
	     stage2_rg_stage2[824:822] != 3'd4 &&
	     stage2_rg_stage2[824:822] != 3'd2 &&
	     stage2_rg_stage2[824:822] != 3'd3 ;
  assign stage2_rg_full_14_AND_stage2_rg_stage2_15_BITS_ETC___d2528 =
	     stage2_rg_full &&
	     (stage2_rg_stage2[824:822] == 3'd0 ||
	      IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d2404) &&
	     NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56 &&
	     (stage2_rg_stage2[824:822] == 3'd0 ||
	      stage2_rg_stage2[824:822] == 3'd1 ||
	      stage2_rg_stage2[824:822] == 3'd4 ||
	      stage2_rg_stage2[824:822] == 3'd2 ||
	      stage2_rg_stage2[824:822] == 3'd3) ;
  assign stage2_rg_full_14_AND_stage2_rg_stage2_15_BITS_ETC___d2530 =
	     stage2_rg_full &&
	     IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d2404 &&
	     NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56 &&
	     stage2_rg_stage2[824:822] != 3'd0 &&
	     CASE_stage2_rg_stage2_BITS_824_TO_822_1_stage2_ETC__q6 ;
  assign stage2_rg_full_14_AND_stage2_rg_stage2_15_BITS_ETC___d2532 =
	     stage2_rg_full &&
	     (stage2_rg_stage2[824:822] == 3'd0 ||
	      IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d2404) &&
	     NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56 &&
	     (stage2_rg_stage2[824:822] == 3'd0 ||
	      CASE_stage2_rg_stage2_BITS_824_TO_822_1_NOT_st_ETC__q7) ;
  assign stage2_rg_full_14_AND_stage2_rg_stage2_15_BITS_ETC___d2544 =
	     stage2_rg_full &&
	     (stage2_rg_stage2[824:822] == 3'd0 ||
	      IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d2404) &&
	     (cur_verbosity__h3724 != 4'd0 ||
	      csr_regfile_read_csr_minstret__0_BITS_19_TO_0__ETC___d2542) ;
  assign stage2_rg_stage2_15_BITS_127_TO_64_505_CONCAT__ETC___d2510 =
	     { stage2_rg_stage2[127:64],
	       CASE_stage2_rg_stage2_BITS_824_TO_822_2_stage2_ETC__q29 } ;
  assign stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_0_17_ETC___d168 =
	     stage2_rg_stage2[824:822] != 3'd1 &&
	     stage2_rg_stage2[824:822] != 3'd4 &&
	     stage2_rg_stage2[824:822] != 3'd2 ||
	     !near_mem$dmem_valid ||
	     !near_mem$dmem_exc ;
  assign stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_0_17_ETC___d215 =
	     IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d152 &&
	     stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_0_17_ETC___d168 &&
	     stage2_rg_stage2[824:822] != 3'd0 &&
	     CASE_stage2_rg_stage2_BITS_824_TO_822_1_stage2_ETC__q6 ;
  assign stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_0_17_ETC___d244 =
	     (stage2_rg_stage2[824:822] == 3'd0 ||
	      IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d152) &&
	     stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_0_17_ETC___d168 &&
	     (stage2_rg_stage2[824:822] == 3'd0 ||
	      CASE_stage2_rg_stage2_BITS_824_TO_822_1_NOT_st_ETC__q7) ;
  assign stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_2_21_ETC___d298 =
	     stage2_rg_stage2[824:822] == 3'd2 ||
	     ((stage2_rg_stage2[824:822] == 3'd3) ?
		stage2_mbox$valid :
		stage2_rg_stage2[432] || stage2_fbox$valid) ;
  assign stage3_rg_full_8_OR_NOT_stage2_rg_full_14_71_O_ETC___d2443 =
	     (stage3_rg_full || !stage2_rg_full ||
	      stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_0_17_ETC___d168) &&
	     (stage3_rg_full || stage2_rg_full || !stage1_rg_full ||
	      NOT_stage1_rg_stage_input_46_BITS_371_TO_370_4_ETC___d2440) ;
  assign stage3_rg_stage3_00_BITS_566_TO_562_09_EQ_stag_ETC___d422 =
	     stage3_rg_stage3[566:562] == stage1_rg_stage_input[175:171] ;
  assign stage3_rg_stage3_00_BITS_566_TO_562_09_EQ_stag_ETC___d430 =
	     stage3_rg_stage3[566:562] == stage1_rg_stage_input[170:166] ;
  assign stageF_f_reset_rsps_i_notEmpty__331_AND_stageD_ETC___d2351 =
	     stageF_f_reset_rsps$EMPTY_N && stageD_f_reset_rsps$EMPTY_N &&
	     stage1_f_reset_rsps$EMPTY_N &&
	     stage2_f_reset_rsps$EMPTY_N &&
	     stage3_f_reset_rsps$EMPTY_N &&
	     f_reset_rsps$FULL_N &&
	     NOT_rg_run_on_reset_337_338_OR_imem_rg_pc_BITS_ETC___d2345 ;
  assign stageF_rg_full_181_AND_near_mem_imem_valid_AND_ETC___d2213 =
	     stageF_rg_full && near_mem$imem_valid &&
	     near_mem_imem_exc__1_OR_NOT_imem_rg_pc_BITS_1__ETC___d2206 &&
	     !near_mem$imem_exc ;
  assign sxl__h6927 =
	     (csr_regfile$read_misa[27:26] == 2'd2) ?
	       csr_regfile$read_mstatus[35:34] :
	       2'd0 ;
  assign td1_rd__h48442 = { 3'd0, csr_regfile$csr_ret_actions[65:64] } ;
  assign td_word1__h33973 = alu_outputs___1_trace_data_word1__h33042 ;
  assign tmp__h18833 =
	     rs1_val_bypassed__h5399[31:0] >> stage1_rg_stage_input[116:112] |
	     ~(32'hFFFFFFFF >> stage1_rg_stage_input[116:112]) &
	     {32{rs1_val_bypassed399_BITS_31_TO_0__q9[31]}} ;
  assign trace_data___1_word2__h31109 =
	     stage3_rg_stage3[255:192] |
	     { 59'd0, csr_regfile$mv_update_fcsr_fflags } ;
  assign trap_info_tval__h16637 =
	     (stage1_rg_stage_input[187:181] != 7'b1101111 &&
	      stage1_rg_stage_input[187:181] != 7'b1100111 &&
	      (stage1_rg_stage_input[187:181] != 7'b1110011 ||
	       stage1_rg_stage_input[148:146] != 3'd0 ||
	       rg_cur_priv_8_EQ_0b11_111_OR_rg_cur_priv_8_EQ__ETC___d1722)) ?
	       (stage1_rg_stage_input[369] ?
		  { 32'd0, stage1_rg_stage_input[299:268] } :
		  { 48'd0, stage1_rg_stage_input[267:252] }) :
	       CASE_stage1_rg_stage_input_BITS_187_TO_181_0b1_ETC__q24 ;
  assign uxl__h6928 =
	     (csr_regfile$read_misa[27:26] == 2'd2) ?
	       csr_regfile$read_mstatus[33:32] :
	       2'd0 ;
  assign v32__h11783 = { stage1_rg_stage_input[86:67], 12'h0 } ;
  assign val__h9864 =
	     (stage2_rg_full &&
	      (stage2_rg_stage2[824:822] == 3'd0 ||
	       IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d418) &&
	      IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d351) ?
	       x_out_bypass_rd_val__h9423 :
	       rd_val__h9862 ;
  assign val__h9897 =
	     (stage2_rg_full &&
	      (stage2_rg_stage2[824:822] == 3'd0 ||
	       IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d418) &&
	      IF_stage2_rg_full_14_THEN_IF_stage2_rg_stage2__ETC___d353) ?
	       x_out_bypass_rd_val__h9423 :
	       rd_val__h9895 ;
  assign value__h16712 =
	     stage1_rg_stage_input[368] ?
	       stage1_rg_stage_input[363:300] :
	       trap_info_tval__h16637 ;
  assign x__h18776 =
	     rs1_val_bypassed__h5399[31:0] << stage1_rg_stage_input[116:112] ;
  assign x__h18808 =
	     rs1_val_bypassed__h5399[31:0] >> stage1_rg_stage_input[116:112] ;
  assign x__h18943 = rs1_val_bypassed__h5399[31:0] << rs2_val__h10533[4:0] ;
  assign x__h18988 = rs1_val_bypassed__h5399[31:0] >> rs2_val__h10533[4:0] ;
  assign x__h31169 =
	     stage3_rg_stage3[497] ?
	       trace_data___1_word2__h31109 :
	       stage3_rg_stage3[255:192] ;
  assign x__h31183 =
	     (stage3_rg_stage3[497] || stage3_rg_stage3[496]) ?
	       csr_regfile$mv_update_mstatus_fs :
	       stage3_rg_stage3[127:64] ;
  assign x__h43705 =
	     csr_regfile_read_csr_mcycle__7_MINUS_rg_start__ETC___d3094[63:0] /
	     _theResult____h43704 ;
  assign x__h44985 =
	     { IF_csr_regfilemav_csr_write_BIT_64_THEN_2_ELSE_0__q1[63:1],
	       1'd1 } ;
  assign x__h46308 =
	     ((rg_trap_instr[19:15] != 5'd0 &&
	       csr_regfile$mav_csr_write[64]) ?
		64'd2 :
		64'd0) |
	     ((rg_trap_instr[19:15] == 5'd0) ? 64'd0 : 64'd1) ;
  assign x__h46372 = { 52'd0, rg_trap_instr[31:20] } ;
  assign x_exc_code__h56527 =
	     (csr_regfile$interrupt_pending[4] && !csr_regfile$nmi_pending) ?
	       csr_regfile$interrupt_pending[3:0] :
	       4'd0 ;
  assign x_out_cf_info_fallthru_PC__h17799 =
	     stage1_rg_stage_input[369] ?
	       next_pc__h15457 :
	       next_pc___1__h15461 ;
  assign x_out_data_to_stage1_instr__h19725 =
	     stageD_rg_data[165] ? stageD_rg_data[95:64] : instr___1__h19800 ;
  assign x_out_data_to_stage2_fval1__h10356 =
	     (stage2_rg_full && stage2_rg_stage2[824:822] != 3'd0 &&
	      IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d1637 &&
	      IF_NOT_stage2_rg_full_14_71_OR_stage2_rg_stage_ETC___d357) ?
	       x_out_fbypass_rd_val__h9617 :
	       rd_val__h9928 ;
  assign x_out_data_to_stage2_fval3__h10358 =
	     (stage2_rg_full && stage2_rg_stage2[824:822] != 3'd0 &&
	      IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d1637 &&
	      IF_NOT_stage2_rg_full_14_71_OR_stage2_rg_stage_ETC___d361) ?
	       x_out_fbypass_rd_val__h9617 :
	       rd_val__h9993 ;
  assign x_out_data_to_stage2_rd__h10352 =
	     stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d348 ?
	       data_to_stage2_rd__h10334 :
	       5'd0 ;
  assign x_out_data_to_stage2_val2__h10355 =
	     (stage1_rg_stage_input[187:181] == 7'b1100011) ?
	       branch_target__h10537 :
	       IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d1613 ;
  assign x_out_next_pc__h10042 =
	     IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d1021 ?
	       data_to_stage2_addr__h10335 :
	       fall_through_pc__h10024 ;
  assign x_out_trap_info_exc_code__h16642 =
	     stage1_rg_stage_input[368] ?
	       stage1_rg_stage_input[367:364] :
	       alu_outputs_exc_code__h13083 ;
  assign x_rd__h43327 = { 3'd0, csr_regfile$csr_trap_actions[1:0] } ;
  assign y__h46103 = ~rs1_val__h45825 ;
  always@(stage2_rg_stage2)
  begin
    case (stage2_rg_stage2[824:822])
      3'd1, 3'd2, 3'd4: value__h8810 = stage2_rg_stage2[920:857];
      default: value__h8810 = stage2_rg_stage2[920:857];
    endcase
  end
  always@(stage2_rg_stage2 or near_mem$dmem_exc_code)
  begin
    case (stage2_rg_stage2[824:822])
      3'd1, 3'd2, 3'd4:
	  x_out_trap_info_exc_code__h8920 = near_mem$dmem_exc_code;
      default: x_out_trap_info_exc_code__h8920 = 4'd2;
    endcase
  end
  always@(stage2_rg_stage2)
  begin
    case (stage2_rg_stage2[824:822])
      3'd1, 3'd2, 3'd4: value__h9024 = stage2_rg_stage2[816:753];
      default: value__h9024 = 64'd0;
    endcase
  end
  always@(stage2_rg_stage2 or stage2_fbox$word_snd)
  begin
    case (stage2_rg_stage2[824:822])
      3'd0, 3'd1, 3'd2, 3'd3, 3'd4:
	  x_out_data_to_stage3_fpr_flags__h8415 = 5'd0;
      default: x_out_data_to_stage3_fpr_flags__h8415 = stage2_fbox$word_snd;
    endcase
  end
  always@(stage2_rg_stage2)
  begin
    case (stage2_rg_stage2[824:822])
      3'd0, 3'd1, 3'd4:
	  x_out_data_to_stage3_rd__h8411 = stage2_rg_stage2[821:817];
      3'd2: x_out_data_to_stage3_rd__h8411 = 5'd0;
      default: x_out_data_to_stage3_rd__h8411 = stage2_rg_stage2[821:817];
    endcase
  end
  always@(stage2_rg_stage2 or
	  stage2_fbox$word_fst or near_mem$dmem_word64 or stage2_mbox$word)
  begin
    case (stage2_rg_stage2[824:822])
      3'd0, 3'd2:
	  x_out_data_to_stage3_rd_val__h8412 = stage2_rg_stage2[752:689];
      3'd1, 3'd4: x_out_data_to_stage3_rd_val__h8412 = near_mem$dmem_word64;
      3'd3: x_out_data_to_stage3_rd_val__h8412 = stage2_mbox$word;
      default: x_out_data_to_stage3_rd_val__h8412 = stage2_fbox$word_fst;
    endcase
  end
  always@(stage2_rg_stage2)
  begin
    case (stage2_rg_stage2[824:822])
      3'd0, 3'd1, 3'd4: x_out_bypass_rd__h9422 = stage2_rg_stage2[821:817];
      default: x_out_bypass_rd__h9422 = stage2_rg_stage2[821:817];
    endcase
  end
  always@(stage2_rg_stage2)
  begin
    case (stage2_rg_stage2[824:822])
      3'd1, 3'd4: x_out_fbypass_rd__h9616 = stage2_rg_stage2[821:817];
      default: x_out_fbypass_rd__h9616 = stage2_rg_stage2[821:817];
    endcase
  end
  always@(rg_trap_instr or rg_csr_val1)
  begin
    case (rg_trap_instr[14:12])
      3'b010, 3'b011: rs1_val__h45825 = rg_csr_val1;
      default: rs1_val__h45825 = { 59'd0, rg_trap_instr[19:15] };
    endcase
  end
  always@(stage2_rg_stage2 or
	  stage2_fbox$word_fst or
	  output_stage2___1_data_to_stage3_frd_val__h8330)
  begin
    case (stage2_rg_stage2[824:822])
      3'd0, 3'd2, 3'd3:
	  x_out_data_to_stage3_frd_val__h8416 = stage2_rg_stage2[624:561];
      3'd1, 3'd4:
	  x_out_data_to_stage3_frd_val__h8416 =
	      output_stage2___1_data_to_stage3_frd_val__h8330;
      default: x_out_data_to_stage3_frd_val__h8416 = stage2_fbox$word_fst;
    endcase
  end
  always@(stage2_rg_stage2 or
	  _theResult___fst_rd_val__h9402 or
	  _theResult___fst_rd_val__h9391 or stage2_mbox$word)
  begin
    case (stage2_rg_stage2[824:822])
      3'd0: x_out_bypass_rd_val__h9423 = stage2_rg_stage2[752:689];
      3'd1, 3'd4: x_out_bypass_rd_val__h9423 = _theResult___fst_rd_val__h9391;
      3'd3: x_out_bypass_rd_val__h9423 = stage2_mbox$word;
      default: x_out_bypass_rd_val__h9423 = _theResult___fst_rd_val__h9402;
    endcase
  end
  always@(stage2_rg_stage2 or
	  _theResult___snd_rd_val__h9598 or _theResult___snd_rd_val__h9592)
  begin
    case (stage2_rg_stage2[824:822])
      3'd1, 3'd4:
	  x_out_fbypass_rd_val__h9617 = _theResult___snd_rd_val__h9592;
      default: x_out_fbypass_rd_val__h9617 = _theResult___snd_rd_val__h9598;
    endcase
  end
  always@(stage2_rg_stage2 or
	  stage2_fbox$valid or near_mem$dmem_valid or stage2_mbox$valid)
  begin
    case (stage2_rg_stage2[824:822])
      3'd1, 3'd2, 3'd4:
	  IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d152 =
	      near_mem$dmem_valid;
      3'd3:
	  IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d152 =
	      stage2_mbox$valid;
      default: IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d152 =
		   stage2_fbox$valid;
    endcase
  end
  always@(stage2_rg_stage2 or
	  stage2_fbox$valid or near_mem$dmem_valid or stage2_mbox$valid)
  begin
    case (stage2_rg_stage2[824:822])
      3'd1, 3'd2, 3'd4:
	  CASE_stage2_rg_stage2_BITS_824_TO_822_1_NOT_ne_ETC__q5 =
	      !near_mem$dmem_valid;
      3'd3:
	  CASE_stage2_rg_stage2_BITS_824_TO_822_1_NOT_ne_ETC__q5 =
	      !stage2_mbox$valid;
      default: CASE_stage2_rg_stage2_BITS_824_TO_822_1_NOT_ne_ETC__q5 =
		   !stage2_fbox$valid;
    endcase
  end
  always@(stage2_rg_stage2 or
	  stage2_fbox$valid or
	  near_mem$dmem_valid or near_mem$dmem_exc or stage2_mbox$valid)
  begin
    case (stage2_rg_stage2[824:822])
      3'd1, 3'd2, 3'd4:
	  IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d175 =
	      !near_mem$dmem_valid || near_mem$dmem_exc;
      3'd3:
	  IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d175 =
	      !stage2_mbox$valid;
      default: IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d175 =
		   stage2_rg_stage2[824:822] == 3'd5 && !stage2_fbox$valid;
    endcase
  end
  always@(stage2_rg_stage2 or
	  stage2_fbox$valid or
	  near_mem$dmem_valid or near_mem$dmem_exc or stage2_mbox$valid)
  begin
    case (stage2_rg_stage2[824:822])
      3'd1, 3'd2, 3'd4:
	  IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d184 =
	      near_mem$dmem_valid && !near_mem$dmem_exc;
      3'd3:
	  IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d184 =
	      stage2_mbox$valid;
      default: IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d184 =
		   stage2_rg_stage2[824:822] != 3'd5 || stage2_fbox$valid;
    endcase
  end
  always@(stage2_rg_stage2)
  begin
    case (stage2_rg_stage2[824:822])
      3'd1, 3'd4:
	  CASE_stage2_rg_stage2_BITS_824_TO_822_1_stage2_ETC__q6 =
	      stage2_rg_stage2[432];
      default: CASE_stage2_rg_stage2_BITS_824_TO_822_1_stage2_ETC__q6 =
		   stage2_rg_stage2[824:822] != 3'd2 &&
		   stage2_rg_stage2[824:822] != 3'd3 &&
		   stage2_rg_stage2[432];
    endcase
  end
  always@(stage2_rg_stage2)
  begin
    case (stage2_rg_stage2[824:822])
      3'd1, 3'd4:
	  CASE_stage2_rg_stage2_BITS_824_TO_822_1_NOT_st_ETC__q7 =
	      !stage2_rg_stage2[432];
      default: CASE_stage2_rg_stage2_BITS_824_TO_822_1_NOT_st_ETC__q7 =
		   stage2_rg_stage2[824:822] == 3'd2 ||
		   stage2_rg_stage2[824:822] == 3'd3 ||
		   !stage2_rg_stage2[432];
    endcase
  end
  always@(stage2_rg_stage2 or near_mem$dmem_valid or near_mem$dmem_exc)
  begin
    case (stage2_rg_stage2[824:822])
      3'd1, 3'd4:
	  IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d271 =
	      near_mem$dmem_valid && near_mem$dmem_exc ||
	      stage2_rg_stage2[821:817] == 5'd0;
      default: IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d271 =
		   stage2_rg_stage2[824:822] == 3'd2 ||
		   stage2_rg_stage2[824:822] != 3'd3 && stage2_rg_stage2[432];
    endcase
  end
  always@(stage2_rg_stage2 or near_mem$dmem_valid or near_mem$dmem_exc)
  begin
    case (stage2_rg_stage2[824:822])
      3'd1, 3'd4:
	  IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d277 =
	      (!near_mem$dmem_valid || !near_mem$dmem_exc) &&
	      stage2_rg_stage2[821:817] != 5'd0;
      default: IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d277 =
		   stage2_rg_stage2[824:822] != 3'd2 &&
		   (stage2_rg_stage2[824:822] == 3'd3 ||
		    !stage2_rg_stage2[432]);
    endcase
  end
  always@(stage2_rg_stage2 or
	  NOT_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ__ETC___d289 or
	  near_mem$dmem_valid or near_mem$dmem_exc)
  begin
    case (stage2_rg_stage2[824:822])
      3'd1, 3'd4:
	  IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d290 =
	      (!near_mem$dmem_valid || !near_mem$dmem_exc) &&
	      stage2_rg_stage2[821:817] != 5'd0 &&
	      (!near_mem$dmem_valid || near_mem$dmem_exc);
      default: IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d290 =
		   NOT_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ__ETC___d289;
    endcase
  end
  always@(stage2_rg_stage2 or
	  stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_2_21_ETC___d298 or
	  near_mem$dmem_valid or near_mem$dmem_exc)
  begin
    case (stage2_rg_stage2[824:822])
      3'd1, 3'd4:
	  IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d299 =
	      near_mem$dmem_valid && near_mem$dmem_exc ||
	      stage2_rg_stage2[821:817] == 5'd0 ||
	      near_mem$dmem_valid && !near_mem$dmem_exc;
      default: IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d299 =
		   stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_2_21_ETC___d298;
    endcase
  end
  always@(stage2_rg_stage2 or near_mem$dmem_valid or near_mem$dmem_exc)
  begin
    case (stage2_rg_stage2[824:822])
      3'd1, 3'd4:
	  IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d313 =
	      near_mem$dmem_valid && near_mem$dmem_exc ||
	      !stage2_rg_stage2[432];
      default: IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d313 =
		   stage2_rg_stage2[824:822] == 3'd2 ||
		   stage2_rg_stage2[824:822] == 3'd3 ||
		   !stage2_rg_stage2[432];
    endcase
  end
  always@(stage2_rg_stage2 or near_mem$dmem_valid or near_mem$dmem_exc)
  begin
    case (stage2_rg_stage2[824:822])
      3'd1, 3'd4:
	  IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d318 =
	      (!near_mem$dmem_valid || !near_mem$dmem_exc) &&
	      stage2_rg_stage2[432];
      default: IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d318 =
		   stage2_rg_stage2[824:822] != 3'd2 &&
		   stage2_rg_stage2[824:822] != 3'd3 &&
		   stage2_rg_stage2[432];
    endcase
  end
  always@(stage2_rg_stage2 or
	  stage2_fbox$valid or near_mem$dmem_valid or near_mem$dmem_exc)
  begin
    case (stage2_rg_stage2[824:822])
      3'd1, 3'd4:
	  IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d336 =
	      near_mem$dmem_valid && near_mem$dmem_exc ||
	      !stage2_rg_stage2[432] ||
	      near_mem$dmem_valid && !near_mem$dmem_exc;
      default: IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d336 =
		   stage2_rg_stage2[824:822] == 3'd2 ||
		   stage2_rg_stage2[824:822] == 3'd3 ||
		   !stage2_rg_stage2[432] ||
		   stage2_fbox$valid;
    endcase
  end
  always@(stage2_rg_stage2 or
	  stage2_fbox$valid or near_mem$dmem_valid or near_mem$dmem_exc)
  begin
    case (stage2_rg_stage2[824:822])
      3'd1, 3'd4:
	  IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d329 =
	      (!near_mem$dmem_valid || !near_mem$dmem_exc) &&
	      stage2_rg_stage2[432] &&
	      (!near_mem$dmem_valid || near_mem$dmem_exc);
      default: IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d329 =
		   stage2_rg_stage2[824:822] != 3'd2 &&
		   stage2_rg_stage2[824:822] != 3'd3 &&
		   stage2_rg_stage2[432] &&
		   !stage2_fbox$valid;
    endcase
  end
  always@(stage2_rg_stage2 or
	  NOT_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ__ETC___d417 or
	  near_mem$dmem_valid or near_mem$dmem_exc)
  begin
    case (stage2_rg_stage2[824:822])
      3'd1, 3'd4:
	  IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d418 =
	      stage2_rg_stage2[821:817] != 5'd0 && near_mem$dmem_valid &&
	      !near_mem$dmem_exc;
      default: IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d418 =
		   NOT_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ__ETC___d417;
    endcase
  end
  always@(stage1_rg_stage_input or
	  alu_outputs___1_trace_data_word2__h33219 or
	  alu_outputs___1_trace_data_word2__h33043 or rs2_val__h10533)
  begin
    case (stage1_rg_stage_input[187:181])
      7'b0100011, 7'b0100111:
	  alu_outputs_trace_data_word2__h33265 =
	      alu_outputs___1_trace_data_word2__h33043;
      7'b0101111: alu_outputs_trace_data_word2__h33265 = rs2_val__h10533;
      default: alu_outputs_trace_data_word2__h33265 =
		   alu_outputs___1_trace_data_word2__h33219;
    endcase
  end
  always@(stage1_rg_stage_input or
	  _theResult___fst__h14140 or
	  rd_val___1__h18886 or
	  rd_val___1__h18940 or rd_val___1__h18985 or rd_val___1__h18934)
  begin
    case (stage1_rg_stage_input[133:124])
      10'b0: rd_val__h11760 = rd_val___1__h18886;
      10'b0000000001: rd_val__h11760 = rd_val___1__h18940;
      10'b0000000101: rd_val__h11760 = rd_val___1__h18985;
      10'b0100000000: rd_val__h11760 = rd_val___1__h18934;
      default: rd_val__h11760 = _theResult___fst__h14140;
    endcase
  end
  always@(stage1_rg_stage_input or
	  IF_stage1_rg_stage_input_46_BITS_175_TO_171_50_ETC___d440 or
	  IF_stage1_rg_stage_input_46_BITS_175_TO_171_50_ETC___d436 or
	  IF_stage1_rg_stage_input_46_BITS_175_TO_171_50_ETC___d438)
  begin
    case (stage1_rg_stage_input[148:146])
      3'd0:
	  IF_stage1_rg_stage_input_46_BITS_148_TO_146_94_ETC___d815 =
	      !IF_stage1_rg_stage_input_46_BITS_175_TO_171_50_ETC___d436;
      3'b001:
	  IF_stage1_rg_stage_input_46_BITS_148_TO_146_94_ETC___d815 =
	      IF_stage1_rg_stage_input_46_BITS_175_TO_171_50_ETC___d436;
      3'b100:
	  IF_stage1_rg_stage_input_46_BITS_148_TO_146_94_ETC___d815 =
	      !IF_stage1_rg_stage_input_46_BITS_175_TO_171_50_ETC___d438;
      3'b101:
	  IF_stage1_rg_stage_input_46_BITS_148_TO_146_94_ETC___d815 =
	      IF_stage1_rg_stage_input_46_BITS_175_TO_171_50_ETC___d438;
      3'b110:
	  IF_stage1_rg_stage_input_46_BITS_148_TO_146_94_ETC___d815 =
	      !IF_stage1_rg_stage_input_46_BITS_175_TO_171_50_ETC___d440;
      default: IF_stage1_rg_stage_input_46_BITS_148_TO_146_94_ETC___d815 =
		   stage1_rg_stage_input[148:146] != 3'b111 ||
		   IF_stage1_rg_stage_input_46_BITS_175_TO_171_50_ETC___d440;
    endcase
  end
  always@(stage1_rg_stage_input or
	  IF_stage1_rg_stage_input_46_BITS_175_TO_171_50_ETC___d440 or
	  IF_stage1_rg_stage_input_46_BITS_175_TO_171_50_ETC___d436 or
	  IF_stage1_rg_stage_input_46_BITS_175_TO_171_50_ETC___d438)
  begin
    case (stage1_rg_stage_input[148:146])
      3'd0:
	  IF_stage1_rg_stage_input_46_BITS_148_TO_146_94_ETC___d447 =
	      IF_stage1_rg_stage_input_46_BITS_175_TO_171_50_ETC___d436;
      3'b001:
	  IF_stage1_rg_stage_input_46_BITS_148_TO_146_94_ETC___d447 =
	      !IF_stage1_rg_stage_input_46_BITS_175_TO_171_50_ETC___d436;
      3'b100:
	  IF_stage1_rg_stage_input_46_BITS_148_TO_146_94_ETC___d447 =
	      IF_stage1_rg_stage_input_46_BITS_175_TO_171_50_ETC___d438;
      3'b101:
	  IF_stage1_rg_stage_input_46_BITS_148_TO_146_94_ETC___d447 =
	      !IF_stage1_rg_stage_input_46_BITS_175_TO_171_50_ETC___d438;
      3'b110:
	  IF_stage1_rg_stage_input_46_BITS_148_TO_146_94_ETC___d447 =
	      IF_stage1_rg_stage_input_46_BITS_175_TO_171_50_ETC___d440;
      default: IF_stage1_rg_stage_input_46_BITS_148_TO_146_94_ETC___d447 =
		   stage1_rg_stage_input[148:146] == 3'b111 &&
		   !IF_stage1_rg_stage_input_46_BITS_175_TO_171_50_ETC___d440;
    endcase
  end
  always@(stage1_rg_stage_input or
	  csr_regfile_read_mstatus__9_BITS_14_TO_13_1_EQ_ETC___d613 or
	  NOT_stage1_rg_stage_input_46_BITS_135_TO_134_1_ETC___d793 or
	  csr_regfile$read_mstatus or
	  NOT_stage1_rg_stage_input_46_BITS_145_TO_141_6_ETC___d599)
  begin
    case (stage1_rg_stage_input[187:181])
      7'b0000111, 7'b0100111:
	  IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d796 =
	      csr_regfile$read_mstatus[14:13] == 2'h0 ||
	      stage1_rg_stage_input[148:146] != 3'b010 &&
	      stage1_rg_stage_input[148:146] != 3'b011;
      7'b0101111:
	  IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d796 =
	      NOT_stage1_rg_stage_input_46_BITS_145_TO_141_6_ETC___d599;
      default: IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d796 =
		   csr_regfile_read_mstatus__9_BITS_14_TO_13_1_EQ_ETC___d613 ||
		   NOT_stage1_rg_stage_input_46_BITS_135_TO_134_1_ETC___d793;
    endcase
  end
  always@(stage1_rg_stage_input or
	  IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d796)
  begin
    case (stage1_rg_stage_input[187:181])
      7'b0000011:
	  CASE_stage1_rg_stage_input_BITS_187_TO_181_0b1_ETC__q13 =
	      stage1_rg_stage_input[148:146] != 3'd0 &&
	      stage1_rg_stage_input[148:146] != 3'b100 &&
	      stage1_rg_stage_input[148:146] != 3'b001 &&
	      stage1_rg_stage_input[148:146] != 3'b101 &&
	      stage1_rg_stage_input[148:146] != 3'b010 &&
	      stage1_rg_stage_input[148:146] != 3'b110 &&
	      stage1_rg_stage_input[148:146] != 3'b011;
      7'b0100011:
	  CASE_stage1_rg_stage_input_BITS_187_TO_181_0b1_ETC__q13 =
	      stage1_rg_stage_input[148:146] != 3'd0 &&
	      stage1_rg_stage_input[148:146] != 3'b001 &&
	      stage1_rg_stage_input[148:146] != 3'b010 &&
	      stage1_rg_stage_input[148:146] != 3'b011;
      default: CASE_stage1_rg_stage_input_BITS_187_TO_181_0b1_ETC__q13 =
		   stage1_rg_stage_input[187:181] == 7'b0001111 ||
		   stage1_rg_stage_input[187:181] == 7'b1110011 ||
		   IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d796;
    endcase
  end
  always@(stage1_rg_stage_input or
	  CASE_stage1_rg_stage_input_BITS_187_TO_181_0b1_ETC__q13 or
	  NOT_IF_stage1_rg_stage_input_46_BITS_35_TO_34__ETC___d515)
  begin
    case (stage1_rg_stage_input[187:181])
      7'b0010011, 7'b0110011:
	  IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d804 =
	      NOT_IF_stage1_rg_stage_input_46_BITS_35_TO_34__ETC___d515;
      7'b0011011:
	  IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d804 =
	      stage1_rg_stage_input[148:146] != 3'd0 &&
	      (stage1_rg_stage_input[148:146] != 3'b001 ||
	       stage1_rg_stage_input[299] ||
	       stage1_rg_stage_input[297:293] != 5'b0 ||
	       stage1_rg_stage_input[298]) &&
	      (stage1_rg_stage_input[148:146] != 3'b101 ||
	       stage1_rg_stage_input[299] ||
	       stage1_rg_stage_input[297:293] != 5'b0);
      7'b0111011:
	  IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d804 =
	      stage1_rg_stage_input[133:124] != 10'b0 &&
	      stage1_rg_stage_input[133:124] != 10'b0100000000 &&
	      stage1_rg_stage_input[133:124] != 10'b0000000001 &&
	      stage1_rg_stage_input[133:124] != 10'b0000000101 &&
	      stage1_rg_stage_input[133:124] != 10'b0100000101;
      default: IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d804 =
		   stage1_rg_stage_input[187:181] != 7'b0110111 &&
		   stage1_rg_stage_input[187:181] != 7'b0010111 &&
		   CASE_stage1_rg_stage_input_BITS_187_TO_181_0b1_ETC__q13;
    endcase
  end
  always@(stage1_rg_stage_input or
	  NOT_csr_regfile_read_mstatus__9_BITS_14_TO_13__ETC___d899 or
	  stage1_rg_stage_input_46_BITS_135_TO_134_14_EQ_ETC___d1001 or
	  csr_regfile$read_mstatus)
  begin
    case (stage1_rg_stage_input[187:181])
      7'b0000111, 7'b0100111:
	  IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d1004 =
	      csr_regfile$read_mstatus[14:13] != 2'h0 &&
	      (stage1_rg_stage_input[148:146] == 3'b010 ||
	       stage1_rg_stage_input[148:146] == 3'b011);
      7'b0101111:
	  IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d1004 =
	      (stage1_rg_stage_input[145:141] == 5'b00010 &&
	       stage1_rg_stage_input[170:166] == 5'd0 ||
	       stage1_rg_stage_input[145:141] == 5'b00011 ||
	       stage1_rg_stage_input[145:141] == 5'b0 ||
	       stage1_rg_stage_input[145:141] == 5'b00001 ||
	       stage1_rg_stage_input[145:141] == 5'b01100 ||
	       stage1_rg_stage_input[145:141] == 5'b01000 ||
	       stage1_rg_stage_input[145:141] == 5'b00100 ||
	       stage1_rg_stage_input[145:141] == 5'b10000 ||
	       stage1_rg_stage_input[145:141] == 5'b11000 ||
	       stage1_rg_stage_input[145:141] == 5'b10100 ||
	       stage1_rg_stage_input[145:141] == 5'b11100) &&
	      (stage1_rg_stage_input[148:146] == 3'b010 ||
	       stage1_rg_stage_input[148:146] == 3'b011);
      default: IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d1004 =
		   NOT_csr_regfile_read_mstatus__9_BITS_14_TO_13__ETC___d899 &&
		   stage1_rg_stage_input_46_BITS_135_TO_134_14_EQ_ETC___d1001;
    endcase
  end
  always@(stage1_rg_stage_input or
	  IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d1004)
  begin
    case (stage1_rg_stage_input[187:181])
      7'b0000011:
	  CASE_stage1_rg_stage_input_BITS_187_TO_181_0b1_ETC__q14 =
	      stage1_rg_stage_input[148:146] == 3'd0 ||
	      stage1_rg_stage_input[148:146] == 3'b100 ||
	      stage1_rg_stage_input[148:146] == 3'b001 ||
	      stage1_rg_stage_input[148:146] == 3'b101 ||
	      stage1_rg_stage_input[148:146] == 3'b010 ||
	      stage1_rg_stage_input[148:146] == 3'b110 ||
	      stage1_rg_stage_input[148:146] == 3'b011;
      7'b0100011:
	  CASE_stage1_rg_stage_input_BITS_187_TO_181_0b1_ETC__q14 =
	      stage1_rg_stage_input[148:146] == 3'd0 ||
	      stage1_rg_stage_input[148:146] == 3'b001 ||
	      stage1_rg_stage_input[148:146] == 3'b010 ||
	      stage1_rg_stage_input[148:146] == 3'b011;
      default: CASE_stage1_rg_stage_input_BITS_187_TO_181_0b1_ETC__q14 =
		   stage1_rg_stage_input[187:181] != 7'b0001111 &&
		   stage1_rg_stage_input[187:181] != 7'b1110011 &&
		   IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d1004;
    endcase
  end
  always@(stage1_rg_stage_input or
	  CASE_stage1_rg_stage_input_BITS_187_TO_181_0b1_ETC__q14 or
	  IF_stage1_rg_stage_input_46_BITS_35_TO_34_75_E_ETC___d853)
  begin
    case (stage1_rg_stage_input[187:181])
      7'b0010011, 7'b0110011:
	  IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d1012 =
	      IF_stage1_rg_stage_input_46_BITS_35_TO_34_75_E_ETC___d853;
      7'b0011011:
	  IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d1012 =
	      stage1_rg_stage_input[148:146] == 3'd0 ||
	      stage1_rg_stage_input[148:146] == 3'b001 &&
	      !stage1_rg_stage_input[299] &&
	      stage1_rg_stage_input[297:293] == 5'b0 &&
	      !stage1_rg_stage_input[298] ||
	      stage1_rg_stage_input[148:146] == 3'b101 &&
	      !stage1_rg_stage_input[299] &&
	      stage1_rg_stage_input[297:293] == 5'b0;
      7'b0111011:
	  IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d1012 =
	      stage1_rg_stage_input[133:124] == 10'b0 ||
	      stage1_rg_stage_input[133:124] == 10'b0100000000 ||
	      stage1_rg_stage_input[133:124] == 10'b0000000001 ||
	      stage1_rg_stage_input[133:124] == 10'b0000000101 ||
	      stage1_rg_stage_input[133:124] == 10'b0100000101;
      default: IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d1012 =
		   stage1_rg_stage_input[187:181] == 7'b0110111 ||
		   stage1_rg_stage_input[187:181] == 7'b0010111 ||
		   CASE_stage1_rg_stage_input_BITS_187_TO_181_0b1_ETC__q14;
    endcase
  end
  always@(rg_cur_priv)
  begin
    case (rg_cur_priv)
      2'b0: CASE_rg_cur_priv_0b0_8_0b1_9_11__q15 = 4'd8;
      2'b01: CASE_rg_cur_priv_0b0_8_0b1_9_11__q15 = 4'd9;
      default: CASE_rg_cur_priv_0b0_8_0b1_9_11__q15 = 4'd11;
    endcase
  end
  always@(stage1_rg_stage_input or CASE_rg_cur_priv_0b0_8_0b1_9_11__q15)
  begin
    case (stage1_rg_stage_input[123:112])
      12'b0:
	  CASE_stage1_rg_stage_input_BITS_123_TO_112_0b0_ETC__q16 =
	      CASE_rg_cur_priv_0b0_8_0b1_9_11__q15;
      12'b000000000001:
	  CASE_stage1_rg_stage_input_BITS_123_TO_112_0b0_ETC__q16 = 4'd3;
      default: CASE_stage1_rg_stage_input_BITS_123_TO_112_0b0_ETC__q16 = 4'd2;
    endcase
  end
  always@(stage1_rg_stage_input or
	  alu_outputs___1_addr__h11902 or
	  IF_stage1_rg_stage_input_46_BITS_175_TO_171_50_ETC___d1312 or
	  rs1_val_bypassed__h5399)
  begin
    case (stage1_rg_stage_input[187:181])
      7'b0000011, 7'b0000111:
	  alu_outputs_trace_data_word3__h33266 =
	      IF_stage1_rg_stage_input_46_BITS_175_TO_171_50_ETC___d1312;
      7'b0100011:
	  alu_outputs_trace_data_word3__h33266 = alu_outputs___1_addr__h11902;
      7'b0101111:
	  alu_outputs_trace_data_word3__h33266 = rs1_val_bypassed__h5399;
      default: alu_outputs_trace_data_word3__h33266 =
		   alu_outputs___1_addr__h11902;
    endcase
  end
  always@(stage1_rg_stage_input or
	  alu_outputs___1_addr__h11902 or
	  IF_stage1_rg_stage_input_46_BITS_175_TO_171_50_ETC___d1312 or
	  rs1_val_bypassed__h5399 or
	  alu_outputs___1_addr__h10560 or next_pc__h10613 or next_pc__h10575)
  begin
    case (stage1_rg_stage_input[187:181])
      7'b0000011, 7'b0000111:
	  x_out_data_to_stage2_addr__h10353 =
	      IF_stage1_rg_stage_input_46_BITS_175_TO_171_50_ETC___d1312;
      7'b0100011:
	  x_out_data_to_stage2_addr__h10353 = alu_outputs___1_addr__h11902;
      7'b0101111: x_out_data_to_stage2_addr__h10353 = rs1_val_bypassed__h5399;
      7'b1100011:
	  x_out_data_to_stage2_addr__h10353 = alu_outputs___1_addr__h10560;
      7'b1100111: x_out_data_to_stage2_addr__h10353 = next_pc__h10613;
      7'b1101111: x_out_data_to_stage2_addr__h10353 = next_pc__h10575;
      default: x_out_data_to_stage2_addr__h10353 =
		   alu_outputs___1_addr__h11902;
    endcase
  end
  always@(stage1_rg_stage_input or
	  next_pc__h10613 or branch_target__h10537 or next_pc__h10575)
  begin
    case (stage1_rg_stage_input[187:181])
      7'b1100011: x_out_cf_info_taken_PC__h17800 = branch_target__h10537;
      7'b1101111: x_out_cf_info_taken_PC__h17800 = next_pc__h10575;
      default: x_out_cf_info_taken_PC__h17800 = next_pc__h10613;
    endcase
  end
  always@(stage1_rg_stage_input or
	  IF_stage1_rg_stage_input_46_BITS_35_TO_34_75_E_ETC___d853)
  begin
    case (stage1_rg_stage_input[187:181])
      7'b0010011, 7'b0110011:
	  CASE_stage1_rg_stage_input_BITS_187_TO_181_0b1_ETC__q19 =
	      IF_stage1_rg_stage_input_46_BITS_35_TO_34_75_E_ETC___d853;
      default: CASE_stage1_rg_stage_input_BITS_187_TO_181_0b1_ETC__q19 =
		   stage1_rg_stage_input[187:181] == 7'b0011011 ||
		   stage1_rg_stage_input[187:181] == 7'b0111011 ||
		   stage1_rg_stage_input[187:181] == 7'b0110111 ||
		   stage1_rg_stage_input[187:181] == 7'b0010111;
    endcase
  end
  always@(stage1_rg_stage_input or
	  NOT_IF_stage1_rg_stage_input_46_BITS_35_TO_34__ETC___d515)
  begin
    case (stage1_rg_stage_input[187:181])
      7'b0010011, 7'b0110011:
	  IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d1358 =
	      NOT_IF_stage1_rg_stage_input_46_BITS_35_TO_34__ETC___d515;
      default: IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d1358 =
		   stage1_rg_stage_input[187:181] != 7'b0011011 &&
		   stage1_rg_stage_input[187:181] != 7'b0111011 &&
		   stage1_rg_stage_input[187:181] != 7'b0110111 &&
		   stage1_rg_stage_input[187:181] != 7'b0010111;
    endcase
  end
  always@(stage1_rg_stage_input or alu_outputs___1_exc_code__h12188)
  begin
    case (stage1_rg_stage_input[187:181])
      7'b0000011,
      7'b0001111,
      7'b0010011,
      7'b0010111,
      7'b0011011,
      7'b0100011,
      7'b0110011,
      7'b0110111,
      7'b0111011:
	  CASE_stage1_rg_stage_input_BITS_187_TO_181_0b1_ETC__q20 = 4'd2;
      7'b1110011:
	  CASE_stage1_rg_stage_input_BITS_187_TO_181_0b1_ETC__q20 =
	      alu_outputs___1_exc_code__h12188;
      default: CASE_stage1_rg_stage_input_BITS_187_TO_181_0b1_ETC__q20 = 4'd2;
    endcase
  end
  always@(stage1_rg_stage_input or
	  stage1_rg_stage_input_46_BITS_187_TO_181_92_EQ_ETC___d1461 or
	  CASE_stage1_rg_stage_input_BITS_187_TO_181_0b1_ETC__q20)
  begin
    case (stage1_rg_stage_input[187:181])
      7'b1100011: alu_outputs_exc_code__h13083 = 4'd2;
      7'b1100111, 7'b1101111: alu_outputs_exc_code__h13083 = 4'd0;
      default: alu_outputs_exc_code__h13083 =
		   stage1_rg_stage_input_46_BITS_187_TO_181_92_EQ_ETC___d1461 ?
		     4'd2 :
		     CASE_stage1_rg_stage_input_BITS_187_TO_181_0b1_ETC__q20;
    endcase
  end
  always@(stage1_rg_stage_input or
	  alu_outputs___1_trace_data_instr__h33216 or
	  alu_outputs___1_trace_data_instr__h32893)
  begin
    case (stage1_rg_stage_input[187:181])
      7'b0010011, 7'b0110011:
	  CASE_stage1_rg_stage_input_BITS_187_TO_181_0b1_ETC__q21 =
	      alu_outputs___1_trace_data_instr__h32893;
      default: CASE_stage1_rg_stage_input_BITS_187_TO_181_0b1_ETC__q21 =
		   alu_outputs___1_trace_data_instr__h33216;
    endcase
  end
  always@(stage1_rg_stage_input)
  begin
    case (stage1_rg_stage_input[187:181])
      7'b0000011, 7'b0000111, 7'b0010111, 7'b0011011, 7'b0110111, 7'b0111011:
	  CASE_stage1_rg_stage_input_BITS_187_TO_181_0b1_ETC__q22 =
	      stage1_rg_stage_input[180:176];
      7'b0010011, 7'b0110011:
	  CASE_stage1_rg_stage_input_BITS_187_TO_181_0b1_ETC__q22 =
	      stage1_rg_stage_input[11:7];
      default: CASE_stage1_rg_stage_input_BITS_187_TO_181_0b1_ETC__q22 =
		   stage1_rg_stage_input[180:176];
    endcase
  end
  always@(stage1_rg_stage_input or rs2_val__h10533)
  begin
    case (stage1_rg_stage_input[187:181])
      7'b0100011, 7'b0101111:
	  CASE_stage1_rg_stage_input_BITS_187_TO_181_0b1_ETC__q23 =
	      rs2_val__h10533;
      default: CASE_stage1_rg_stage_input_BITS_187_TO_181_0b1_ETC__q23 =
		   rs2_val__h10533;
    endcase
  end
  always@(stage2_rg_stage2 or
	  stage2_fbox$valid or near_mem$dmem_valid or near_mem$dmem_exc)
  begin
    case (stage2_rg_stage2[824:822])
      3'd1, 3'd4:
	  IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d1637 =
	      stage2_rg_stage2[432] && near_mem$dmem_valid &&
	      !near_mem$dmem_exc;
      default: IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d1637 =
		   stage2_rg_stage2[824:822] != 3'd2 &&
		   stage2_rg_stage2[824:822] != 3'd3 &&
		   stage2_rg_stage2[432] &&
		   stage2_fbox$valid;
    endcase
  end
  always@(stage1_rg_stage_input or
	  NOT_rg_cur_priv_8_EQ_0b11_111_143_AND_NOT_rg_c_ETC___d1732 or
	  data_to_stage2_addr__h10335)
  begin
    case (stage1_rg_stage_input[187:181])
      7'b1100111, 7'b1101111:
	  CASE_stage1_rg_stage_input_BITS_187_TO_181_0b1_ETC__q24 =
	      data_to_stage2_addr__h10335;
      default: CASE_stage1_rg_stage_input_BITS_187_TO_181_0b1_ETC__q24 =
		   (stage1_rg_stage_input[187:181] == 7'b1110011 &&
		    stage1_rg_stage_input[148:146] == 3'd0 &&
		    NOT_rg_cur_priv_8_EQ_0b11_111_143_AND_NOT_rg_c_ETC___d1732) ?
		     stage1_rg_stage_input[437:374] :
		     64'd0;
    endcase
  end
  always@(stage2_rg_stage2 or
	  stage2_fbox$valid or
	  near_mem$dmem_valid or near_mem$dmem_exc or stage2_mbox$valid)
  begin
    case (stage2_rg_stage2[824:822])
      3'd1, 3'd2, 3'd4:
	  IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d2404 =
	      near_mem$dmem_valid && !near_mem$dmem_exc;
      3'd3:
	  IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d2404 =
	      stage2_mbox$valid;
      default: IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d2404 =
		   stage2_fbox$valid;
    endcase
  end
  always@(stage1_rg_stage_input or
	  IF_NOT_csr_regfile_read_mstatus__9_BITS_14_TO__ETC___d2664 or
	  IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d2661 or
	  IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d2662)
  begin
    case (stage1_rg_stage_input[187:181])
      7'b0000011, 7'b0000111:
	  CASE_stage1_rg_stage_input_BITS_187_TO_181_0b1_ETC__q25 =
	      IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d2661;
      7'b0001111, 7'b1110011:
	  CASE_stage1_rg_stage_input_BITS_187_TO_181_0b1_ETC__q25 = 5'd5;
      7'b0010011, 7'b0010111, 7'b0011011, 7'b0110011, 7'b0110111, 7'b0111011:
	  CASE_stage1_rg_stage_input_BITS_187_TO_181_0b1_ETC__q25 = 5'd6;
      7'b0100011, 7'b0100111:
	  CASE_stage1_rg_stage_input_BITS_187_TO_181_0b1_ETC__q25 =
	      IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d2662;
      7'b0101111:
	  CASE_stage1_rg_stage_input_BITS_187_TO_181_0b1_ETC__q25 = 5'd13;
      default: CASE_stage1_rg_stage_input_BITS_187_TO_181_0b1_ETC__q25 =
		   IF_NOT_csr_regfile_read_mstatus__9_BITS_14_TO__ETC___d2664;
    endcase
  end
  always@(stage1_rg_stage_input or
	  rd_val___1__h18726 or
	  rd_val___1__h18708 or
	  rd_val___1__h18714 or rd_val___1__h18720 or rd_val___1__h18723)
  begin
    case (stage1_rg_stage_input[14:12])
      3'b010:
	  IF_IF_stage1_rg_stage_input_46_BITS_35_TO_34_7_ETC___d1544 =
	      rd_val___1__h18708;
      3'b011:
	  IF_IF_stage1_rg_stage_input_46_BITS_35_TO_34_7_ETC___d1544 =
	      rd_val___1__h18714;
      3'b100:
	  IF_IF_stage1_rg_stage_input_46_BITS_35_TO_34_7_ETC___d1544 =
	      rd_val___1__h18720;
      3'b110:
	  IF_IF_stage1_rg_stage_input_46_BITS_35_TO_34_7_ETC___d1544 =
	      rd_val___1__h18723;
      default: IF_IF_stage1_rg_stage_input_46_BITS_35_TO_34_7_ETC___d1544 =
		   rd_val___1__h18726;
    endcase
  end
  always@(stage1_rg_stage_input or
	  alu_outputs___1_trace_data_pc__h33214 or
	  alu_outputs___1_trace_data_pc__h32891)
  begin
    case (stage1_rg_stage_input[187:181])
      7'b0010011, 7'b0110011:
	  CASE_stage1_rg_stage_input_BITS_187_TO_181_0b1_ETC__q27 =
	      alu_outputs___1_trace_data_pc__h32891;
      default: CASE_stage1_rg_stage_input_BITS_187_TO_181_0b1_ETC__q27 =
		   alu_outputs___1_trace_data_pc__h33214;
    endcase
  end
  always@(stage1_rg_stage_input or
	  IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d2679 or
	  alu_outputs___1_addr__h10560 or next_pc__h10613 or next_pc__h10575)
  begin
    case (stage1_rg_stage_input[187:181])
      7'b1100011:
	  alu_outputs_trace_data_pc__h33260 = alu_outputs___1_addr__h10560;
      7'b1100111: alu_outputs_trace_data_pc__h33260 = next_pc__h10613;
      7'b1101111: alu_outputs_trace_data_pc__h33260 = next_pc__h10575;
      default: alu_outputs_trace_data_pc__h33260 =
		   IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d2679;
    endcase
  end
  always@(stage1_rg_stage_input or
	  NOT_csr_regfile_read_mstatus__9_BITS_14_TO_13__ETC___d899 or
	  stage1_rg_stage_input_46_BITS_135_TO_134_14_EQ_ETC___d1001)
  begin
    case (stage1_rg_stage_input[187:181])
      7'b0000011,
      7'b0000111,
      7'b0010011,
      7'b0010111,
      7'b0011011,
      7'b0101111,
      7'b0110011,
      7'b0110111,
      7'b0111011:
	  IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d2706 =
	      stage1_rg_stage_input[180:176];
      default: IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d2706 =
		   (NOT_csr_regfile_read_mstatus__9_BITS_14_TO_13__ETC___d899 &&
		    stage1_rg_stage_input_46_BITS_135_TO_134_14_EQ_ETC___d1001) ?
		     stage1_rg_stage_input[180:176] :
		     5'd2;
    endcase
  end
  always@(stage1_rg_stage_input or
	  alu_outputs___1_trace_data_word1__h33042 or
	  alu_outputs___1_val1__h11707 or
	  rd_val__h11809 or
	  rd_val__h11729 or rd_val__h11785 or rd_val__h11760)
  begin
    case (stage1_rg_stage_input[187:181])
      7'b0010011, 7'b0110011:
	  IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d2721 =
	      alu_outputs___1_val1__h11707;
      7'b0010111:
	  IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d2721 =
	      rd_val__h11809;
      7'b0011011:
	  IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d2721 =
	      rd_val__h11729;
      7'b0100011:
	  IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d2721 =
	      alu_outputs___1_trace_data_word1__h33042;
      7'b0110111:
	  IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d2721 =
	      rd_val__h11785;
      7'b0111011:
	  IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d2721 =
	      rd_val__h11760;
      default: IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d2721 =
		   alu_outputs___1_trace_data_word1__h33042;
    endcase
  end
  always@(stage1_rg_stage_input or
	  rs1_val_bypassed__h5399 or
	  alu_outputs___1_val1__h11707 or
	  rd_val__h11809 or
	  rd_val__h11729 or
	  alu_outputs___1_val1__h12222 or
	  rd_val__h11785 or rd_val__h11760 or alu_outputs___1_val1__h12192)
  begin
    case (stage1_rg_stage_input[187:181])
      7'b0010011, 7'b0110011:
	  IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d1601 =
	      alu_outputs___1_val1__h11707;
      7'b0010111:
	  IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d1601 =
	      rd_val__h11809;
      7'b0011011:
	  IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d1601 =
	      rd_val__h11729;
      7'b0101111:
	  IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d1601 =
	      alu_outputs___1_val1__h12222;
      7'b0110111:
	  IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d1601 =
	      rd_val__h11785;
      7'b0111011:
	  IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d1601 =
	      rd_val__h11760;
      7'b1110011:
	  IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d1601 =
	      alu_outputs___1_val1__h12192;
      default: IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d1601 =
		   rs1_val_bypassed__h5399;
    endcase
  end
  always@(stage1_rg_stage_input or
	  IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d2722 or
	  alu_outputs___1_trace_data_pc__h33214)
  begin
    case (stage1_rg_stage_input[187:181])
      7'b1100111, 7'b1101111:
	  alu_outputs_trace_data_word1__h33264 =
	      alu_outputs___1_trace_data_pc__h33214;
      default: alu_outputs_trace_data_word1__h33264 =
		   IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d2722;
    endcase
  end
  always@(stage1_rg_stage_input or
	  IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d1603 or
	  alu_outputs___1_trace_data_pc__h33214)
  begin
    case (stage1_rg_stage_input[187:181])
      7'b1100111, 7'b1101111:
	  x_out_data_to_stage2_val1__h10354 =
	      alu_outputs___1_trace_data_pc__h33214;
      default: x_out_data_to_stage2_val1__h10354 =
		   IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d1603;
    endcase
  end
  always@(stage1_rg_stage_input)
  begin
    case (stage1_rg_stage_input[187:181])
      7'b0010011, 7'b0110011:
	  CASE_stage1_rg_stage_input_BITS_187_TO_181_0b1_ETC__q28 =
	      stage1_rg_stage_input[369];
      default: CASE_stage1_rg_stage_input_BITS_187_TO_181_0b1_ETC__q28 =
		   stage1_rg_stage_input[369];
    endcase
  end
  always@(stage2_rg_stage2 or
	  stage2_fbox$valid or
	  near_mem$dmem_valid or near_mem$dmem_exc or stage2_mbox$valid)
  begin
    case (stage2_rg_stage2[824:822])
      3'd1, 3'd2, 3'd4:
	  IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d2961 =
	      !near_mem$dmem_valid || near_mem$dmem_exc;
      3'd3:
	  IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d2961 =
	      !stage2_mbox$valid;
      default: IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d2961 =
		   !stage2_fbox$valid;
    endcase
  end
  always@(stage1_rg_stage_input or
	  csr_regfile_read_mstatus__9_BITS_14_TO_13_1_EQ_ETC___d613 or
	  NOT_stage1_rg_stage_input_46_BITS_135_TO_134_1_ETC___d793 or
	  csr_regfile$read_mstatus or
	  NOT_stage1_rg_stage_input_46_BITS_148_TO_146_9_ETC___d1216 or
	  NOT_stage1_rg_stage_input_46_BITS_148_TO_146_9_ETC___d1209 or
	  NOT_stage1_rg_stage_input_46_BITS_145_TO_141_6_ETC___d599 or
	  IF_stage1_rg_stage_input_46_BITS_148_TO_146_94_ETC___d3043)
  begin
    case (stage1_rg_stage_input[187:181])
      7'b0000011:
	  IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d3047 =
	      stage1_rg_stage_input[148:146] != 3'd0 &&
	      stage1_rg_stage_input[148:146] != 3'b100 &&
	      stage1_rg_stage_input[148:146] != 3'b001 &&
	      stage1_rg_stage_input[148:146] != 3'b101 &&
	      stage1_rg_stage_input[148:146] != 3'b010 &&
	      stage1_rg_stage_input[148:146] != 3'b110 &&
	      stage1_rg_stage_input[148:146] != 3'b011;
      7'b0000111, 7'b0100111:
	  IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d3047 =
	      csr_regfile$read_mstatus[14:13] == 2'h0 ||
	      stage1_rg_stage_input[148:146] != 3'b010 &&
	      stage1_rg_stage_input[148:146] != 3'b011;
      7'b0001111:
	  IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d3047 =
	      NOT_stage1_rg_stage_input_46_BITS_148_TO_146_9_ETC___d1216 &&
	      NOT_stage1_rg_stage_input_46_BITS_148_TO_146_9_ETC___d1209;
      7'b0100011:
	  IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d3047 =
	      stage1_rg_stage_input[148:146] != 3'd0 &&
	      stage1_rg_stage_input[148:146] != 3'b001 &&
	      stage1_rg_stage_input[148:146] != 3'b010 &&
	      stage1_rg_stage_input[148:146] != 3'b011;
      7'b0101111:
	  IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d3047 =
	      NOT_stage1_rg_stage_input_46_BITS_145_TO_141_6_ETC___d599;
      7'b1110011:
	  IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d3047 =
	      IF_stage1_rg_stage_input_46_BITS_148_TO_146_94_ETC___d3043;
      default: IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d3047 =
		   csr_regfile_read_mstatus__9_BITS_14_TO_13_1_EQ_ETC___d613 ||
		   NOT_stage1_rg_stage_input_46_BITS_135_TO_134_1_ETC___d793;
    endcase
  end
  always@(stage1_rg_stage_input or
	  IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d3047 or
	  NOT_IF_stage1_rg_stage_input_46_BITS_35_TO_34__ETC___d515)
  begin
    case (stage1_rg_stage_input[187:181])
      7'b0010011, 7'b0110011:
	  IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d3051 =
	      NOT_IF_stage1_rg_stage_input_46_BITS_35_TO_34__ETC___d515;
      7'b0011011:
	  IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d3051 =
	      stage1_rg_stage_input[148:146] != 3'd0 &&
	      (stage1_rg_stage_input[148:146] != 3'b001 ||
	       stage1_rg_stage_input[299] ||
	       stage1_rg_stage_input[297:293] != 5'b0 ||
	       stage1_rg_stage_input[298]) &&
	      (stage1_rg_stage_input[148:146] != 3'b101 ||
	       stage1_rg_stage_input[299] ||
	       stage1_rg_stage_input[297:293] != 5'b0);
      7'b0111011:
	  IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d3051 =
	      stage1_rg_stage_input[133:124] != 10'b0 &&
	      stage1_rg_stage_input[133:124] != 10'b0100000000 &&
	      stage1_rg_stage_input[133:124] != 10'b0000000001 &&
	      stage1_rg_stage_input[133:124] != 10'b0000000101 &&
	      stage1_rg_stage_input[133:124] != 10'b0100000101;
      default: IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d3051 =
		   stage1_rg_stage_input[187:181] != 7'b0110111 &&
		   stage1_rg_stage_input[187:181] != 7'b0010111 &&
		   IF_stage1_rg_stage_input_46_BITS_187_TO_181_92_ETC___d3047;
    endcase
  end
  always@(stage2_rg_stage2 or
	  output_stage2___1_data_to_stage3_trace_data_word5__h31421)
  begin
    case (stage2_rg_stage2[824:822])
      3'd2, 3'd3:
	  CASE_stage2_rg_stage2_BITS_824_TO_822_2_stage2_ETC__q29 =
	      stage2_rg_stage2[63:0];
      default: CASE_stage2_rg_stage2_BITS_824_TO_822_2_stage2_ETC__q29 =
		   output_stage2___1_data_to_stage3_trace_data_word5__h31421;
    endcase
  end
  always@(_theResult____h5683)
  begin
    case (_theResult____h5683[6:0])
      7'b0010011:
	  IF_IF_stageD_rg_data_754_BIT_165_757_THEN_stag_ETC___d2942 = 2'd2;
      7'b0110011:
	  IF_IF_stageD_rg_data_754_BIT_165_757_THEN_stag_ETC___d2942 = 2'd1;
      default: IF_IF_stageD_rg_data_754_BIT_165_757_THEN_stag_ETC___d2942 =
		   2'd0;
    endcase
  end
  always@(stage1_rg_stage_input or
	  csr_regfile$read_mstatus or td_word1__h33973)
  begin
    case (stage1_rg_stage_input[187:181])
      7'b0000011, 7'b0000111:
	  CASE_stage1_rg_stage_input_BITS_187_TO_181_0b1_ETC__q30 =
	      csr_regfile$read_mstatus;
      7'b0101111:
	  CASE_stage1_rg_stage_input_BITS_187_TO_181_0b1_ETC__q30 =
	      td_word1__h33973;
      default: CASE_stage1_rg_stage_input_BITS_187_TO_181_0b1_ETC__q30 =
		   csr_regfile$read_mstatus;
    endcase
  end
  always@(stage2_rg_stage2 or
	  output_stage2___1_data_to_stage3_trace_data_word1__h31417 or
	  output_stage2___1_data_to_stage3_trace_data_word1__h31396 or
	  stage2_mbox$word)
  begin
    case (stage2_rg_stage2[824:822])
      3'd0, 3'd2:
	  IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_0_ETC___d2500 =
	      stage2_rg_stage2[319:256];
      3'd1, 3'd4:
	  IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_0_ETC___d2500 =
	      output_stage2___1_data_to_stage3_trace_data_word1__h31396;
      3'd3:
	  IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_0_ETC___d2500 =
	      stage2_mbox$word;
      default: IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_0_ETC___d2500 =
		   output_stage2___1_data_to_stage3_trace_data_word1__h31417;
    endcase
  end
  always@(stage2_rg_stage2 or
	  stage2_rg_stage2_15_BITS_127_TO_64_505_CONCAT__ETC___d2510 or
	  IF_stage2_rg_stage2_15_BIT_432_07_THEN_csr_reg_ETC___d2504)
  begin
    case (stage2_rg_stage2[824:822])
      3'd0:
	  CASE_stage2_rg_stage2_BITS_824_TO_822_0_stage2_ETC__q31 =
	      stage2_rg_stage2[127:0];
      3'd1, 3'd4:
	  CASE_stage2_rg_stage2_BITS_824_TO_822_0_stage2_ETC__q31 =
	      IF_stage2_rg_stage2_15_BIT_432_07_THEN_csr_reg_ETC___d2504;
      default: CASE_stage2_rg_stage2_BITS_824_TO_822_0_stage2_ETC__q31 =
		   stage2_rg_stage2_15_BITS_127_TO_64_505_CONCAT__ETC___d2510;
    endcase
  end
  always@(stage1_rg_stage_input)
  begin
    case (stage1_rg_stage_input[187:181])
      7'b0000011, 7'b0000111:
	  CASE_stage1_rg_stage_input_BITS_187_TO_181_0b1_ETC__q32 = 3'd1;
      7'b0010011, 7'b0010111, 7'b0011011, 7'b0110011, 7'b0110111, 7'b0111011:
	  CASE_stage1_rg_stage_input_BITS_187_TO_181_0b1_ETC__q32 = 3'd0;
      7'b0100011, 7'b0100111:
	  CASE_stage1_rg_stage_input_BITS_187_TO_181_0b1_ETC__q32 = 3'd2;
      7'b0101111:
	  CASE_stage1_rg_stage_input_BITS_187_TO_181_0b1_ETC__q32 = 3'd4;
      default: CASE_stage1_rg_stage_input_BITS_187_TO_181_0b1_ETC__q32 = 3'd5;
    endcase
  end
  always@(stage1_rg_stage_input or
	  stage1_rg_stage_input_46_BITS_187_TO_181_92_EQ_ETC___d840 or
	  CASE_stage1_rg_stage_input_BITS_187_TO_181_0b1_ETC__q32)
  begin
    case (stage1_rg_stage_input[187:181])
      7'b1100011, 7'b1100111, 7'b1101111:
	  CASE_stage1_rg_stage_input_BITS_187_TO_181_0b1_ETC__q33 = 3'd0;
      default: CASE_stage1_rg_stage_input_BITS_187_TO_181_0b1_ETC__q33 =
		   (stage1_rg_stage_input[187:181] == 7'b0110011 &&
		    stage1_rg_stage_input[140:134] == 7'b0000001 ||
		    stage1_rg_stage_input_46_BITS_187_TO_181_92_EQ_ETC___d840) ?
		     3'd3 :
		     (((stage1_rg_stage_input[187:181] == 7'b0010011 ||
			stage1_rg_stage_input[187:181] == 7'b0110011) &&
		       (stage1_rg_stage_input[148:146] == 3'b001 ||
			stage1_rg_stage_input[148:146] == 3'b101)) ?
			3'd0 :
			CASE_stage1_rg_stage_input_BITS_187_TO_181_0b1_ETC__q32);
    endcase
  end
  always@(stage2_rg_stage2 or
	  output_stage2___1_data_to_stage3_trace_data_word1__h31417 or
	  output_stage2___1_data_to_stage3_trace_data_word1__h31396 or
	  stage2_mbox$word)
  begin
    case (stage2_rg_stage2[824:822])
      3'd1, 3'd4:
	  CASE_stage2_rg_stage2_BITS_824_TO_822_1_output_ETC__q34 =
	      output_stage2___1_data_to_stage3_trace_data_word1__h31396;
      3'd2:
	  CASE_stage2_rg_stage2_BITS_824_TO_822_1_output_ETC__q34 =
	      stage2_rg_stage2[319:256];
      3'd3:
	  CASE_stage2_rg_stage2_BITS_824_TO_822_1_output_ETC__q34 =
	      stage2_mbox$word;
      default: CASE_stage2_rg_stage2_BITS_824_TO_822_1_output_ETC__q34 =
		   output_stage2___1_data_to_stage3_trace_data_word1__h31417;
    endcase
  end
  always@(stage2_rg_stage2 or
	  stage2_rg_stage2_15_BITS_127_TO_64_505_CONCAT__ETC___d2510 or
	  IF_stage2_rg_stage2_15_BIT_432_07_THEN_csr_reg_ETC___d2504)
  begin
    case (stage2_rg_stage2[824:822])
      3'd1, 3'd4:
	  CASE_stage2_rg_stage2_BITS_824_TO_822_1_IF_sta_ETC__q35 =
	      IF_stage2_rg_stage2_15_BIT_432_07_THEN_csr_reg_ETC___d2504;
      default: CASE_stage2_rg_stage2_BITS_824_TO_822_1_IF_sta_ETC__q35 =
		   stage2_rg_stage2_15_BITS_127_TO_64_505_CONCAT__ETC___d2510;
    endcase
  end
  always@(stage1_rg_stage_input)
  begin
    case (stage1_rg_stage_input[187:181])
      7'b1100011:
	  CASE_stage1_rg_stage_input_BITS_187_TO_181_0b1_ETC__q36 = 2'd0;
      7'b1100111:
	  CASE_stage1_rg_stage_input_BITS_187_TO_181_0b1_ETC__q36 = 2'd2;
      7'b1101111:
	  CASE_stage1_rg_stage_input_BITS_187_TO_181_0b1_ETC__q36 = 2'd1;
      default: CASE_stage1_rg_stage_input_BITS_187_TO_181_0b1_ETC__q36 = 2'd3;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        cfg_logdelay <= `BSV_ASSIGNMENT_DELAY 64'd0;
	cfg_verbosity <= `BSV_ASSIGNMENT_DELAY 4'd0;
	imem_rg_cache_addr <= `BSV_ASSIGNMENT_DELAY 64'hFFFFFFFFFFFFFFFF;
	rg_cur_priv <= `BSV_ASSIGNMENT_DELAY 2'b11;
	rg_instret_reported <= `BSV_ASSIGNMENT_DELAY 64'hFFFFFFFFFFFFFFFF;
	rg_pc_reported <= `BSV_ASSIGNMENT_DELAY 64'hFFFFFFFFFFFFFFFF;
	rg_prev_mip <= `BSV_ASSIGNMENT_DELAY 64'd0;
	rg_run_on_reset <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_state <= `BSV_ASSIGNMENT_DELAY 4'd0;
	rg_wfi_counter <= `BSV_ASSIGNMENT_DELAY 32'hFFFFFFFF;
	stage1_rg_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	stage2_rg_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	stage2_rg_resetting <= `BSV_ASSIGNMENT_DELAY 1'd0;
	stage3_rg_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	stageD_rg_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	stageF_rg_epoch <= `BSV_ASSIGNMENT_DELAY 2'd0;
	stageF_rg_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (cfg_logdelay$EN)
	  cfg_logdelay <= `BSV_ASSIGNMENT_DELAY cfg_logdelay$D_IN;
	if (cfg_verbosity$EN)
	  cfg_verbosity <= `BSV_ASSIGNMENT_DELAY cfg_verbosity$D_IN;
	if (imem_rg_cache_addr$EN)
	  imem_rg_cache_addr <= `BSV_ASSIGNMENT_DELAY imem_rg_cache_addr$D_IN;
	if (rg_cur_priv$EN)
	  rg_cur_priv <= `BSV_ASSIGNMENT_DELAY rg_cur_priv$D_IN;
	if (rg_instret_reported$EN)
	  rg_instret_reported <= `BSV_ASSIGNMENT_DELAY
	      rg_instret_reported$D_IN;
	if (rg_pc_reported$EN)
	  rg_pc_reported <= `BSV_ASSIGNMENT_DELAY rg_pc_reported$D_IN;
	if (rg_prev_mip$EN)
	  rg_prev_mip <= `BSV_ASSIGNMENT_DELAY rg_prev_mip$D_IN;
	if (rg_run_on_reset$EN)
	  rg_run_on_reset <= `BSV_ASSIGNMENT_DELAY rg_run_on_reset$D_IN;
	if (rg_state$EN) rg_state <= `BSV_ASSIGNMENT_DELAY rg_state$D_IN;
	if (rg_wfi_counter$EN)
	  rg_wfi_counter <= `BSV_ASSIGNMENT_DELAY rg_wfi_counter$D_IN;
	if (stage1_rg_full$EN)
	  stage1_rg_full <= `BSV_ASSIGNMENT_DELAY stage1_rg_full$D_IN;
	if (stage2_rg_full$EN)
	  stage2_rg_full <= `BSV_ASSIGNMENT_DELAY stage2_rg_full$D_IN;
	if (stage2_rg_resetting$EN)
	  stage2_rg_resetting <= `BSV_ASSIGNMENT_DELAY
	      stage2_rg_resetting$D_IN;
	if (stage3_rg_full$EN)
	  stage3_rg_full <= `BSV_ASSIGNMENT_DELAY stage3_rg_full$D_IN;
	if (stageD_rg_full$EN)
	  stageD_rg_full <= `BSV_ASSIGNMENT_DELAY stageD_rg_full$D_IN;
	if (stageF_rg_epoch$EN)
	  stageF_rg_epoch <= `BSV_ASSIGNMENT_DELAY stageF_rg_epoch$D_IN;
	if (stageF_rg_full$EN)
	  stageF_rg_full <= `BSV_ASSIGNMENT_DELAY stageF_rg_full$D_IN;
      end
    if (imem_rg_cache_b16$EN)
      imem_rg_cache_b16 <= `BSV_ASSIGNMENT_DELAY imem_rg_cache_b16$D_IN;
    if (imem_rg_f3$EN) imem_rg_f3 <= `BSV_ASSIGNMENT_DELAY imem_rg_f3$D_IN;
    if (imem_rg_mstatus_MXR$EN)
      imem_rg_mstatus_MXR <= `BSV_ASSIGNMENT_DELAY imem_rg_mstatus_MXR$D_IN;
    if (imem_rg_pc$EN) imem_rg_pc <= `BSV_ASSIGNMENT_DELAY imem_rg_pc$D_IN;
    if (imem_rg_priv$EN)
      imem_rg_priv <= `BSV_ASSIGNMENT_DELAY imem_rg_priv$D_IN;
    if (imem_rg_satp$EN)
      imem_rg_satp <= `BSV_ASSIGNMENT_DELAY imem_rg_satp$D_IN;
    if (imem_rg_sstatus_SUM$EN)
      imem_rg_sstatus_SUM <= `BSV_ASSIGNMENT_DELAY imem_rg_sstatus_SUM$D_IN;
    if (imem_rg_tval$EN)
      imem_rg_tval <= `BSV_ASSIGNMENT_DELAY imem_rg_tval$D_IN;
    if (rg_csr_pc$EN) rg_csr_pc <= `BSV_ASSIGNMENT_DELAY rg_csr_pc$D_IN;
    if (rg_csr_val1$EN) rg_csr_val1 <= `BSV_ASSIGNMENT_DELAY rg_csr_val1$D_IN;
    if (rg_epoch$EN) rg_epoch <= `BSV_ASSIGNMENT_DELAY rg_epoch$D_IN;
    if (rg_mstatus_MXR$EN)
      rg_mstatus_MXR <= `BSV_ASSIGNMENT_DELAY rg_mstatus_MXR$D_IN;
    if (rg_next_pc$EN) rg_next_pc <= `BSV_ASSIGNMENT_DELAY rg_next_pc$D_IN;
    if (rg_sstatus_SUM$EN)
      rg_sstatus_SUM <= `BSV_ASSIGNMENT_DELAY rg_sstatus_SUM$D_IN;
    if (rg_start_CPI_cycles$EN)
      rg_start_CPI_cycles <= `BSV_ASSIGNMENT_DELAY rg_start_CPI_cycles$D_IN;
    if (rg_start_CPI_instrs$EN)
      rg_start_CPI_instrs <= `BSV_ASSIGNMENT_DELAY rg_start_CPI_instrs$D_IN;
    if (rg_trap_info$EN)
      rg_trap_info <= `BSV_ASSIGNMENT_DELAY rg_trap_info$D_IN;
    if (rg_trap_instr$EN)
      rg_trap_instr <= `BSV_ASSIGNMENT_DELAY rg_trap_instr$D_IN;
    if (rg_trap_interrupt$EN)
      rg_trap_interrupt <= `BSV_ASSIGNMENT_DELAY rg_trap_interrupt$D_IN;
    if (rg_trap_trace_data$EN)
      rg_trap_trace_data <= `BSV_ASSIGNMENT_DELAY rg_trap_trace_data$D_IN;
    if (stage1_rg_stage_input$EN)
      stage1_rg_stage_input <= `BSV_ASSIGNMENT_DELAY
	  stage1_rg_stage_input$D_IN;
    if (stage2_rg_stage2$EN)
      stage2_rg_stage2 <= `BSV_ASSIGNMENT_DELAY stage2_rg_stage2$D_IN;
    if (stage3_rg_stage3$EN)
      stage3_rg_stage3 <= `BSV_ASSIGNMENT_DELAY stage3_rg_stage3$D_IN;
    if (stageD_rg_data$EN)
      stageD_rg_data <= `BSV_ASSIGNMENT_DELAY stageD_rg_data$D_IN;
    if (stageF_rg_priv$EN)
      stageF_rg_priv <= `BSV_ASSIGNMENT_DELAY stageF_rg_priv$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    cfg_logdelay = 64'hAAAAAAAAAAAAAAAA;
    cfg_verbosity = 4'hA;
    imem_rg_cache_addr = 64'hAAAAAAAAAAAAAAAA;
    imem_rg_cache_b16 = 16'hAAAA;
    imem_rg_f3 = 3'h2;
    imem_rg_mstatus_MXR = 1'h0;
    imem_rg_pc = 64'hAAAAAAAAAAAAAAAA;
    imem_rg_priv = 2'h2;
    imem_rg_satp = 64'hAAAAAAAAAAAAAAAA;
    imem_rg_sstatus_SUM = 1'h0;
    imem_rg_tval = 64'hAAAAAAAAAAAAAAAA;
    rg_csr_pc = 64'hAAAAAAAAAAAAAAAA;
    rg_csr_val1 = 64'hAAAAAAAAAAAAAAAA;
    rg_cur_priv = 2'h2;
    rg_epoch = 2'h2;
    rg_instret_reported = 64'hAAAAAAAAAAAAAAAA;
    rg_mstatus_MXR = 1'h0;
    rg_next_pc = 64'hAAAAAAAAAAAAAAAA;
    rg_pc_reported = 64'hAAAAAAAAAAAAAAAA;
    rg_prev_mip = 64'hAAAAAAAAAAAAAAAA;
    rg_run_on_reset = 1'h0;
    rg_sstatus_SUM = 1'h0;
    rg_start_CPI_cycles = 64'hAAAAAAAAAAAAAAAA;
    rg_start_CPI_instrs = 64'hAAAAAAAAAAAAAAAA;
    rg_state = 4'hA;
    rg_trap_info = 132'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_trap_instr = 32'hAAAAAAAA;
    rg_trap_interrupt = 1'h0;
    rg_trap_trace_data =
	427'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_wfi_counter = 32'hAAAAAAAA;
    stage1_rg_full = 1'h0;
    stage1_rg_stage_input =
	438'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    stage2_rg_full = 1'h0;
    stage2_rg_resetting = 1'h0;
    stage2_rg_stage2 =
	923'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    stage3_rg_full = 1'h0;
    stage3_rg_stage3 =
	666'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    stageD_rg_data =
	234'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    stageD_rg_full = 1'h0;
    stageF_rg_epoch = 2'h2;
    stageF_rg_full = 1'h0;
    stageF_rg_priv = 2'h2;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_set_verbosity &&
	  NOT_set_verbosity_verbosity_EQ_cfg_verbosity_r_ETC___d3311)
	$display("%0d: CPU verbosity change to %0d; logdelay %0d",
		 csr_regfile$read_csr_mcycle,
		 set_verbosity_verbosity,
		 set_verbosity_logdelay);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_set_verbosity &&
	  NOT_set_verbosity_verbosity_EQ_cfg_verbosity_r_ETC___d3311)
	$display("    %m");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$display("================================================================");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$display("%0d: Pipeline State:  minstret:%0d  cur_priv:%0d  mstatus:%0x  epoch:%0d",
		 csr_regfile$read_csr_mcycle,
		 csr_regfile$read_csr_minstret,
		 rg_cur_priv,
		 csr_regfile$read_mstatus,
		 rg_epoch);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write("MStatus{",
	       "sd:%0d",
	       csr_regfile$read_mstatus[14:13] == 2'h3 ||
	       csr_regfile$read_mstatus[16:15] == 2'h3);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && csr_regfile$read_misa[27:26] == 2'd2)
	$write(" sxl:%0d uxl:%0d", sxl__h6927, uxl__h6928);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && csr_regfile$read_misa[27:26] != 2'd2)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" tsr:%0d", csr_regfile$read_mstatus[22]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" tw:%0d", csr_regfile$read_mstatus[21]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" tvm:%0d", csr_regfile$read_mstatus[20]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" mxr:%0d", csr_regfile$read_mstatus[19]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" sum:%0d", csr_regfile$read_mstatus[18]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" mprv:%0d", csr_regfile$read_mstatus[17]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" xs:%0d", csr_regfile$read_mstatus[16:15]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" fs:%0d", csr_regfile$read_mstatus[14:13]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" mpp:%0d", csr_regfile$read_mstatus[12:11]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" spp:%0d", csr_regfile$read_mstatus[8]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" pies:%0d_%0d%0d",
	       csr_regfile$read_mstatus[7],
	       csr_regfile$read_mstatus[5],
	       csr_regfile$read_mstatus[4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" ies:%0d_%0d%0d",
	       csr_regfile$read_mstatus[3],
	       csr_regfile$read_mstatus[1],
	       csr_regfile$read_mstatus[0]);
    if (RST_N != `BSV_RESET_VALUE) if (WILL_FIRE_RL_rl_show_pipe) $write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("    Stage3: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("Output_Stage3");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage3_rg_full) $write(" PIPE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage3_rg_full) $write(" EMPTY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("        Bypass  to Stage1: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("Bypass {");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  (stage3_rg_stage3[496] || !stage3_rg_full ||
	   !stage3_rg_stage3[567]))
	$write("Rd -");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage3_rg_stage3[496] &&
	  stage3_rg_full &&
	  stage3_rg_stage3[567])
	$write("Rd %0d ", stage3_rg_stage3[566:562]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  (stage3_rg_stage3[496] || !stage3_rg_full ||
	   !stage3_rg_stage3[567]))
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage3_rg_stage3[496] &&
	  stage3_rg_full &&
	  stage3_rg_stage3[567])
	$write("rd_val:%h", stage3_rg_stage3[561:498]);
    if (RST_N != `BSV_RESET_VALUE) if (WILL_FIRE_RL_rl_show_pipe) $write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("        FBypass to Stage1: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("FBypass {");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  (!stage3_rg_stage3[496] || !stage3_rg_full ||
	   !stage3_rg_stage3[567]))
	$write("FRd -");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage3_rg_stage3[496] &&
	  stage3_rg_full &&
	  stage3_rg_stage3[567])
	$write("FRd %0d ", stage3_rg_stage3[566:562]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  (!stage3_rg_stage3[496] || !stage3_rg_full ||
	   !stage3_rg_stage3[567]))
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage3_rg_stage3[496] &&
	  stage3_rg_full &&
	  stage3_rg_stage3[567])
	$write("frd_val:%h", stage3_rg_stage3[490:427]);
    if (RST_N != `BSV_RESET_VALUE) if (WILL_FIRE_RL_rl_show_pipe) $write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$display("    Stage2: pc 0x%08h instr 0x%08h priv %0d",
		 stage2_rg_stage2[920:857],
		 stage2_rg_stage2[856:825],
		 stage2_rg_stage2[922:921]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("        ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  NOT_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ__ETC___d148)
	$write("Output_Stage2", " BUSY: pc:%0h", stage2_rg_stage2[920:857]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d152 &&
	  NOT_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ__ETC___d156)
	$write("Output_Stage2", " NONPIPE: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage2_rg_full_14_AND_stage2_rg_stage2_15_BITS_ETC___d170)
	$write("Output_Stage2", " PIPE: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage2_rg_full)
	$write("Output_Stage2", " EMPTY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  NOT_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ__ETC___d148)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d152 &&
	  NOT_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ__ETC___d156)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage2_rg_full_14_AND_stage2_rg_stage2_15_BITS_ETC___d170)
	$write("data_to_Stage3 {pc:%h  instr:%h  priv:%0d\n",
	       stage2_rg_stage2[920:857],
	       stage2_rg_stage2[856:825],
	       stage2_rg_stage2[922:921]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage2_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  NOT_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ__ETC___d148)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d152 &&
	  NOT_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ__ETC___d156)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage2_rg_full_14_AND_stage2_rg_stage2_15_BITS_ETC___d170)
	$write("        rd_valid:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage2_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  NOT_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ__ETC___d148)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d152 &&
	  NOT_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ__ETC___d156)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d152 &&
	  NOT_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ__ETC___d177)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  (stage2_rg_stage2[824:822] == 3'd0 ||
	   IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d152) &&
	  stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_0_17_ETC___d168 &&
	  (stage2_rg_stage2[824:822] == 3'd0 ||
	   IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d184))
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage2_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  NOT_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ__ETC___d148)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d152 &&
	  NOT_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ__ETC___d156)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d152 &&
	  stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_0_17_ETC___d168 &&
	  stage2_rg_stage2[824:822] != 3'd0 &&
	  stage2_rg_stage2[824:822] != 3'd1 &&
	  stage2_rg_stage2[824:822] != 3'd4 &&
	  stage2_rg_stage2[824:822] != 3'd2 &&
	  stage2_rg_stage2[824:822] != 3'd3)
	$write("  fflags: %05b",
	       "'h%h",
	       x_out_data_to_stage3_fpr_flags__h8415);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  (stage2_rg_stage2[824:822] == 3'd0 ||
	   IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d152) &&
	  stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_0_17_ETC___d168 &&
	  (stage2_rg_stage2[824:822] == 3'd0 ||
	   stage2_rg_stage2[824:822] == 3'd1 ||
	   stage2_rg_stage2[824:822] == 3'd4 ||
	   stage2_rg_stage2[824:822] == 3'd2 ||
	   stage2_rg_stage2[824:822] == 3'd3))
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage2_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  NOT_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ__ETC___d148)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d152 &&
	  NOT_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ__ETC___d156)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_0_17_ETC___d215)
	$write("  frd:%0d  rd_val:%h\n",
	       x_out_data_to_stage3_rd__h8411,
	       x_out_data_to_stage3_frd_val__h8416);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_0_17_ETC___d244)
	$write("  grd:%0d  rd_val:%h\n",
	       x_out_data_to_stage3_rd__h8411,
	       x_out_data_to_stage3_rd_val__h8412);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage2_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  NOT_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ__ETC___d148)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d152 &&
	  NOT_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ__ETC___d156)
	$write("Trap_Info { ", "epc: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage2_rg_full_14_AND_stage2_rg_stage2_15_BITS_ETC___d170)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage2_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  NOT_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ__ETC___d148)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d152 &&
	  NOT_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ__ETC___d156)
	$write("'h%h", value__h8810);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage2_rg_full_14_AND_stage2_rg_stage2_15_BITS_ETC___d170)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage2_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  NOT_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ__ETC___d148)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d152 &&
	  NOT_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ__ETC___d156)
	$write(", ", "exc_code: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage2_rg_full_14_AND_stage2_rg_stage2_15_BITS_ETC___d170)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage2_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  NOT_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ__ETC___d148)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d152 &&
	  NOT_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ__ETC___d156)
	$write("'h%h", x_out_trap_info_exc_code__h8920);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage2_rg_full_14_AND_stage2_rg_stage2_15_BITS_ETC___d170)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage2_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  NOT_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ__ETC___d148)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d152 &&
	  NOT_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ__ETC___d156)
	$write(", ", "tval: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage2_rg_full_14_AND_stage2_rg_stage2_15_BITS_ETC___d170)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage2_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  NOT_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ__ETC___d148)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d152 &&
	  NOT_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ__ETC___d156)
	$write("'h%h", value__h9024, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage2_rg_full_14_AND_stage2_rg_stage2_15_BITS_ETC___d170)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage2_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  NOT_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ__ETC___d148)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d152 &&
	  NOT_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ__ETC___d156)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage2_rg_full_14_AND_stage2_rg_stage2_15_BITS_ETC___d170)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage2_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  NOT_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ__ETC___d148)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d152 &&
	  NOT_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ__ETC___d156)
	$write("Trap_Info { ", "epc: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage2_rg_full_14_AND_stage2_rg_stage2_15_BITS_ETC___d170)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage2_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  NOT_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ__ETC___d148)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d152 &&
	  NOT_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ__ETC___d156)
	$write("'h%h", value__h8810);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage2_rg_full_14_AND_stage2_rg_stage2_15_BITS_ETC___d170)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage2_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  NOT_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ__ETC___d148)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d152 &&
	  NOT_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ__ETC___d156)
	$write(", ", "exc_code: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage2_rg_full_14_AND_stage2_rg_stage2_15_BITS_ETC___d170)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage2_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  NOT_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ__ETC___d148)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d152 &&
	  NOT_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ__ETC___d156)
	$write("'h%h", x_out_trap_info_exc_code__h8920);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage2_rg_full_14_AND_stage2_rg_stage2_15_BITS_ETC___d170)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage2_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  NOT_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ__ETC___d148)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d152 &&
	  NOT_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ__ETC___d156)
	$write(", ", "tval: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage2_rg_full_14_AND_stage2_rg_stage2_15_BITS_ETC___d170)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage2_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  NOT_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ__ETC___d148)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d152 &&
	  NOT_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ__ETC___d156)
	$write("'h%h", value__h9024, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage2_rg_full_14_AND_stage2_rg_stage2_15_BITS_ETC___d170)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage2_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("        Bypass  to Stage1: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("Bypass {");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  (!stage2_rg_full ||
	   stage2_rg_stage2[824:822] != 3'd0 &&
	   IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d271))
	$write("Rd -");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  (stage2_rg_stage2[824:822] == 3'd0 ||
	   IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d277))
	$write("Rd %0d ", x_out_bypass_rd__h9422);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  (!stage2_rg_full ||
	   stage2_rg_stage2[824:822] != 3'd0 &&
	   IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d271))
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d277 &&
	  stage2_rg_stage2[824:822] != 3'd0 &&
	  IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d290)
	$write("-");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  (stage2_rg_stage2[824:822] == 3'd0 ||
	   IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d277) &&
	  (stage2_rg_stage2[824:822] == 3'd0 ||
	   IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d299))
	$write("rd_val:%h", x_out_bypass_rd_val__h9423);
    if (RST_N != `BSV_RESET_VALUE) if (WILL_FIRE_RL_rl_show_pipe) $write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("        FBypass to Stage1: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("FBypass {");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  (!stage2_rg_full || stage2_rg_stage2[824:822] == 3'd0 ||
	   IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d313))
	$write("FRd -");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  stage2_rg_stage2[824:822] != 3'd0 &&
	  IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d318)
	$write("FRd %0d ", x_out_fbypass_rd__h9616);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  (!stage2_rg_full || stage2_rg_stage2[824:822] == 3'd0 ||
	   IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d313))
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  stage2_rg_stage2[824:822] != 3'd0 &&
	  IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d318 &&
	  IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d329)
	$write("-");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage2_rg_full &&
	  stage2_rg_stage2[824:822] != 3'd0 &&
	  IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d318 &&
	  IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d336)
	$write("frd_val:%h", x_out_fbypass_rd_val__h9617);
    if (RST_N != `BSV_RESET_VALUE) if (WILL_FIRE_RL_rl_show_pipe) $write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$display("    Stage1: pc 0x%08h instr 0x%08h priv %0d",
		 stage1_rg_stage_input[437:374],
		 stage1_rg_stage_input[299:268],
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("        ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_45_AND_stage1_rg_stage_input_46_ETC___d377)
	$write("Output_Stage1",
	       " BUSY pc:%h",
	       stage1_rg_stage_input[437:374]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d348 &&
	  NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d824)
	$write("Output_Stage1",
	       " NONPIPE: pc:%h",
	       stage1_rg_stage_input[437:374]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_46_BITS_371_TO_370_4_ETC___d1026)
	$write("Output_Stage1");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full)
	$write("Output_Stage1", " EMPTY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_45_AND_stage1_rg_stage_input_46_ETC___d377)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d348 &&
	  NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d824)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_46_BITS_371_TO_370_4_ETC___d1026)
	$write(" PIPE: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_45_AND_stage1_rg_stage_input_46_ETC___d377)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d348 &&
	  NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d824)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_45_AND_NOT_stage2_rg_full_14_71_ETC___d1042)
	$write("CONTROL_STRAIGHT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_45_AND_NOT_stage2_rg_full_14_71_ETC___d1050)
	$write("CONTROL_BRANCH");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d382 &&
	  NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d389 &&
	  stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1061)
	$write("CONTROL_CSRR_W");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d382 &&
	  NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d389 &&
	  stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1076)
	$write("CONTROL_CSRR_S_or_C");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d382 &&
	  NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d389 &&
	  stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1094)
	$write("CONTROL_FENCE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d382 &&
	  NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d389 &&
	  stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1108)
	$write("CONTROL_FENCE_I");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d382 &&
	  NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d389 &&
	  stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1125)
	$write("CONTROL_SFENCE_VMA");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d382 &&
	  NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d389 &&
	  stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1140)
	$write("CONTROL_MRET");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d382 &&
	  NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d389 &&
	  stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1165)
	$write("CONTROL_SRET");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d382 &&
	  NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d389 &&
	  stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1187)
	$write("CONTROL_WFI");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d1271)
	$write("CONTROL_TRAP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  !stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d348)
	$write("CONTROL_DISCARD");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_45_AND_stage1_rg_stage_input_46_ETC___d377)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d348 &&
	  NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d824)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_46_BITS_371_TO_370_4_ETC___d1026)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_45_AND_stage1_rg_stage_input_46_ETC___d377)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d348 &&
	  NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d824)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_46_BITS_371_TO_370_4_ETC___d1282)
	$write("{", "CF_None");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_46_BITS_371_TO_370_4_ETC___d1290)
	$write("{", "BR ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_46_BITS_371_TO_370_4_ETC___d1295)
	$write("{");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_45_AND_stage1_rg_stage_input_46_ETC___d377)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d348 &&
	  NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d824)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_46_BITS_371_TO_370_4_ETC___d1282)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_46_BITS_371_TO_370_4_ETC___d1290)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_46_BITS_371_TO_370_4_ETC___d1301)
	$write("JAL [%h->%h/%h]",
	       stage1_rg_stage_input[437:374],
	       x_out_cf_info_taken_PC__h17800,
	       x_out_cf_info_fallthru_PC__h17799);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1330)
	$write("JALR [%h->%h/%h]",
	       stage1_rg_stage_input[437:374],
	       x_out_cf_info_taken_PC__h17800,
	       x_out_cf_info_fallthru_PC__h17799);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_45_AND_stage1_rg_stage_input_46_ETC___d377)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d348 &&
	  NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d824)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_46_BITS_371_TO_370_4_ETC___d1282)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_46_BITS_371_TO_370_4_ETC___d1290)
	if (stage1_rg_stage_input[187:181] != 7'b1100011 ||
	    IF_stage1_rg_stage_input_46_BITS_148_TO_146_94_ETC___d447)
	  $write("taken ");
	else
	  $write("fallthru ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_46_BITS_371_TO_370_4_ETC___d1295)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_45_AND_stage1_rg_stage_input_46_ETC___d377)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d348 &&
	  NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d824)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_46_BITS_371_TO_370_4_ETC___d1282)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_46_BITS_371_TO_370_4_ETC___d1290)
	$write("[%h->%h %h]",
	       stage1_rg_stage_input[437:374],
	       x_out_cf_info_fallthru_PC__h17799,
	       x_out_cf_info_taken_PC__h17800);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_46_BITS_371_TO_370_4_ETC___d1295)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_45_AND_stage1_rg_stage_input_46_ETC___d377)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d348 &&
	  NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d824)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_46_BITS_371_TO_370_4_ETC___d1026)
	$write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_45_AND_stage1_rg_stage_input_46_ETC___d377)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d348 &&
	  NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d824)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_46_BITS_371_TO_370_4_ETC___d1026)
	$write("data_to_Stage 2 {pc:%h  instr:%h  priv:%0d\n",
	       stage1_rg_stage_input[437:374],
	       stage1_rg_stage_input[299:268],
	       rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_45_AND_stage1_rg_stage_input_46_ETC___d377)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d348 &&
	  NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d824)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_46_BITS_371_TO_370_4_ETC___d1026)
	$write("            op_stage2:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_45_AND_stage1_rg_stage_input_46_ETC___d377)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d348 &&
	  NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d824)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_46_BITS_371_TO_370_4_ETC___d1353)
	$write("OP_Stage2_ALU");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_45_AND_NOT_stage2_rg_full_14_71_ETC___d1376)
	$write("OP_Stage2_LD");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d1394)
	$write("OP_Stage2_ST");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d382 &&
	  NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d389 &&
	  stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1426)
	$write("OP_Stage2_M");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_45_AND_NOT_stage2_rg_full_14_71_ETC___d1433)
	$write("OP_Stage2_AMO");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_45_AND_NOT_stage2_rg_full_14_71_ETC___d1459)
	$write("OP_Stage2_FD");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_45_AND_stage1_rg_stage_input_46_ETC___d377)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d348 &&
	  NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d824)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_46_BITS_371_TO_370_4_ETC___d1026)
	$write("  rd:%0d\n", x_out_data_to_stage2_rd__h10352);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_45_AND_stage1_rg_stage_input_46_ETC___d377)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d348 &&
	  NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d824)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_46_BITS_371_TO_370_4_ETC___d1026)
	$write("            addr:%h  val1:%h  val2:%h}",
	       x_out_data_to_stage2_addr__h10353,
	       x_out_data_to_stage2_val1__h10354,
	       x_out_data_to_stage2_val2__h10355);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_45_AND_stage1_rg_stage_input_46_ETC___d377)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d348 &&
	  NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d824)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_46_BITS_371_TO_370_4_ETC___d1026)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_45_AND_stage1_rg_stage_input_46_ETC___d377)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d348 &&
	  NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d824)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_46_BITS_371_TO_370_4_ETC___d1026)
	$write("            fval1:%h  fval2:%h  fval3:%h}",
	       x_out_data_to_stage2_fval1__h10356,
	       alu_outputs___1_fval2__h11906,
	       x_out_data_to_stage2_fval3__h10358);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_45_AND_stage1_rg_stage_input_46_ETC___d377)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d348 &&
	  NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d824)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_46_BITS_371_TO_370_4_ETC___d1026)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_45_AND_stage1_rg_stage_input_46_ETC___d377)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d1673)
	$write("CONTROL_STRAIGHT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d348 &&
	  NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d824 &&
	  stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1047)
	$write("CONTROL_BRANCH");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d348 &&
	  NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d824 &&
	  stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1059)
	$write("CONTROL_CSRR_W");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d348 &&
	  NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d824 &&
	  stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1074)
	$write("CONTROL_CSRR_S_or_C");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d348 &&
	  NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d824 &&
	  stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1092)
	$write("CONTROL_FENCE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d348 &&
	  NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d824 &&
	  stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1106)
	$write("CONTROL_FENCE_I");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d348 &&
	  NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d824 &&
	  stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1123)
	$write("CONTROL_SFENCE_VMA");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d348 &&
	  NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d824 &&
	  stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1138)
	$write("CONTROL_MRET");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d348 &&
	  NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d824 &&
	  stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1163)
	$write("CONTROL_SRET");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d348 &&
	  NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d824 &&
	  stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1185)
	$write("CONTROL_WFI");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d348 &&
	  NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d824 &&
	  stage2_rg_full_14_AND_NOT_stage2_rg_stage2_15__ETC___d1268)
	$write("CONTROL_TRAP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_46_BITS_371_TO_370_4_ETC___d1026)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_45_AND_stage1_rg_stage_input_46_ETC___d377)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d348 &&
	  NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d824)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_46_BITS_371_TO_370_4_ETC___d1026)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_45_AND_stage1_rg_stage_input_46_ETC___d377)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d348 &&
	  NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d824)
	$write("Trap_Info { ", "epc: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_46_BITS_371_TO_370_4_ETC___d1026)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_45_AND_stage1_rg_stage_input_46_ETC___d377)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d348 &&
	  NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d824)
	$write("'h%h", stage1_rg_stage_input[437:374]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_46_BITS_371_TO_370_4_ETC___d1026)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_45_AND_stage1_rg_stage_input_46_ETC___d377)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d348 &&
	  NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d824)
	$write(", ", "exc_code: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_46_BITS_371_TO_370_4_ETC___d1026)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_45_AND_stage1_rg_stage_input_46_ETC___d377)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d348 &&
	  NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d824)
	$write("'h%h", x_out_trap_info_exc_code__h16642);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_46_BITS_371_TO_370_4_ETC___d1026)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_45_AND_stage1_rg_stage_input_46_ETC___d377)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d348 &&
	  NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d824)
	$write(", ", "tval: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_46_BITS_371_TO_370_4_ETC___d1026)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_45_AND_stage1_rg_stage_input_46_ETC___d377)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d348 &&
	  NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d824)
	$write("'h%h", value__h16712, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_46_BITS_371_TO_370_4_ETC___d1026)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stage1_rg_full_45_AND_stage1_rg_stage_input_46_ETC___d377)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_46_BITS_371_TO_370_4_ETC___d1747)
	$write("\n        redirect next_pc:%h", x_out_next_pc__h10042);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_stage1_rg_stage_input_46_BITS_371_TO_370_4_ETC___d1751)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$display("    StageD: pc 0x%08h instr 0x%08h priv %0d epoch %0d",
		 stageD_rg_data[233:170],
		 x_out_data_to_stage1_instr__h19725,
		 stageD_rg_data[167:166],
		 stageD_rg_data[169:168]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("        ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("Output_StageD");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full) $write(" PIPE: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stageD_rg_full) $write(" EMPTY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full && stageD_rg_data[164])
	$write("data_to_Stage1 {pc:%0h  priv:%0d  epoch:%0d",
	       stageD_rg_data[233:170],
	       stageD_rg_data[167:166],
	       stageD_rg_data[169:168]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full && !stageD_rg_data[164])
	$write("data_to_Stage1 {pc:%0h  priv:%0d  epoch:%0d",
	       stageD_rg_data[233:170],
	       stageD_rg_data[167:166],
	       stageD_rg_data[169:168]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stageD_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full && stageD_rg_data[164])
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full &&
	  !stageD_rg_data[164] &&
	  stageD_rg_data[165])
	$write("  instr_C:%0h", stageD_rg_data[79:64]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full &&
	  !stageD_rg_data[164] &&
	  !stageD_rg_data[165])
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stageD_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full && stageD_rg_data[164])
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full && !stageD_rg_data[164])
	$write("  instr:%0h  pred_pc:%0h",
	       x_out_data_to_stage1_instr__h19725,
	       stageD_rg_data[63:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stageD_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full && stageD_rg_data[164])
	$write("  ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full && !stageD_rg_data[164])
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stageD_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full &&
	  stageD_rg_data[164] &&
	  stageD_rg_data[163:160] == 4'd0)
	$write("INSTRUCTION_ADDR_MISALIGNED");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full &&
	  stageD_rg_data[164] &&
	  stageD_rg_data[163:160] == 4'd1)
	$write("INSTRUCTION_ACCESS_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full &&
	  stageD_rg_data[164] &&
	  stageD_rg_data[163:160] == 4'd2)
	$write("ILLEGAL_INSTRUCTION");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full &&
	  stageD_rg_data[164] &&
	  stageD_rg_data[163:160] == 4'd3)
	$write("BREAKPOINT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full &&
	  stageD_rg_data[164] &&
	  stageD_rg_data[163:160] == 4'd4)
	$write("LOAD_ADDR_MISALIGNED");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full &&
	  stageD_rg_data[164] &&
	  stageD_rg_data[163:160] == 4'd5)
	$write("LOAD_ACCESS_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full &&
	  stageD_rg_data[164] &&
	  stageD_rg_data[163:160] == 4'd6)
	$write("STORE_AMO_ADDR_MISALIGNED");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full &&
	  stageD_rg_data[164] &&
	  stageD_rg_data[163:160] == 4'd7)
	$write("STORE_AMO_ACCESS_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full &&
	  stageD_rg_data[164] &&
	  stageD_rg_data[163:160] == 4'd8)
	$write("ECALL_FROM_U");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full &&
	  stageD_rg_data[164] &&
	  stageD_rg_data[163:160] == 4'd9)
	$write("ECALL_FROM_S");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full &&
	  stageD_rg_data[164] &&
	  stageD_rg_data[163:160] == 4'd11)
	$write("ECALL_FROM_M");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full &&
	  stageD_rg_data[164] &&
	  stageD_rg_data[163:160] == 4'd12)
	$write("INSTRUCTION_PAGE_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full &&
	  stageD_rg_data[164] &&
	  stageD_rg_data[163:160] == 4'd13)
	$write("LOAD_PAGE_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full &&
	  stageD_rg_data[164] &&
	  stageD_rg_data[163:160] == 4'd15)
	$write("STORE_AMO_PAGE_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full &&
	  stageD_rg_data[164] &&
	  stageD_rg_data[163:160] != 4'd0 &&
	  stageD_rg_data[163:160] != 4'd1 &&
	  stageD_rg_data[163:160] != 4'd2 &&
	  stageD_rg_data[163:160] != 4'd3 &&
	  stageD_rg_data[163:160] != 4'd4 &&
	  stageD_rg_data[163:160] != 4'd5 &&
	  stageD_rg_data[163:160] != 4'd6 &&
	  stageD_rg_data[163:160] != 4'd7 &&
	  stageD_rg_data[163:160] != 4'd8 &&
	  stageD_rg_data[163:160] != 4'd9 &&
	  stageD_rg_data[163:160] != 4'd11 &&
	  stageD_rg_data[163:160] != 4'd12 &&
	  stageD_rg_data[163:160] != 4'd13 &&
	  stageD_rg_data[163:160] != 4'd15)
	$write("unknown trap Exc_Code %d", stageD_rg_data[163:160]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full && !stageD_rg_data[164])
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stageD_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full && stageD_rg_data[164])
	$write(" tval %0h", stageD_rg_data[159:96]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full && !stageD_rg_data[164])
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stageD_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageD_rg_full) $write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stageD_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$display("    StageF: pc 0x%08h instr 0x%08h priv %0d epoch %0d",
		 imem_rg_pc,
		 d_instr__h27420,
		 stageF_rg_priv,
		 stageF_rg_epoch);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("        ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("Output_StageF");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageF_rg_full &&
	  (!near_mem$imem_valid ||
	   NOT_near_mem_imem_exc__1_2_AND_imem_rg_pc_BITS_ETC___d2199))
	$write(" BUSY: pc:%h", imem_rg_pc);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageF_rg_full &&
	  near_mem$imem_valid &&
	  near_mem_imem_exc__1_OR_NOT_imem_rg_pc_BITS_1__ETC___d2206)
	$write(" PIPE: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stageF_rg_full) $write(" EMPTY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageF_rg_full &&
	  (!near_mem$imem_valid ||
	   NOT_near_mem_imem_exc__1_2_AND_imem_rg_pc_BITS_ETC___d2199))
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageF_rg_full &&
	  near_mem$imem_valid &&
	  near_mem_imem_exc__1_OR_NOT_imem_rg_pc_BITS_1__ETC___d2206)
	$write("data_to_StageD {pc:%h  priv:%0d  epoch:%0d",
	       imem_rg_pc,
	       stageF_rg_priv,
	       stageF_rg_epoch);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stageF_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageF_rg_full &&
	  (!near_mem$imem_valid ||
	   NOT_near_mem_imem_exc__1_2_AND_imem_rg_pc_BITS_ETC___d2199))
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageF_rg_full &&
	  near_mem$imem_valid &&
	  near_mem$imem_exc)
	$write("  ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stageF_rg_full_181_AND_near_mem_imem_valid_AND_ETC___d2213)
	$write("  instr:%h  pred_pc:%h",
	       d_instr__h27420,
	       stageF_branch_predictor$predict_rsp);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stageF_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageF_rg_full &&
	  (!near_mem$imem_valid ||
	   NOT_near_mem_imem_exc__1_2_AND_imem_rg_pc_BITS_ETC___d2199))
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageF_rg_full &&
	  near_mem$imem_valid &&
	  near_mem$imem_exc &&
	  near_mem$imem_exc_code == 4'd0)
	$write("INSTRUCTION_ADDR_MISALIGNED");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageF_rg_full &&
	  near_mem$imem_valid &&
	  near_mem$imem_exc &&
	  near_mem$imem_exc_code == 4'd1)
	$write("INSTRUCTION_ACCESS_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageF_rg_full &&
	  near_mem$imem_valid &&
	  near_mem$imem_exc &&
	  near_mem$imem_exc_code == 4'd2)
	$write("ILLEGAL_INSTRUCTION");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageF_rg_full &&
	  near_mem$imem_valid &&
	  near_mem$imem_exc &&
	  near_mem$imem_exc_code == 4'd3)
	$write("BREAKPOINT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageF_rg_full &&
	  near_mem$imem_valid &&
	  near_mem$imem_exc &&
	  near_mem$imem_exc_code == 4'd4)
	$write("LOAD_ADDR_MISALIGNED");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageF_rg_full &&
	  near_mem$imem_valid &&
	  near_mem$imem_exc &&
	  near_mem$imem_exc_code == 4'd5)
	$write("LOAD_ACCESS_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageF_rg_full &&
	  near_mem$imem_valid &&
	  near_mem$imem_exc &&
	  near_mem$imem_exc_code == 4'd6)
	$write("STORE_AMO_ADDR_MISALIGNED");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageF_rg_full &&
	  near_mem$imem_valid &&
	  near_mem$imem_exc &&
	  near_mem$imem_exc_code == 4'd7)
	$write("STORE_AMO_ACCESS_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageF_rg_full &&
	  near_mem$imem_valid &&
	  near_mem$imem_exc &&
	  near_mem$imem_exc_code == 4'd8)
	$write("ECALL_FROM_U");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageF_rg_full &&
	  near_mem$imem_valid &&
	  near_mem$imem_exc &&
	  near_mem$imem_exc_code == 4'd9)
	$write("ECALL_FROM_S");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageF_rg_full &&
	  near_mem$imem_valid &&
	  near_mem$imem_exc &&
	  near_mem$imem_exc_code == 4'd11)
	$write("ECALL_FROM_M");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageF_rg_full &&
	  near_mem$imem_valid &&
	  near_mem$imem_exc &&
	  near_mem$imem_exc_code == 4'd12)
	$write("INSTRUCTION_PAGE_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageF_rg_full &&
	  near_mem$imem_valid &&
	  near_mem$imem_exc &&
	  near_mem$imem_exc_code == 4'd13)
	$write("LOAD_PAGE_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageF_rg_full &&
	  near_mem$imem_valid &&
	  near_mem$imem_exc &&
	  near_mem$imem_exc_code == 4'd15)
	$write("STORE_AMO_PAGE_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageF_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_exc__1_A_ETC___d2301)
	$write("unknown trap Exc_Code %d", near_mem$imem_exc_code);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  stageF_rg_full_181_AND_near_mem_imem_valid_AND_ETC___d2213)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stageF_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageF_rg_full &&
	  (!near_mem$imem_valid ||
	   NOT_near_mem_imem_exc__1_2_AND_imem_rg_pc_BITS_ETC___d2199))
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stageF_rg_full &&
	  near_mem$imem_valid &&
	  near_mem_imem_exc__1_OR_NOT_imem_rg_pc_BITS_1__ETC___d2206)
	$write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stageF_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $display("----------------");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_mip_cmd &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$display("%0d: %m.rl_stage1_mip_cmd: MIP new 0x%0h, old 0x%0h",
		 csr_regfile$read_csr_mcycle,
		 csr_regfile$csr_mip_read,
		 rg_prev_mip);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage2_nonpipe &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$display("%0d: %m.rl_stage2_nonpipe -> CPU_TRAP",
		 csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$display("%0d: %m.rl_stage1_trap", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_trap &&
	  rg_trap_info_068_BITS_131_TO_68_069_EQ_csr_reg_ETC___d3090)
	$display("%0d: %m.rl_stage1_trap: Tight infinite trap loop: pc 0x%0x instr 0x%08x",
		 csr_regfile$read_csr_mcycle,
		 csr_regfile$csr_trap_actions[193:130],
		 rg_trap_instr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_trap &&
	  rg_trap_info_068_BITS_131_TO_68_069_EQ_csr_reg_ETC___d3090)
	$display("    CPI: %0d.%0d = (%0d/%0d) since last 'continue'",
		 cpi__h43706,
		 cpifrac__h43707,
		 delta_CPI_cycles__h43702,
		 _theResult____h43704);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_trap &&
	  rg_trap_info_068_BITS_131_TO_68_069_EQ_csr_reg_ETC___d3090)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_trap &&
	  (cur_verbosity__h3724 != 4'd0 ||
	   csr_regfile_read_csr_minstret__0_BITS_19_TO_0__ETC___d3107))
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 rg_trap_info[131:68],
		 rg_trap_instr,
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_trap && cur_verbosity__h3724 != 4'd0)
	$display("    mcause:0x%0h  epc 0x%0h  tval:0x%0h  next_pc 0x%0h, new_priv %0d new_mstatus 0x%0h",
		 csr_regfile$csr_trap_actions[65:2],
		 rg_trap_info[131:68],
		 rg_trap_info[63:0],
		 csr_regfile$csr_trap_actions[193:130],
		 csr_regfile$csr_trap_actions[1:0],
		 csr_regfile$csr_trap_actions[129:66]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_W &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$display("%0d: %m.rl_stage1_CSRR_W", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_W_2 &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$display("%0d: %m.rl_stage1_CSRR_W_2", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_W_2 && csr_regfile$access_permitted_1 &&
	  (cur_verbosity__h3724 != 4'd0 ||
	   csr_regfile_read_csr_minstret__0_BITS_19_TO_0__ETC___d3156))
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 rg_csr_pc,
		 rg_trap_instr,
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_W_2 && csr_regfile$access_permitted_1 &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$display("    S1: write CSRRW/CSRRWI Rs1 %0d Rs1_val 0x%0h csr 0x%0h csr_val 0x%0h Rd %0d",
		 rg_trap_instr[19:15],
		 rs1_val__h44544,
		 rg_trap_instr[31:20],
		 csr_regfile$read_csr[63:0],
		 rg_trap_instr[11:7]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_W_2 &&
	  !csr_regfile$access_permitted_1 &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$display("    Trap on CSR permissions: Rs1 %0d Rs1_val 0x%0h csr 0x%0h Rd %0d",
		 rg_trap_instr[19:15],
		 rs1_val__h44544,
		 rg_trap_instr[31:20],
		 rg_trap_instr[11:7]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_S_or_C &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$display("%0d: %m.rl_stage1_CSRR_S_or_C",
		 csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$display("%0d: %m.rl_stage1_CSRR_S_or_C_2",
		 csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 &&
	  csr_regfile$access_permitted_2 &&
	  (cur_verbosity__h3724 != 4'd0 ||
	   csr_regfile_read_csr_minstret__0_BITS_19_TO_0__ETC___d3156))
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 rg_csr_pc,
		 rg_trap_instr,
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 &&
	  csr_regfile$access_permitted_2 &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$display("    S1: write CSRR_S_or_C: Rs1 %0d Rs1_val 0x%0h csr 0x%0h csr_val 0x%0h Rd %0d",
		 rg_trap_instr[19:15],
		 rs1_val__h45825,
		 rg_trap_instr[31:20],
		 csr_regfile$read_csr[63:0],
		 rg_trap_instr[11:7]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 &&
	  !csr_regfile$access_permitted_2 &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$display("    Trap on CSR permissions: Rs1 %0d Rs1_val 0x%0h csr 0x%0h Rd %0d",
		 rg_trap_instr[19:15],
		 rs1_val__h45825,
		 rg_trap_instr[31:20],
		 rg_trap_instr[11:7]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_restart_after_csrrx &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$display("%0d: %m.rl_stage1_restart_after_csrrx",
		 csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_restart_after_csrrx &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$write("    %m.CPU_StageF.ma_enq:  pc:0x%0h  epoch:%0d  priv:%0d",
	       rg_next_pc,
	       new_epoch__h29156,
	       rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_restart_after_csrrx &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$write("  sstatus_SUM:%0d  mstatus_MXR:%0d  satp:0x%0h",
	       csr_regfile$read_sstatus[18],
	       csr_regfile$read_mstatus[19],
	       csr_regfile$read_satp);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_restart_after_csrrx &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$display("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_restart_after_csrrx &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$display("    fa_stageF_redirect: minstret:%0d  new_pc:%0x  cur_priv:%0d, epoch %0d->%0d",
		 csr_regfile$read_csr_minstret,
		 rg_next_pc,
		 rg_cur_priv,
		 rg_epoch,
		 new_epoch__h29156);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_xRET &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$display("%0d: %m.rl_stage1_xRET", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_xRET &&
	  (cur_verbosity__h3724 != 4'd0 ||
	   csr_regfile_read_csr_minstret__0_BITS_19_TO_0__ETC___d3242))
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 stage1_rg_stage_input[437:374],
		 stage1_rg_stage_input[299:268],
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_xRET && cur_verbosity__h3724 != 4'd0)
	$display("    xRET: next_pc:0x%0h  new mstatus:0x%0h  new priv:%0d",
		 csr_regfile$csr_ret_actions[129:66],
		 csr_regfile$csr_ret_actions[63:0],
		 csr_regfile$csr_ret_actions[65:64]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_FENCE_I &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$display("%0d: %m.rl_stage1_FENCE_I", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE_I &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$display("%0d: %m.rl_finish_FENCE_I", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE_I &&
	  (cur_verbosity__h3724 != 4'd0 ||
	   csr_regfile_read_csr_minstret__0_BITS_19_TO_0__ETC___d3242))
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 stage1_rg_stage_input[437:374],
		 stage1_rg_stage_input[299:268],
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE_I &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$write("    %m.CPU_StageF.ma_enq:  pc:0x%0h  epoch:%0d  priv:%0d",
	       rg_next_pc,
	       new_epoch__h29156,
	       rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE_I &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$write("  sstatus_SUM:%0d  mstatus_MXR:%0d  satp:0x%0h",
	       csr_regfile$read_sstatus[18],
	       csr_regfile$read_mstatus[19],
	       csr_regfile$read_satp);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE_I &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$display("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE_I &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$display("    fa_stageF_redirect: minstret:%0d  new_pc:%0x  cur_priv:%0d, epoch %0d->%0d",
		 csr_regfile$read_csr_minstret,
		 rg_next_pc,
		 rg_cur_priv,
		 rg_epoch,
		 new_epoch__h29156);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_FENCE &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$display("%0d: %m.rl_stage1_FENCE", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$display("%0d: %m.rl_finish_FENCE", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE &&
	  (cur_verbosity__h3724 != 4'd0 ||
	   csr_regfile_read_csr_minstret__0_BITS_19_TO_0__ETC___d3242))
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 stage1_rg_stage_input[437:374],
		 stage1_rg_stage_input[299:268],
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$write("    %m.CPU_StageF.ma_enq:  pc:0x%0h  epoch:%0d  priv:%0d",
	       rg_next_pc,
	       new_epoch__h29156,
	       rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$write("  sstatus_SUM:%0d  mstatus_MXR:%0d  satp:0x%0h",
	       csr_regfile$read_sstatus[18],
	       csr_regfile$read_mstatus[19],
	       csr_regfile$read_satp);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$display("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$display("    fa_stageF_redirect: minstret:%0d  new_pc:%0x  cur_priv:%0d, epoch %0d->%0d",
		 csr_regfile$read_csr_minstret,
		 rg_next_pc,
		 rg_cur_priv,
		 rg_epoch,
		 new_epoch__h29156);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_SFENCE_VMA &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$display("%0d: %m.rl_stage1_SFENCE_VMA", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_SFENCE_VMA &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$display("%0d: %m.rl_finish_SFENCE_VMA", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_SFENCE_VMA &&
	  (cur_verbosity__h3724 != 4'd0 ||
	   csr_regfile_read_csr_minstret__0_BITS_19_TO_0__ETC___d3242))
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 stage1_rg_stage_input[437:374],
		 stage1_rg_stage_input[299:268],
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_SFENCE_VMA &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$write("    %m.CPU_StageF.ma_enq:  pc:0x%0h  epoch:%0d  priv:%0d",
	       rg_next_pc,
	       new_epoch__h29156,
	       rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_SFENCE_VMA &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$write("  sstatus_SUM:%0d  mstatus_MXR:%0d  satp:0x%0h",
	       csr_regfile$read_sstatus[18],
	       csr_regfile$read_mstatus[19],
	       csr_regfile$read_satp);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_SFENCE_VMA &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$display("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_SFENCE_VMA &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$display("    fa_stageF_redirect: minstret:%0d  new_pc:%0x  cur_priv:%0d, epoch %0d->%0d",
		 csr_regfile$read_csr_minstret,
		 rg_next_pc,
		 rg_cur_priv,
		 rg_epoch,
		 new_epoch__h29156);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_WFI &&
	  (cur_verbosity__h3724 != 4'd0 ||
	   csr_regfile_read_csr_minstret__0_BITS_19_TO_0__ETC___d3242))
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 stage1_rg_stage_input[437:374],
		 stage1_rg_stage_input[299:268],
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_WFI &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$display("%0d: CPU.rl_stage1_WFI: stage.out.next_pc 0x%0h",
		 csr_regfile$read_csr_mcycle,
		 rg_cur_priv,
		 stage1_rg_stage_input[437:374],
		 stage1_rg_stage_input[299:268],
		 x_out_next_pc__h10042);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_WFI_count && rg_wfi_counter[19:0] == 20'd0)
	$display("%0d: CPU: rl_WFI_count: waited so far for %0d clocks",
		 csr_regfile$read_csr_mcycle,
		 rg_wfi_counter);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_WFI_count && rg_wfi_counter[19:0] == 20'd0)
	$write("    csr_regfile.wfi_resume = ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_WFI_count && rg_wfi_counter[19:0] == 20'd0 &&
	  csr_regfile$wfi_resume)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_WFI_count && rg_wfi_counter[19:0] == 20'd0 &&
	  !csr_regfile$wfi_resume)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_WFI_count && rg_wfi_counter[19:0] == 20'd0)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_WFI_count && rg_wfi_counter[19:0] == 20'd0)
	$write("    stageF.out.ostatus     = ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_WFI_count && rg_wfi_counter[19:0] == 20'd0 &&
	  stageF_rg_full &&
	  (!near_mem$imem_valid ||
	   NOT_near_mem_imem_exc__1_2_AND_imem_rg_pc_BITS_ETC___d2199))
	$write("OSTATUS_BUSY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_WFI_count && rg_wfi_counter[19:0] == 20'd0 &&
	  stageF_rg_full &&
	  near_mem$imem_valid &&
	  near_mem_imem_exc__1_OR_NOT_imem_rg_pc_BITS_1__ETC___d2206)
	$write("OSTATUS_PIPE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_WFI_count && rg_wfi_counter[19:0] == 20'd0 &&
	  !stageF_rg_full)
	$write("OSTATUS_EMPTY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_WFI_count && rg_wfi_counter[19:0] == 20'd0)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_WFI_resume &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$display("%0d: CPU: rl_WFI_resume after waiting %0d cycles",
		 csr_regfile$read_csr_mcycle,
		 rg_wfi_counter);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_WFI_resume &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$write("    %m.CPU_StageF.ma_enq:  pc:0x%0h  epoch:%0d  priv:%0d",
	       rg_next_pc,
	       new_epoch__h29156,
	       rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_WFI_resume &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$write("  sstatus_SUM:%0d  mstatus_MXR:%0d  satp:0x%0h",
	       csr_regfile$read_sstatus[18],
	       csr_regfile$read_mstatus[19],
	       csr_regfile$read_satp);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_WFI_resume &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$display("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_WFI_resume &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$display("    fa_stageF_redirect: minstret:%0d  new_pc:%0x  cur_priv:%0d, epoch %0d->%0d",
		 csr_regfile$read_csr_minstret,
		 rg_next_pc,
		 rg_cur_priv,
		 rg_epoch,
		 new_epoch__h29156);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_from_WFI &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$display("%0d: %m.rl_reset_from_WFI", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_trap_fetch &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$write("    %m.CPU_StageF.ma_enq:  pc:0x%0h  epoch:%0d  priv:%0d",
	       rg_next_pc,
	       new_epoch__h29156,
	       rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_trap_fetch &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$write("  sstatus_SUM:%0d  mstatus_MXR:%0d  satp:0x%0h",
	       csr_regfile$read_sstatus[18],
	       csr_regfile$read_mstatus[19],
	       csr_regfile$read_satp);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_trap_fetch &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$display("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_trap_fetch &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$display("    fa_stageF_redirect: minstret:%0d  new_pc:%0x  cur_priv:%0d, epoch %0d->%0d",
		 csr_regfile$read_csr_minstret,
		 rg_next_pc,
		 rg_cur_priv,
		 rg_epoch,
		 new_epoch__h29156);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_interrupt &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$display("%0d: %m.rl_stage1_interrupt", csr_regfile$read_csr_mcycle);
    if (WILL_FIRE_RL_imem_rl_assert_fail)
      begin
        v__h2443 = $stime;
	#0;
      end
    v__h2437 = v__h2443 / 32'd10;
    if (WILL_FIRE_RL_imem_rl_assert_fail)
      $display("%0d: ERROR: CPU_Fetch_C: imem32.is_i32_not_i16 is False",
	       v__h2437);
    if (WILL_FIRE_RL_imem_rl_assert_fail) $finish(32'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset &&
	  cur_verbosity__h3724 != 4'd0)
	$display("%0d: %m.rl_reset_complete", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset)
	$display("CPU: Restart at PC = 0x%0h", 64'd4096);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$write("    %m.CPU_StageF.ma_enq:  pc:0x%0h  epoch:%0d  priv:%0d",
	       64'd4096,
	       new_epoch__h29156,
	       rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$write("  sstatus_SUM:%0d  mstatus_MXR:%0d  satp:0x%0h",
	       csr_regfile$read_sstatus[18],
	       csr_regfile$read_mstatus[19],
	       csr_regfile$read_satp);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$display("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$display("    fa_stageF_redirect: minstret:%0d  new_pc:%0x  cur_priv:%0d, epoch %0d->%0d",
		 csr_regfile$read_csr_minstret,
		 64'd4096,
		 rg_cur_priv,
		 rg_epoch,
		 new_epoch__h29156);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_complete && !rg_run_on_reset &&
	  cur_verbosity__h3724 != 4'd0)
	$display("%0d: %m.rl_reset_complete", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_complete && !rg_run_on_reset)
	$display("CPU: Entering DEBUG_MODE", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$display("%0d: %m.rl_pipe", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe && stage3_rg_full && stage3_rg_stage3[567] &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56 &&
	  stage3_rg_stage3[496])
	$display("    S3.fa_deq: write FRd 0x%0h, rd_val 0x%0h",
		 stage3_rg_stage3[566:562],
		 stage3_rg_stage3[490:427]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe && stage3_rg_full && stage3_rg_stage3[567] &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56 &&
	  !stage3_rg_stage3[496])
	$display("    S3.fa_deq: write GRd 0x%0h, rd_val 0x%0h",
		 stage3_rg_stage3[566:562],
		 stage3_rg_stage3[561:498]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  stage2_rg_full_14_AND_stage2_rg_stage2_15_BITS_ETC___d2519)
	$write("    S3.enq: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  stage2_rg_full_14_AND_stage2_rg_stage2_15_BITS_ETC___d2519)
	$write("data_to_Stage3 {pc:%h  instr:%h  priv:%0d\n",
	       stage2_rg_stage2[920:857],
	       stage2_rg_stage2[856:825],
	       stage2_rg_stage2[922:921]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  stage2_rg_full_14_AND_stage2_rg_stage2_15_BITS_ETC___d2519)
	$write("        rd_valid:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  stage2_rg_full_14_AND_IF_stage2_rg_stage2_15_B_ETC___d2522)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  stage2_rg_full_14_AND_stage2_rg_stage2_15_BITS_ETC___d2524)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  stage2_rg_full_14_AND_stage2_rg_stage2_15_BITS_ETC___d2526)
	$write("  fflags: %05b",
	       "'h%h",
	       x_out_data_to_stage3_fpr_flags__h8415);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  stage2_rg_full_14_AND_stage2_rg_stage2_15_BITS_ETC___d2528)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  stage2_rg_full_14_AND_stage2_rg_stage2_15_BITS_ETC___d2530)
	$write("  frd:%0d  rd_val:%h\n",
	       x_out_data_to_stage3_rd__h8411,
	       x_out_data_to_stage3_frd_val__h8416);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  stage2_rg_full_14_AND_stage2_rg_stage2_15_BITS_ETC___d2532)
	$write("  grd:%0d  rd_val:%h\n",
	       x_out_data_to_stage3_rd__h8411,
	       x_out_data_to_stage3_rd_val__h8412);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  stage2_rg_full_14_AND_stage2_rg_stage2_15_BITS_ETC___d2519)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  stage2_rg_full_14_AND_stage2_rg_stage2_15_BITS_ETC___d2544)
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 stage2_rg_stage2[920:857],
		 stage2_rg_stage2[856:825],
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  csr_regfile_csr_mip_read__380_EQ_rg_prev_mip_381___d2382 &&
	  (stage2_rg_stage2[824:822] == 3'd0 ||
	   IF_stage2_rg_stage2_15_BITS_824_TO_822_16_EQ_1_ETC___d2404 ||
	   !stage2_rg_full) &&
	  stage1_rg_full &&
	  !stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d348 &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$display("    rl_pipe: Discarding stage1 due to redirection");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  csr_regfile_csr_mip_read__380_EQ_rg_prev_mip_3_ETC___d2866)
	$write("    CPU_Stage2.enq (Data_Stage1_to_Stage2) ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  csr_regfile_csr_mip_read__380_EQ_rg_prev_mip_3_ETC___d2866)
	$write("data_to_Stage 2 {pc:%h  instr:%h  priv:%0d\n",
	       stage1_rg_stage_input[437:374],
	       stage1_rg_stage_input[299:268],
	       rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  csr_regfile_csr_mip_read__380_EQ_rg_prev_mip_3_ETC___d2866)
	$write("            op_stage2:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  csr_regfile_csr_mip_read__380_EQ_rg_prev_mip_3_ETC___d2870)
	$write("OP_Stage2_ALU");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  csr_regfile_csr_mip_read__380_EQ_rg_prev_mip_3_ETC___d2875)
	$write("OP_Stage2_LD");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  csr_regfile_csr_mip_read__380_EQ_rg_prev_mip_3_ETC___d2552 &&
	  stage1_rg_full &&
	  NOT_stage2_rg_full_14_71_OR_stage2_rg_stage2_1_ETC___d2408 &&
	  stage1_rg_stage_input_46_BITS_371_TO_370_47_EQ_ETC___d2879)
	$write("OP_Stage2_ST");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  csr_regfile_csr_mip_read__380_EQ_rg_prev_mip_3_ETC___d2885)
	$write("OP_Stage2_M");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  csr_regfile_csr_mip_read__380_EQ_rg_prev_mip_3_ETC___d2890)
	$write("OP_Stage2_AMO");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  csr_regfile_csr_mip_read__380_EQ_rg_prev_mip_3_ETC___d2895)
	$write("OP_Stage2_FD");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  csr_regfile_csr_mip_read__380_EQ_rg_prev_mip_3_ETC___d2866)
	$write("  rd:%0d\n", x_out_data_to_stage2_rd__h10352);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  csr_regfile_csr_mip_read__380_EQ_rg_prev_mip_3_ETC___d2866)
	$write("            addr:%h  val1:%h  val2:%h}",
	       x_out_data_to_stage2_addr__h10353,
	       x_out_data_to_stage2_val1__h10354,
	       x_out_data_to_stage2_val2__h10355);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  csr_regfile_csr_mip_read__380_EQ_rg_prev_mip_3_ETC___d2866)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  csr_regfile_csr_mip_read__380_EQ_rg_prev_mip_3_ETC___d2866)
	$write("            fval1:%h  fval2:%h  fval3:%h}",
	       x_out_data_to_stage2_fval1__h10356,
	       alu_outputs___1_fval2__h11906,
	       x_out_data_to_stage2_fval3__h10358);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  csr_regfile_csr_mip_read__380_EQ_rg_prev_mip_3_ETC___d2866)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_csr_regfile_csr_mip_read__380_EQ_rg_prev_mi_ETC___d2902 &&
	  stageD_rg_full &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$display("    CPU_Stage1.enq: 0x%08h", stageD_rg_data[233:170]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_csr_regfile_csr_mip_read__380_EQ_rg_prev_mi_ETC___d2949 &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$display("    CPU_StageD.enq (Data_StageF_to_StageD)");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_csr_regfile_csr_mip_read__380_EQ_rg_prev_mi_ETC___d2949 &&
	  NOT_csr_regfile_csr_mip_read__380_EQ_rg_prev_m_ETC___d2968 &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$write("    %m.CPU_StageF.ma_enq:  pc:0x%0h  epoch:%0d  priv:%0d",
	       stageF_branch_predictor$predict_rsp,
	       stageF_rg_epoch,
	       rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_csr_regfile_csr_mip_read__380_EQ_rg_prev_mi_ETC___d2949 &&
	  NOT_csr_regfile_csr_mip_read__380_EQ_rg_prev_m_ETC___d2968 &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$write("  sstatus_SUM:%0d  mstatus_MXR:%0d  satp:0x%0h",
	       csr_regfile$read_sstatus[18],
	       csr_regfile$read_mstatus[19],
	       csr_regfile$read_satp);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_csr_regfile_csr_mip_read__380_EQ_rg_prev_mi_ETC___d2949 &&
	  NOT_csr_regfile_csr_mip_read__380_EQ_rg_prev_m_ETC___d2968 &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d56)
	$display("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_start)
	$display("================================================================");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_start)
	$write("CPU: Bluespec  RISC-V  Flute  v3.0");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_start) $display(" (RV64)");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_start)
	$display("Copyright (c) 2016-2023 Bluespec, Inc. All Rights Reserved.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_start)
	$display("================================================================");
  end
  // synopsys translate_on
endmodule  // mkCPU

